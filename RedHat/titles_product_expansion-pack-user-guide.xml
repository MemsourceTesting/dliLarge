<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book [
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<?asciidoc-toc maxdepth="3"?><?asciidoc-numbered?><book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
<info>
<title>Using MicroProfile with JBoss EAP XP 3.0.0</title><subtitle>For Use with JBoss EAP XP 3.0.0</subtitle>

<date>2021-06-30</date>
<productname>Red Hat JBoss Enterprise Application Platform</productname>
<productnumber>7.4</productnumber>
<abstract>
  <para>This document provides general information about using MicroProfile in JBoss EAP XP 3.0.0.</para>
</abstract>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Author_Group.xml"/>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Common_Content/Legal_Notice.xml"/>
</info>
<preface xml:id="making-open-source-more-inclusive">
<title>Making open source more inclusive</title>
<simpara>Red Hat is committed to replacing problematic language in our code, documentation, and web properties. We are beginning with these four terms: master, slave, blacklist, and whitelist. Because of the enormity of this endeavor, these changes will be implemented gradually over several upcoming releases. For more details, see <link xlink:href="https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language">our CTO Chris Wright’s message</link>.</simpara>
</preface>
<preface xml:id="proc_providing-feedback-on-red-hat-documentation_default">
<title>Providing feedback on Red Hat documentation</title>
<simpara>We appreciate your feedback on our documentation. To provide feedback, you can highlight the text in a document and add comments. Follow the steps in the procedure to learn about submitting feedback on Red Hat documentation.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Log in to the Red Hat Customer Portal.</simpara>
</listitem>
<listitem>
<simpara>In the Red Hat Customer Portal, view the document in <emphasis role="strong">Multi-page HTML</emphasis> format.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Click <emphasis role="strong">Feedback</emphasis> to see existing reader comments.</simpara>
<note>
<simpara>The feedback feature is enabled only in the <emphasis role="strong">Multi-page HTML</emphasis> format.</simpara>
</note>
</listitem>
<listitem>
<simpara>Highlight the section of the document where you want to provide feedback.</simpara>
</listitem>
<listitem>
<simpara>In the prompt menu that displays near the text you selected, click <emphasis role="strong">Add Feedback</emphasis>.</simpara>
<simpara>A text box opens in the feedback section on the right side of the page.</simpara>
</listitem>
<listitem>
<simpara>Enter your feedback in the text box and click <emphasis role="strong">Submit</emphasis>.</simpara>
<simpara>You have created a documentation issue.</simpara>
</listitem>
<listitem>
<simpara>To view the issue, click the issue tracker link in the feedback view.</simpara>
</listitem>
</orderedlist>
</preface>
<chapter xml:id="jboss_eap_xp_for_the_latest_microprofile_capabilities" remap="_jboss_eap_xp_for_the_latest_microprofile_capabilities">
<title>JBoss EAP XP for the latest MicroProfile capabilities</title>
<section xml:id="about-jboss-eap-xp_default">
<title>About JBoss EAP XP</title>
<simpara>The MicroProfile Expansion Pack (JBoss EAP XP) is available as a patch stream, which is provided using JBoss EAP XP manager.</simpara>
<note>
<simpara>JBoss EAP XP is subject to a separate support and life cycle policy. For more details, see the <link xlink:href="https://access.redhat.com/support/policy/updates/jboss_eap_xp_notes">JBoss Enterprise Application Platform expansion pack Support and Life Cycle Policies</link> page.</simpara>
</note>
<simpara>The JBoss EAP XP patch provides the following MicroProfile 4.0 components:</simpara>
<itemizedlist>
<listitem>
<simpara>MicroProfile Config</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Fault Tolerance</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Health</simpara>
</listitem>
<listitem>
<simpara>MicroProfile JWT</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Metrics</simpara>
</listitem>
<listitem>
<simpara>MicroProfile OpenAPI</simpara>
</listitem>
<listitem>
<simpara>MicroProfile OpenTracing</simpara>
</listitem>
<listitem>
<simpara>MicroProfile REST Client</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Reactive Messaging</simpara>
</listitem>
</itemizedlist>
<note xml:id="amq-streams-technology-preview_default">
<simpara>The MicroProfile Reactive Messaging subsystem supports Red Hat AMQ Streams. This feature implements the MicroProfile Reactive Messaging 1.0 API and Red Hat provides the feature as a technology preview for JBoss EAP XP 3.0.0.</simpara>
<simpara>Red Hat tested Red Hat AMQ Streams 2021.Q2 on JBoss EAP. However, check the Red Hat JBoss Enterprise Application Platform supported configurations page for information about the latest Red Hat AMQ Streams version that has been tested on JBoss EAP XP 3.0.0.</simpara>
</note>
</section>
<section xml:id="jbossxpshortname-installation_default">
<title>JBoss EAP XP installation</title>
<simpara role="_abstract">When you install JBoss EAP XP, make sure that the JBoss EAP XP patch is compatible with your version of JBoss EAP. The JBoss EAP XP 3.0.x patch is compatible with the JBoss EAP 7.4 release.</simpara>
<itemizedlist role="_additional-resources">
<title>Additional Resources</title>
<listitem>
<simpara>For more information about installing the latest JBoss EAP XP patch on the latest JBoss EAP release, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/using_eclipse_microprofile_with_jboss_eap_xp_3.0.0/#installing-jboss-eap-xp-on-eap_default">Installing JBoss EAP XP 3.0.0 on JBoss EAP 7.4.x</link>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="jboss-eap-xp-manager-to-manage-eap-xp-patch-streams_default">
<title>JBoss EAP XP manager for managing JBoss EAP XP patch streams</title>
<simpara>JBoss EAP XP manager is an executable <literal>jar</literal> file that you can download from the <emphasis role="strong">Product Downloads</emphasis> page. Use JBoss EAP XP manager to apply the JBoss EAP XP patches from the JBoss EAP XP patch stream. The patches contain the MicroProfile 4.0 implementations and the bug fixes for these MicroProfile 4.0 implementations.</simpara>
<note>
<simpara>You can not manage the JBoss EAP XP patches using the management console.</simpara>
</note>
<simpara>If you run JBoss EAP XP manager without any arguments, or with the <literal>help</literal> command, you get a list of all the available commands with a description of what they do.</simpara>
<simpara>Run the manager with the <literal>help</literal> command to get more information about the arguments available.</simpara>
<note>
<simpara>Most of the JBoss EAP XP manager commands take a <literal>--jboss-home</literal> argument to point to the JBoss EAP XP server to manage the JBoss EAP XP patch stream. Specify the the path to the server in the <literal>JBOSS_HOME</literal> environment variable if you want to  omit this. <literal>--jboss-home</literal> takes precedence over the environment variable.</simpara>
</note>
</section>
<section xml:id="jboss-eap-xp-manager-commands_default">
<title>JBoss EAP XP manager 3.0 commands</title>
<simpara>JBoss EAP XP manager 3.0 provides different commands for managing JBoss EAP XP patch streams.</simpara>
<simpara>The following commands are provided:</simpara>
<variablelist>
<varlistentry>
<term><literal>patch-apply</literal></term>
<listitem>
<simpara>Use this command to apply patches to your JBoss EAP installation.</simpara>
<simpara>The <literal>patch-apply</literal> command is similar to the <literal>patch apply</literal> management CLI command. The <literal>patch-apply</literal> command accepts only those arguments that are required for applying patches using the tool. It uses the default values for other <literal>patch apply</literal> management CLI command arguments.</simpara>
<simpara>You can use the <literal>patch-apply</literal> command to apply patches to any patch stream that is enabled on the server. You can also use the command to apply both the base server patches as well as the XP patches.</simpara>
<formalpara>
<title>Example of using the <literal>patch-apply</literal> command:</title>
<para>
<screen>$ java -jar jboss-eap-xp-manager.jar patch-apply --jboss-home=<emphasis>/PATH/TO/EAP</emphasis> --patch=<emphasis>/PATH/TO/PATCH/</emphasis>jboss-eap-7.3.4-patch.zip</screen>
</para>
</formalpara>
<simpara>When you apply an XP patch, JBoss EAP XP manager 3.0 performs validation to prevent patch and patch stream mismatch. The following example illustrates incorrect combinations:</simpara>
<itemizedlist>
<listitem>
<simpara>Trying to install JBoss EAP XP 2.0 patch on a server with XP 3.0 patch stream set up causes the following error:</simpara>
<screen>java.lang.IllegalStateException: The JBoss EAP XP patch stream in the patch 'jboss-eap-xp-2.0' does not match the currently enabled JBoss EAP XP patch stream [jboss-eap-xp-3.0]
	at org.jboss.eap.util.xp.patch.stream.manager.ManagerPatchApplyAction.doExecute(ManagerPatchApplyAction.java:33)
	at org.jboss.eap.util.xp.patch.stream.manager.ManagerAction.execute(ManagerAction.java:40)
	at org.jboss.eap.util.xp.patch.stream.manager.ManagerMain.main(ManagerMain.java:50)</screen>
</listitem>
<listitem>
<simpara>Trying to install JBoss EAP XP 3.0 patch on a server that is not set up for JBoss EAP XP 3.0 patch stream causes the following error:</simpara>
<screen>java.lang.IllegalStateException: You are attempting to install a patch for the 'jboss-eap-xp-3.0' JBoss EAP XP Patch Stream. However this patch stream is not yet set up in the JBoss EAP server. Run the 'setup' command to enable the patch stream.
	at org.jboss.eap.util.xp.patch.stream.manager.ManagerPatchApplyAction.doExecute(ManagerPatchApplyAction.java:29)
	at org.jboss.eap.util.xp.patch.stream.manager.ManagerAction.execute(ManagerAction.java:40)
	at org.jboss.eap.util.xp.patch.stream.manager.ManagerMain.main(ManagerMain.java:50)</screen>
<simpara>In both the cases, no changes are made to the server.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>remove</literal></term>
<listitem>
<simpara>Use this command to remove the JBoss EAP XP patch stream setup from the JBoss EAP server.</simpara>
<formalpara>
<title>Example of using the <literal>remove</literal> command</title>
<para>
<screen>$ java -jar jboss-eap-xp-manager.jar remove --jboss-home=<emphasis>/PATH/TO/EAP</emphasis></screen>
</para>
</formalpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setup</literal></term>
<listitem>
<simpara>Use this command to set up a clean JBoss EAP server for the JBoss EAP XP patch stream.</simpara>
<simpara>When you use the <literal>setup</literal> command, JBoss EAP XP manager performs the following actions:</simpara>
<itemizedlist>
<listitem>
<simpara>Enables the JBoss EAP XP 3.0 patch stream.</simpara>
</listitem>
<listitem>
<simpara>Applies patches specified using <literal>--base-patch</literal> and <literal>--xp-patch</literal> attributes.</simpara>
</listitem>
<listitem>
<simpara>Copies the <literal>standalone-microprofile.xml</literal> and <literal>standalone-microprofile-ha.xml</literal> configuration files into the server configuration directory.</simpara>
<simpara>If older configuration files are already installed, the new files are saved as timestamped copies in the target configuration directory, such as <literal>standalone-microprofile-yyyyMMdd-HHmmss.xml</literal>.</simpara>
<simpara>You can set the target directory using the <literal>--jboss-config-directory</literal> argument.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Example of using the <literal>setup</literal> command</title>
<para>
<screen>$ java -jar jboss-eap-xp-manager.jar setup --jboss-home=<emphasis>/PATH/TO/EAP</emphasis></screen>
</para>
</formalpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>status</literal></term>
<listitem>
<simpara>Use this command to find the current status of your JBoss EAP XP server.
The status command returns the following information:</simpara>
<itemizedlist>
<listitem>
<simpara>The status of the JBoss EAP XP stream.</simpara>
</listitem>
<listitem>
<simpara>Any support policy changes due to being in the current state.</simpara>
</listitem>
<listitem>
<simpara>The major version of JBoss EAP XP.</simpara>
</listitem>
<listitem>
<simpara>Enabled patch streams and their cumulative patch IDs.</simpara>
</listitem>
<listitem>
<simpara>The available JBoss EAP XP manager commands to change the state.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Example of using the <literal>status</literal> command</title>
<para>
<screen>$ java -jar jboss-eap-xp-manager.jar status --jboss-home=<emphasis>/PATH/TO/EAP</emphasis></screen>
</para>
</formalpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>upgrade</literal></term>
<listitem>
<simpara>Use this command to upgrade an old JBoss EAP XP patch stream to the latest patch stream in the JBoss EAP server.</simpara>
<simpara>When you use the <literal>upgrade</literal> command, JBoss EAP XP manager performs the following actions:</simpara>
<itemizedlist>
<listitem>
<simpara>Creates a backup of the files enabling the old patch stream in the server.</simpara>
</listitem>
<listitem>
<simpara>Enables the JBoss EAP XP 3.0 patch stream.</simpara>
</listitem>
<listitem>
<simpara>Applies patches specified using <literal>--base-patch</literal> and <literal>--xp-patch</literal> attributes.</simpara>
</listitem>
<listitem>
<simpara>Copies the <literal>standalone-microprofile.xml</literal> and <literal>standalone-microprofile-ha.xml</literal> configuration files into the server configuration directory.
If older configuration files are already installed, the new files are saved as timestamped copies in the target configuration directory, such as <literal>standalone-microprofile-yyyyMMdd-HHmmss.xml</literal>.</simpara>
</listitem>
<listitem>
<simpara>If something goes wrong, JBoss EAP XP manager attempts to restore the previous patch stream from the backup it created.</simpara>
<simpara>You can set the target directory using the <literal>--jboss-config-directory</literal> argument</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Example of using the <literal>upgrade</literal> command:</title>
<para>
<screen>$ java -jar jboss-eap-xp-manager.jar upgrade --jboss-home=<emphasis>/PATH/TO/EAP</emphasis></screen>
</para>
</formalpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="installing-jboss-eap-xp-on-eap_default">
<title>Installing JBoss EAP XP 3.0.0 on JBoss EAP 7.4.x</title>
<simpara role="_abstract">Install JBoss EAP XP 3.0.0 on the JBoss EAP 7.4 base server.</simpara>
<simpara>Use JBoss EAP XP manager 3.0.0 to manage JBoss EAP XP 3.0.0 patch streams.</simpara>
<note>
<simpara>JBoss EAP XP 3.0.0 is certified with JBoss EAP 7.4.x.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have downloaded the following files from the <emphasis role="strong">Product Downloads</emphasis> page:</simpara>
<itemizedlist>
<listitem>
<simpara>The <literal>jboss-eap-xp-3.0.0-manager.jar</literal> file (JBoss EAP XP manager 3.0)</simpara>
</listitem>
<listitem>
<simpara>JBoss EAP 7.4 server archive file</simpara>
</listitem>
<listitem>
<simpara>JBoss EAP XP 3.0.0 patch</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Extract the downloaded JBoss EAP 7.4 server archive file to the path of your JBoss EAP installation.</simpara>
</listitem>
<listitem>
<simpara>Set up JBoss EAP XP manager 3.0.0 to manage the JBoss EAP XP 3.0 patch stream by using the following command:</simpara>
<screen>$ java -jar jboss-eap-xp-manager.jar setup --jboss-home=<emphasis>&lt;path_to_eap&gt;</emphasis></screen>
<note>
<simpara>You can apply the JBoss EAP XP 3.0.0 patch at the same time. Include the path to the JBoss EAP XP 3.0.0 patch by using the <literal>--xp-patch</literal> argument.</simpara>
<simpara>Example:</simpara>
<screen>$ java -jar jboss-eap-xp-manager.jar setup --jboss-home=<emphasis>&lt;path_to_eap&gt;</emphasis> --xp-patch <emphasis>&lt;path_to_patch&gt;</emphasis>jboss-eap-xp-3.0.0-patch.zip</screen>
</note>
<simpara>The server is now ready to manage the JBoss EAP XP 3.0.0 patch stream.</simpara>
</listitem>
<listitem>
<simpara>Optional: If you have not applied the JBoss EAP XP 3.0.0 patch to your JBoss EAP server by using the <literal>--xp-patch</literal> argument, apply the JBoss EAP XP 3.0.0 patch by using the JBoss EAP XP manager 3.0.0 <literal>patch-apply</literal> command:</simpara>
<screen>$ java -jar jboss-eap-xp-manager.jar patch-apply --jboss-home=<emphasis>&lt;path_to_eap&gt;</emphasis> --patch=<emphasis>&lt;path_to_patch&gt;</emphasis>jboss-eap-xp-3.0.0-patch.zip</screen>
<simpara>The <literal>patch-apply</literal> command is similar to the <literal>patch apply</literal> management CLI command. You can also use the <literal>patch apply</literal> management CLI command to apply the patch.</simpara>
</listitem>
</orderedlist>
<simpara>The JBoss EAP server is now ready to manage the JBoss EAP XP 3.0.0 patch stream as you patched the JBoss EAP server with the JBoss EAP XP 3.0.0 patch.</simpara>
<itemizedlist role="_additional-resources">
<title>Additional Resources</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/using_eclipse_microprofile_with_jboss_eap_xp_3.0.0/#jboss-eap-xp-manager-commands_default">JBoss EAP XP manager 3.0 commands</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="uninstalling-jboss-eap-xp_default">
<title>Uninstalling JBoss EAP XP</title>
<simpara>Uninstalling JBoss EAP XP removes all the files related to enabling the JBoss EAP XP 3.0.0 patch stream and the MicroProfile 4.0 functionality. The uninstallation process does not affect anything in the base server patch stream or functionality.</simpara>
<note>
<simpara>The uninstallation process does not remove any configuration files, including the ones you added to the JBoss EAP XP patches when you enabled the JBoss EAP XP patch stream.</simpara>
</note>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Uninstall JBoss EAP XP 3.0.0 by issuing the following command:</simpara>
<screen>$ java -jar jboss-eap-xp-manager.jar remove --jboss-home=<emphasis>/PATH/TO/EAP</emphasis></screen>
</listitem>
</itemizedlist>
<simpara>To install MicroProfile 4.0 functionality again, run the <literal>setup</literal> command again to enable the patch stream, and then apply JBoss EAP XP patches to add the MicroProfile 4.0 modules.</simpara>
</section>
<section xml:id="viewing-status-of-jboss-eap-xp_default">
<title>Viewing the status of JBoss EAP XP</title>
<simpara>You can view the following information with the <literal>status</literal> command:</simpara>
<itemizedlist>
<listitem>
<simpara>The status of the JBoss EAP XP stream.</simpara>
</listitem>
<listitem>
<simpara>Any support policy changes due to being in the current state.</simpara>
</listitem>
<listitem>
<simpara>The major version of JBoss EAP XP.</simpara>
</listitem>
<listitem>
<simpara>Enabled patch streams and their cumulative patch ids.</simpara>
</listitem>
<listitem>
<simpara>The available JBoss EAP XP manager commands to change the state.</simpara>
</listitem>
</itemizedlist>
<simpara>JBoss EAP XP can be in one of the following states:</simpara>
<variablelist>
<varlistentry>
<term><literal>Not set up</literal></term>
<listitem>
<simpara>JBoss EAP is clean and does not have JBoss EAP XP set up.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Set up</literal> </term>
<listitem>
<simpara>JBoss EAP has JBoss EAP XP  set up. The version of the XP patch stream is not displays as the user can use CLI to determine it.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Inconsistent</literal> </term>
<listitem>
<simpara>The files relating to the JBoss EAP XP are in an inconsistent state. This is an error condition and should not happen normally. If you encounter this error, remove the JBoss EAP XP manager as described in the Uninstalling JBoss EAP XP topic and install JBoss EAP XP again using the <literal>setup</literal> command.</simpara>
</listitem>
</varlistentry>
</variablelist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>View the status of JBoss EAP XP by issuing the following command:</simpara>
<screen>$ java -jar jboss-eap-xp-manager.jar status --jboss-home=<emphasis>&lt;path_to_eap&gt;</emphasis></screen>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/using_eclipse_microprofile_with_jboss_eap_xp_3.0.0/index#uninstalling-jboss-eap-xp_default">Uninstalling JBoss EAP XP</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/using_eclipse_microprofile_with_jboss_eap_xp_3.0.0/index#installing-jboss-eap-xp-on-eap_default">Installing JBoss EAP XP 3.0.0 on JBoss EAP 7.4.x</link></simpara>
</listitem>
</itemizedlist>
</section>
</chapter>
<chapter xml:id="understand_microprofile" remap="_understand_microprofile">
<title>Understand MicroProfile</title>
<section xml:id="microprofile_config" remap="_microprofile_config">
<title>MicroProfile Config</title>
<section xml:id="microprofile-config-in-eap_default">
<title>MicroProfile Config in JBoss EAP</title>
<simpara>Configuration data can change dynamically and applications need to be able to access the latest configuration information without restarting the server.</simpara>
<simpara>MicroProfile Config provides portable externalization of configuration data. This means, you can configure applications and microservices to run in multiple environments without modification or repackaging.</simpara>
<simpara>MicroProfile Config functionality is implemented in JBoss EAP using the SmallRye Config component and is provided by the <literal>microprofile-config-smallrye</literal> subsystem. This subsystem is included in the default JBoss EAP 7.4 configuration.</simpara>
<note>
<simpara>MicroProfile Config is only supported in JBoss EAP XP. It is not supported in JBoss EAP.</simpara>
</note>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara><link xlink:href="https://microprofile.io/project/eclipse/microprofile-config">Eclipse MicroProfile Config</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="http://github.com/smallrye/smallrye-config/">SmallRye Config</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="config-sources-supported-in-eap_default">
<title>MicroProfile Config sources supported in MicroProfile Config</title>
<simpara>MicroProfile Config configuration properties can come from different locations and can be in different formats. These properties are provided by ConfigSources. ConfigSources are implementations of the <literal>org.eclipse.microprofile.config.spi.ConfigSource</literal> interface.</simpara>
<simpara>The MicroProfile Config specification provides the following default <literal>ConfigSource</literal> implementations for retrieving configuration values:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>System.getProperties()</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>System.getenv()</literal>.</simpara>
</listitem>
<listitem>
<simpara>All <literal>META-INF/microprofile-config.properties</literal> files on the class path.</simpara>
</listitem>
</itemizedlist>
<simpara>The <literal>microprofile-config-smallrye</literal> subsystem supports additional types of <literal>ConfigSource</literal> resources for retrieving configuration values. You can also retrieve the configuration values from the following resources:</simpara>
<itemizedlist>
<listitem>
<simpara>Properties in a <literal>microprofile-config-smallrye/config-source</literal> management resource</simpara>
</listitem>
<listitem>
<simpara>Files in a directory</simpara>
</listitem>
<listitem>
<simpara><literal>ConfigSource</literal> class</simpara>
</listitem>
<listitem>
<simpara><literal>ConfigSourceProvider</literal> class</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/webassets/avalon/d/red_hat_jboss_enterprise_application_platform/7.4/javadocs/org/eclipse/microprofile/config/spi/ConfigSource.html"><literal>org.eclipse.microprofile.config.spi.ConfigSource</literal></link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="microprofile_fault_tolerance" remap="_microprofile_fault_tolerance">
<title>MicroProfile Fault Tolerance</title>
<section xml:id="about_microprofile_fault_tolerance_specification" remap="_about_microprofile_fault_tolerance_specification">
<title>About MicroProfile Fault Tolerance specification</title>
<simpara>The MicroProfile Fault Tolerance specification defines strategies to deal with errors inherent in distributed microservices.</simpara>
<simpara>The MicroProfile Fault Tolerance specification defines the following strategies to handle errors:</simpara>
<variablelist>
<varlistentry>
<term>Timeout</term>
<listitem>
<simpara>Define the amount of time within which an execution must finish. Defining a timeout prevents waiting for an execution indefinitely.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Retry</term>
<listitem>
<simpara>Define the criteria for retrying a failed execution.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Fallback</term>
<listitem>
<simpara>Provide an alternative in the case of a failed execution.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>CircuitBreaker</term>
<listitem>
<simpara>Define the number of failed execution attempts before temporarily stopping. You can define the length of the delay before resuming execution.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Bulkhead</term>
<listitem>
<simpara>Isolate failures in part of the system so that the rest of the system can still function.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Asynchronous</term>
<listitem>
<simpara>Execute client request in a separate thread.</simpara>
</listitem>
</varlistentry>
</variablelist>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara><link xlink:href="https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/microprofile-fault-tolerance-spec.html">MicroProfile Fault Tolerance specification</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="microprofile_fault_tolerance_in_jboss_eap" remap="_microprofile_fault_tolerance_in_jboss_eap">
<title>MicroProfile Fault Tolerance in JBoss EAP</title>
<simpara>The <literal>microprofile-fault-tolerance-smallrye</literal> subsystem provides support for MicroProfile Fault Tolerance in JBoss EAP. The subsystem is available only in the JBoss EAP XP stream.</simpara>
<simpara>The <literal>microprofile-fault-tolerance-smallrye</literal> subsystem provides the following annotations for interceptor bindings:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>@Timeout</literal></simpara>
</listitem>
<listitem>
<simpara><literal>@Retry</literal></simpara>
</listitem>
<listitem>
<simpara><literal>@Fallback</literal></simpara>
</listitem>
<listitem>
<simpara><literal>@CircuitBreaker</literal></simpara>
</listitem>
<listitem>
<simpara><literal>@Bulkhead</literal></simpara>
</listitem>
<listitem>
<simpara><literal>@Asynchronous</literal></simpara>
</listitem>
</itemizedlist>
<simpara>You can bind these annotations at the class level or at the method level. An annotation bound to a class applies to all of the business methods of that class.</simpara>
<simpara>The following rules apply to binding interceptors:</simpara>
<itemizedlist>
<listitem>
<simpara>If a component class declares or inherits a class-level interceptor binding, the following restrictions apply:</simpara>
<itemizedlist>
<listitem>
<simpara>The class must not be declared final.</simpara>
</listitem>
<listitem>
<simpara>The class must not contain any static, private, or final methods.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>If a non-static, non-private method of a component class declares a method level interceptor binding, neither the method nor the component class may be declared final.</simpara>
</listitem>
</itemizedlist>
<simpara>Fault tolerance operations have the following restrictions:</simpara>
<itemizedlist>
<listitem>
<simpara>Fault tolerance interceptor bindings must be applied to a bean class or bean class method.</simpara>
</listitem>
<listitem>
<simpara>When invoked, the invocation must be the business method invocation as defined in the Jakarta Contexts and Dependency Injection specification.</simpara>
</listitem>
<listitem>
<simpara>An operation is not considered fault tolerant if both of the following conditions are true:</simpara>
<itemizedlist>
<listitem>
<simpara>The method itself is not bound to any fault tolerance interceptor.</simpara>
</listitem>
<listitem>
<simpara>The class containing the method is not bound to any fault tolerance interceptor.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>The <literal>microprofile-fault-tolerance-smallrye</literal> subsystem provides the following configuration options, in addition to the configuration options provided by MicroProfile Fault Tolerance:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>io.smallrye.faulttolerance.globalThreadPoolSize</literal></simpara>
</listitem>
<listitem>
<simpara><literal>io.smallrye.faulttolerance.timeoutExecutorThreads</literal></simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara><link xlink:href="https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/microprofile-fault-tolerance-spec.html">MicroProfile Fault Tolerance Specification</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://github.com/smallrye/smallrye-fault-tolerance">SmallRye Fault Tolerance project</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="microprofile_health" remap="_microprofile_health">
<title>MicroProfile Health</title>
<section xml:id="microprofile-health-in-eap_default">
<title>MicroProfile Health in JBoss EAP</title>
<simpara>JBoss EAP includes the SmallRye Health component, which you can use to determine whether the JBoss EAP instance is responding as expected. This capability is enabled by default.</simpara>
<simpara>MicroProfile Health is only available when running JBoss EAP as a standalone server.</simpara>
<simpara>The MicroProfile Health specification defines the following health checks:</simpara>
<variablelist>
<varlistentry>
<term>Readiness</term>
<listitem>
<simpara>Determines whether an application is ready to process requests. The annotation <literal>@Readiness</literal> provides this health check.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Liveness</term>
<listitem>
<simpara>Determines whether an application is running. The annotation <literal>@Liveness</literal> provides this health check.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The <literal>@Health</literal> annotation was removed in MicroProfile Health 3.0.</simpara>
<simpara>MicroProfile Health 3.0 has the following breaking changes:</simpara>
<itemizedlist>
<listitem>
<simpara>Pruning of <literal>@Health</literal> qualifier</simpara>
</listitem>
<listitem>
<simpara>Renaming of the HealthCheckResponse <literal>state</literal> parameter to <literal>status</literal> to fix deserialization issues. This has also resulted in renaming of the corresponding methods.</simpara>
</listitem>
</itemizedlist>
<simpara>For more information about the breaking changes in MicroProfile Health 3.0, see <link xlink:href="https://download.eclipse.org/microprofile/microprofile-health-3.0/microprofile-health-spec-3.0.html#release_notes_3_0">Release Notes for MicroProfile Health 3.0</link>.</simpara>
<important>
<simpara>The <literal>:empty-readiness-checks-status</literal> and the <literal>:empty-liveness-checks-status</literal> management attributes specify the global status when no <literal>readiness</literal> or <literal>liveness</literal> probes are defined.</simpara>
</important>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/using_eclipse_microprofile_with_jboss_eap_xp_3.0.0/#global-status-when-probes-are-not-defined_default">Global status when probes are not defined</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://github.com/smallrye/smallrye-health">SmallRye Health</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://github.com/eclipse/microprofile-health/">MicroProfile Health</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/development_guide/#microprofile_health_smallrye_custom_check">Implement a Custom Health Check</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="microprofile_jwt" remap="_microprofile_jwt">
<title>MicroProfile JWT</title>
<section xml:id="eclipse-microprofile-jwt-integration-in-eap_default">
<title>MicroProfile JWT integration in JBoss EAP</title>
<simpara>The subsystem <literal>microprofile-jwt-smallrye</literal> provides MicroProfile JWT integration in JBoss EAP.</simpara>
<simpara>The following functionalities are provided by the <literal>microprofile-jwt-smallrye</literal> subsystem:</simpara>
<itemizedlist>
<listitem>
<simpara>Detecting deployments that use MicroProfile JWT security.</simpara>
</listitem>
<listitem>
<simpara>Activating support for MicroProfile JWT.</simpara>
</listitem>
</itemizedlist>
<simpara>The subsystem contains no configurable attributes or resources.</simpara>
<simpara>In addition to the <literal>microprofile-jwt-smallrye</literal> subsystem, the <literal>org.eclipse.microprofile.jwt.auth.api</literal> module provides MicroProfile JWT integration in JBoss EAP.</simpara>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara><link xlink:href="https://github.com/smallrye/smallrye-jwt">SmallRye JWT</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="difference-between-a-traditional-and-jwt-deployment_default">
<title>Differences between a traditional deployment and an MicroProfile JWT deployment</title>
<simpara>MicroProfile JWT deployments do not depend on managed SecurityDomain resources like traditional JBoss EAP deployments. Instead, a virtual SecurityDomain is created and used across the MicroProfile JWT deployment.</simpara>
<simpara>As the MicroProfile JWT deployment is configured entirely within the MicroProfile Config properties and the <literal>microprofile-jwt-smallrye</literal> subsystem, the virtual SecurityDomain does not need any other managed configuration for the deployment.</simpara>
</section>
<section xml:id="eclipse-microprofile-jwt-activation-in-eap_default">
<title>MicroProfile JWT activation in JBoss EAP</title>
<simpara>MicroProfile JWT is activated for applications based on the presence of an <literal>auth-method</literal> in the application.</simpara>
<simpara>The MicroProfile JWT integration is activated for an application in the following way:</simpara>
<itemizedlist>
<listitem>
<simpara>As part of the deployment process, JBoss EAP scans the application archive for the presence of an <literal>auth-method</literal>.</simpara>
</listitem>
<listitem>
<simpara>If an <literal>auth-method</literal> is present and defined as <literal>MP-JWT</literal>, the MicroProfile JWT integration is activated.</simpara>
</listitem>
</itemizedlist>
<simpara>The <literal>auth-method</literal> can be specified in either or both of the following files:</simpara>
<itemizedlist>
<listitem>
<simpara>the file containing the class that extends <literal>javax.ws.rs.core.Application</literal>, annotated with the <literal>@LoginConfig</literal></simpara>
</listitem>
<listitem>
<simpara>the <literal>web.xml</literal> configuration file</simpara>
</listitem>
</itemizedlist>
<simpara>If <literal>auth-method</literal> is defined both in a class, using annotation, and in the web.xml configuration file, the definition in <literal>web.xml</literal> configuration file is used.</simpara>
</section>
<section xml:id="limitations-of-jwt-integration-in-eap_default">
<title>Limitations of MicroProfile JWT in JBoss EAP</title>
<simpara>The MicroProfile JWT implementation in JBoss EAP has certain limitations.</simpara>
<simpara>The following limitations of MicroProfile JWT implementation exist in JBoss EAP:</simpara>
<itemizedlist>
<listitem>
<simpara>The MicroProfile JWT implementation parses only the first key from the JSON Web Key Set (JWKS) supplied in the <literal>mp.jwt.verify.publickey</literal> property. Therefore, if a token claims to be signed by the second key or any key after the second key, the token fails verification and the request containing the token is not authorized.</simpara>
</listitem>
<listitem>
<simpara>Base64 encoding of JWKS is not supported.</simpara>
</listitem>
</itemizedlist>
<simpara>In both cases, a clear text JWKS can be referenced instead of using the <literal>mp.jwt.verify.publickey.location</literal> config property.</simpara>
</section>
</section>
<section xml:id="microprofile_metrics" remap="_microprofile_metrics">
<title>MicroProfile Metrics</title>
<section xml:id="microprofile-metrics-in-eap_default">
<title>MicroProfile Metrics in JBoss EAP</title>
<simpara>JBoss EAP includes the SmallRye Metrics component. The SmallRye Metrics component provides the MicroProfile Metrics functionality using the <literal>microprofile-metrics-smallrye</literal> subsystem.</simpara>
<simpara>The <literal>microprofile-metrics-smallrye</literal> subsystem provides monitoring data for the JBoss EAP instance. The subsystem is enabled by default.</simpara>
<important>
<simpara>The <literal>microprofile-metrics-smallrye</literal> subsystem is only enabled in standalone configurations.</simpara>
</important>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara><link xlink:href="http://github.com/smallrye/smallrye-metrics/">SmallRye Metrics</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://github.com/eclipse/microprofile-metrics/">MicroProfile Metrics</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="microprofile_openapi" remap="_microprofile_openapi">
<title>MicroProfile OpenAPI</title>
<section xml:id="microprofile-open-api-in-eap_default">
<title>MicroProfile OpenAPI in JBoss EAP</title>
<simpara>MicroProfile OpenAPI is integrated in JBoss EAP using the <literal>microprofile-openapi-smallrye</literal> subsystem.</simpara>
<simpara>The MicroProfile OpenAPI specification defines an HTTP endpoint that serves an OpenAPI 3.0 document. The OpenAPI 3.0 document describes the REST services  for the host. The OpenAPI endpoint is registered using the configured path, for example <link xlink:href="http://localhost:8080/openapi">http://localhost:8080/openapi</link>, local to the root of the host associated with a deployment.</simpara>
<note>
<simpara>Currently, the OpenAPI endpoint for a virtual host can only document a single  deployment. To use OpenAPI with multiple  deployments registered with different context paths on the same virtual host, each deployment must use a distinct endpoint path.</simpara>
</note>
<simpara>The OpenAPI endpoint returns a YAML document by  default. You can also request a JSON document using an Accept HTTP header, or a format query parameter.</simpara>
<simpara>If the Undertow server or host of a given application defines an HTTPS listener then the OpenAPI document is also available using HTTPS. For example, an endpoint for HTTPS is <link xlink:href="https://localhost:8443/openapi">https://localhost:8443/openapi</link>.</simpara>
</section>
</section>
<section xml:id="microprofile_opentracing" remap="_microprofile_opentracing">
<title>MicroProfile OpenTracing</title>
<section xml:id="eclipse-microprofile-open-tracing_default">
<title>Eclipse MicroProfile OpenTracing</title>
<simpara>The ability to trace requests across service boundaries is important, especially in a microservices environment where a request can flow through multiple services during its life cycle.</simpara>
<simpara>The Eclipse MicroProfile OpenTracing specification defines behaviors and an API for accessing an OpenTracing compliant <literal>Tracer</literal> interface within a Jakarta Contexts and Dependency Injection-bean application. The <literal>Tracer</literal> interface automatically traces Jakarta RESTful Web Services applications.</simpara>
<simpara>The behaviors specify how OpenTracing Spans are created automatically for incoming and outgoing requests. The API defines how to explicitly disable or enable tracing for given endpoints.</simpara>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara>For more information about Eclipse MicroProfile OpenTracing specification, see <link xlink:href="https://github.com/eclipse/microprofile-opentracing/blob/master/spec/src/main/asciidoc/microprofile-opentracing.asciidoc">Eclipse MicroProfile OpenTracing documentation.</link></simpara>
</listitem>
<listitem>
<simpara>For more information about the <literal>Tracer</literal> interface, see <link xlink:href="https://www.javadoc.io/doc/io.opentracing/opentracing-api/0.32.0-RC1/index.html"><literal>Tracer</literal> javadoc</link>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="eclipse-microprofile-open-tracing-in-eap_default">
<title>Eclipse MicroProfile OpenTracing in EAP</title>
<simpara>You can use the <literal>microprofile-opentracing-smallrye</literal> subsystem to configure the distributed tracing of  Jakarta EE applications. This subsystem uses the SmallRye OpenTracing component to provide the Eclipse MicroProfile OpenTracing functionality for JBoss EAP.</simpara>
<simpara>MicroProfile OpenTracing 2.0 supports tracing requests for applications. You can configure the default Jaeger Java Client tracer, plus a set of instrumentation libraries for components commonly used in Jakarta EE, using JBoss EAP management API with the management CLI or the management console.</simpara>
<note>
<simpara>Each individual WAR deployed to the JBoss EAP server automatically has its own <literal>Tracer</literal> instance. Each WAR within an EAR is treated as an individual WAR, and each has its own <literal>Tracer</literal> instance. By default, the service name used with the Jaeger Client is derived from the deployment’s name, which is usually the WAR file name.</simpara>
</note>
<simpara>Within the <literal>microprofile-opentracing-smallrye</literal> subsystem, you can configure the Jaeger Java Client by setting system properties or environment variables.</simpara>
<important>
<simpara>Configuring the Jeager Client tracer using system properties and environment variables is provided as a Technology Preview. The system properties and environment variables affiliated with the Jeager Client tracer might change and become incompatible with each other in future releases.</simpara>
</important>
<note>
<simpara>By default, the probabilistic sampling strategy of the Jaeger Client for Java is set to <literal>0.001</literal>, meaning that only approximately one in one thousand traces are sampled. To sample every request, set the system properties <literal>JAEGER_SAMPLER_TYPE</literal> to <literal>const</literal> and <literal>JAEGER_SAMPLER_PARAM</literal> to <literal>1</literal>.</simpara>
</note>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara>For more information about SmallRye OpenTracing functionality, see the <link xlink:href="https://github.com/smallrye/smallrye-opentracing">SmallRye OpenTracing component.</link></simpara>
</listitem>
<listitem>
<simpara>For more information about the default tracer, see the <link xlink:href="https://github.com/jaegertracing/jaeger-client-java">Jaeger Java Client.</link></simpara>
</listitem>
<listitem>
<simpara>For more information about the <literal>Tracer</literal> interface, see <link xlink:href="https://www.javadoc.io/doc/io.opentracing/opentracing-api/0.32.0-RC1/index.html"><literal>Tracer</literal> javadoc</link>.</simpara>
</listitem>
<listitem>
<simpara>For more information about overriding the default tracer and tracing Jakarta Contexts and Dependency Injection beans, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/development_guide/#using_microprofile_opentracing_smallrye_tracer">Using Eclipse MicroProfile OpenTracing to Trace Requests</link> in the <emphasis>Development Guide</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>For more information about configuring the Jaeger Client, see the <link xlink:href="https://github.com/jaegertracing/jaeger-client-java">Jaeger documentation.</link></simpara>
</listitem>
<listitem>
<simpara>For more information about valid system properties, see <link xlink:href="https://github.com/jaegertracing/jaeger-client-java/tree/master/jaeger-core#configuration-via-environment">Configuration via Environment</link> in the Jaeger documentation.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="microprofile_rest_client" remap="_microprofile_rest_client">
<title>MicroProfile REST Client</title>
<section xml:id="microprofile-rest-client_default">
<title>MicroProfile REST client</title>
<simpara>JBoss EAP XP 3.0.0 supports the MicroProfile REST client 2.0 that builds on Jakarta RESTful Web Services 2.1.6 client APIs to provide a type-safe approach to invoke RESTful services over HTTP. The MicroProfile Type Safe REST clients are defined as Java interfaces. With the MicroProfile REST clients, you can write client applications with executable code.</simpara>
<simpara>Use the MicroProfile REST client to avail the following capabilities:</simpara>
<itemizedlist>
<listitem>
<simpara>An intuitive syntax</simpara>
</listitem>
<listitem>
<simpara>Programmatic registration of providers</simpara>
</listitem>
<listitem>
<simpara>Declarative registration of providers</simpara>
</listitem>
<listitem>
<simpara>Declarative specification of headers</simpara>
</listitem>
<listitem>
<simpara>Propagation of headers on the server</simpara>
</listitem>
<listitem>
<simpara><literal>ResponseExceptionMapper</literal></simpara>
</listitem>
<listitem>
<simpara>Jakarta Contexts and Dependency Injection integration</simpara>
</listitem>
<listitem>
<simpara>Access to server-sent events (SSE)</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#intuitive-syntax_default">A comparison between MicroProfile REST client and Jakarta RESTful Web Services syntaxes</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#programmatic-registration-of-providers_default">Programmatic registration of providers in MicroProfile REST client</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#declarative-registration-of-providers_default">Declarative registration of providers in MicroProfile REST client</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#declarative-specification-of-headers_default">Declarative specification of headers in MicroProfile REST client</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#propagation-of-headers-on-the-server_default">Propagation of headers on the server in MicroProfile REST client</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#responseexceptionmapper_default">ResponseExceptionMapper in MicroProfile REST client</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#cdi-integration_default">Context dependency injection with MicroProfile REST client</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
</chapter>
<chapter xml:id="administer_microprofile_in_jboss_eap" remap="_administer_microprofile_in_jboss_eap">
<title>Administer MicroProfile in JBoss EAP</title>
<section xml:id="microprofile_opentracing_administration" remap="_microprofile_opentracing_administration">
<title>MicroProfile OpenTracing administration</title>
<section xml:id="enabling-microprofile-open-tracing_default">
<title>Enabling MicroProfile Open Tracing</title>
<simpara>Use the following management CLI commands to enable the MicroProfile Open Tracing feature globally for the server instance by adding the subsystem to the server configuration.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Enable the <literal>microprofile-opentracing-smallrye</literal> subsystem using the following management command:</simpara>
<screen>/subsystem=microprofile-opentracing-smallrye:add()</screen>
</listitem>
<listitem>
<simpara>Reload the server for the changes to take effect.</simpara>
<screen>reload</screen>
</listitem>
</orderedlist>
</section>
<section xml:id="removing-microprofile-opentracing-smallrye-subsystem_default">
<title>Removing the <literal>microprofile-opentracing-smallrye</literal> subsystem</title>
<simpara>The <literal>microprofile-opentracing-smallrye</literal> subsystem is included in the default JBoss EAP 7.4 configuration. This subsystem provides Eclipse MicroProfile OpenTracing functionality for JBoss EAP 7.4. If you experience system memory or performance degradation with MicroProfile OpenTracing enabled, you might want to disable the <literal>microprofile-opentracing-smallrye</literal> subsystem.</simpara>
<simpara>You can use the <literal>remove</literal> operation in the management CLI to disable the MicroProfile OpenTracing feature globally for a given server.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Remove the subsystem.</simpara>
<screen>/subsystem=microprofile-opentracing-smallrye:remove()</screen>
</listitem>
<listitem>
<simpara>Reload the server for the changes to take effect.</simpara>
<screen>reload</screen>
</listitem>
</orderedlist>
</section>
<section xml:id="adding-microprofile-opentracing-smallrye-subsystem_default">
<title>Adding the <literal>microprofile-opentracing-smallrye</literal> subsystem</title>
<simpara>You can enable the <literal>microprofile-opentracing-smallrye</literal> subsystem by adding it to the server configuration. Use the <literal>add</literal> operation in the management CLI to enable the MicroProfile OpenTracing feature globally for a given the server.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the subsystem.</simpara>
<screen>/subsystem=microprofile-opentracing-smallrye:add()</screen>
</listitem>
<listitem>
<simpara>Reload the server for the changes to take effect.</simpara>
<screen>reload</screen>
</listitem>
</orderedlist>
</section>
<section xml:id="installing-jaeger_default">
<title>Installing Jaeger</title>
<simpara>Install Jaeger using <literal>docker</literal>.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara><literal>docker</literal> is installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Install Jaeger using <literal>docker</literal> by issuing the following command in CLI:</simpara>
<screen>$ docker run -d --name jaeger   -p 6831:6831/udp   -p 5778:5778   -p 14268:14268   -p 16686:16686   jaegertracing/all-in-one:1.16</screen>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="microprofile_config_configuration" remap="_microprofile_config_configuration">
<title>MicroProfile Config configuration</title>
<section xml:id="adding-properties-in-datasources_default">
<title>Adding properties in a ConfigSource management resource</title>
<simpara>You can store properties directly in a <literal>config-source</literal> subsystem as a management resource.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Create a ConfigSource and add a property:</simpara>
<screen>/subsystem=microprofile-config-smallrye/config-source=props:add(properties={"name" = "jim"})</screen>
</listitem>
</itemizedlist>
</section>
<section xml:id="configuring-directories-as-datasources_default">
<title>Configuring directories as ConfigSources</title>
<simpara>When a  property is stored in a directory as a file, the file-name is the name of a property and the file content is the value of the property.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a directory where you want to store the files:</simpara>
<screen>$ mkdir -p ~/config/prop-files/</screen>
</listitem>
<listitem>
<simpara>Navigate to the directory:</simpara>
<screen>$ cd ~/config/prop-files/</screen>
</listitem>
<listitem>
<simpara>Create a file <literal>name</literal> to store the value for the property <literal>name</literal>:</simpara>
<screen>$ touch name</screen>
</listitem>
<listitem>
<simpara>Add the value of the property to the file:</simpara>
<screen>$ echo "jim" &gt; name</screen>
</listitem>
<listitem>
<simpara>Create a ConfigSource in which the file name is the property and the file contents the value of the property:</simpara>
<screen>/subsystem=microprofile-config-smallrye/config-source=file-props:add(dir={path=~/config/prop-files})</screen>
<simpara>This results in the following XML configuration:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;subsystem xmlns="urn:wildfly:microprofile-config-smallrye:1.0"&gt;
    &lt;config-source name="file-props"&gt;
        &lt;dir path="/etc/config/prop-files"/&gt;
    &lt;/config-source&gt;
&lt;/subsystem&gt;</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="obtaining-configsource-configuration-from-a-configsource-class_default">
<title>Obtaining ConfigSource from a ConfigSource class</title>
<simpara>You can create and configure a custom <literal>org.eclipse.microprofile.config.spi.ConfigSource</literal> implementation class to provide a source for the configuration values.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>The following management CLI command creates a <literal>ConfigSource</literal> for the implementation class named <literal>org.example.MyConfigSource</literal> that is provided by a JBoss module named <literal>org.example</literal>.</simpara>
<simpara>If you want to use a <literal>ConfigSource</literal> from the <literal>org.example</literal> module, add the <literal>&lt;module name="org.eclipse.microprofile.config.api"/&gt;</literal> dependency to the <literal>path/to/org/example/main/module.xml</literal> file.</simpara>
<screen>/subsystem=microprofile-config-smallrye/config-source=my-config-source:add(class={name=org.example.MyConfigSource, module=org.example})</screen>
<simpara>This command results in the following XML configuration for the <literal>microprofile-config-smallrye</literal> subsystem.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;subsystem xmlns="urn:wildfly:microprofile-config-smallrye:1.0"&gt;
    &lt;config-source name="my-config-source"&gt;
        &lt;class name="org.example.MyConfigSource" module="org.example"/&gt;
    &lt;/config-source&gt;
&lt;/subsystem&gt;</programlisting>
</listitem>
</itemizedlist>
<simpara>Properties provided by the custom <literal>org.eclipse.microprofile.config.spi.ConfigSource</literal> implementation class are available to any JBoss EAP deployment.</simpara>
</section>
<section xml:id="obtaining-config-source-configuration-from-configsourceprovider-class_default">
<title>Obtaining ConfigSource configuration from a ConfigSourceProvider class</title>
<simpara>You can create and configure a custom <literal>org.eclipse.microprofile.config.spi.ConfigSourceProvider</literal> implementation class that registers implementations for multiple <literal>ConfigSource</literal> instances.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Create a <literal>config-source-provider</literal>:</simpara>
<screen>/subsystem=microprofile-config-smallrye/config-source-provider=my-config-source-provider:add(class={name=org.example.MyConfigSourceProvider, module=org.example})</screen>
<simpara>The command creates a <literal>config-source-provider</literal> for the implementation class named <literal>org.example.MyConfigSourceProvider</literal> that is provided by a JBoss Module named <literal>org.example</literal>.</simpara>
<simpara>If you want to use a <literal>config-source-provider</literal> from the <literal>org.example</literal> module, add the <literal>&lt;module name="org.eclipse.microprofile.config.api"/&gt;</literal> dependency to the <literal>path/to/org/example/main/module.xml</literal> file.</simpara>
<simpara>This command results in the following XML configuration for the <literal>microprofile-config-smallrye</literal> subsystem:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;subsystem xmlns="urn:wildfly:microprofile-config-smallrye:1.0"&gt;
    &lt;config-source-provider name="my-config-source-provider"&gt;
         &lt;class name="org.example.MyConfigSourceProvider" module="org.example"/&gt;
    &lt;/config-source-provider&gt;
&lt;/subsystem&gt;</programlisting>
</listitem>
</itemizedlist>
<simpara>Properties provided by the <literal>ConfigSourceProvider</literal> implementation are available to any JBoss EAP deployment.</simpara>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara>For information about how to add a global module to the JBoss EAP server, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/configuration_guide/#add_a_global_module">Define Global Modules</link> in the <emphasis>Configuration Guide</emphasis> for JBoss EAP.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="microprofile_fault_tolerance_configuration" remap="_microprofile_fault_tolerance_configuration">
<title>MicroProfile Fault Tolerance configuration</title>
<section xml:id="adding-the-microprofile-fault-tolerance-extension_default">
<title>Adding the MicroProfile Fault Tolerance extension</title>
<simpara>The MicroProfile Fault Tolerance extension is included in <literal>standalone-microprofile.xml</literal> and <literal>standalone-microprofile-ha.xml</literal> configurations that are provided as part of JBoss EAP XP.</simpara>
<simpara>The extension is not included in the standard <literal>standalone.xml</literal> configuration. To use the extension, you must manually enable it.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>EAP XP pack is installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the MicroProfile Fault Tolerance extension using the following management CLI command:</simpara>
<screen>/extension=org.wildfly.extension.microprofile.fault-tolerance-smallrye:add</screen>
</listitem>
<listitem>
<simpara>Enable the <literal>microprofile-fault-tolerance-smallrye</literal> subsystem using the following managenent command:</simpara>
<screen>/subsystem=microprofile-fault-tolerance-smallrye:add</screen>
</listitem>
<listitem>
<simpara>Reload the server with the following management command:</simpara>
<screen>reload</screen>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="microprofile_health_configuration" remap="_microprofile_health_configuration">
<title>MicroProfile Health configuration</title>
<section xml:id="examining-health-using-the-management-cli_default">
<title>Examining health using the management CLI</title>
<simpara>You can check system health using the management CLI.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Examine health:</simpara>
<screen>/subsystem=microprofile-health-smallrye:check
{
    "outcome" =&gt; "success",
    "result" =&gt; {
        "status" =&gt; "UP",
        "checks" =&gt; []
    }
}</screen>
</listitem>
</itemizedlist>
</section>
<section xml:id="examining-health-using-the-management-console_default">
<title>Examining health using the management console</title>
<simpara>You can check system health using the management console.</simpara>
<simpara>A check runtime operation shows the health checks and the global outcome as boolean value.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Navigate to the <emphasis role="strong">Runtime</emphasis> tab and select the server.</simpara>
</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Monitor</emphasis> column, click <emphasis role="strong">MicroProfile Health</emphasis> → <emphasis role="strong">View</emphasis>.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="examining-health-using-the-http-endpoint_default">
<title>Examining health using the HTTP endpoint</title>
<simpara>Health check is automatically deployed to the health context on JBoss EAP, so you can obtain the current health using the HTTP endpoint.</simpara>
<simpara>The default address for the <literal>/health</literal> endpoint, accessible from the management interface, is <literal><link xlink:href="http://127.0.0.1:9990/health">http://127.0.0.1:9990/health</link></literal>.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>To obtain the current health of the server using the HTTP endpoint, use the following URL:.</simpara>
<screen>http://<emphasis>&lt;host&gt;</emphasis>:<emphasis>&lt;port&gt;</emphasis>/health</screen>
<simpara>Accessing this context displays the health check in JSON format, indicating if the server is healthy.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="enabling-authentication-for-microprofile-health_default">
<title>Enabling authentication for MicroProfile Health</title>
<simpara>You can configure the <literal>health</literal> context to require authentication for access.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Set the <literal>security-enabled</literal> attribute to <literal>true</literal> on the <literal>microprofile-health-smallrye</literal> subsystem.</simpara>
<screen>/subsystem=microprofile-health-smallrye:write-attribute(name=security-enabled,value=true)</screen>
</listitem>
<listitem>
<simpara>Reload the server for the changes to take effect.</simpara>
<screen>reload</screen>
</listitem>
</orderedlist>
<simpara>Any subsequent attempt to access the <literal>/health</literal> endpoint triggers an authentication prompt.</simpara>
</section>
<section xml:id="con-readiness-probes-to-determine-server-health-readiness_default">
<title>Readiness probes that determine server health and readiness</title>
<simpara role="_abstract">JBoss EAP XP 3.0.0 supports three readiness probes to determine server health and readiness.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>server-status</literal> - returns <literal>UP</literal> when the server-state is <literal>running</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>boot-errors</literal> - returns <literal>UP</literal> when the probe detects no boot errors.</simpara>
</listitem>
<listitem>
<simpara><literal>deployment-status</literal> - returns <literal>UP</literal> when the status for all deployments is <literal>OK</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>These readiness probes are enabled by default. You can disable the probes using the MicroProfile Config property <literal>mp.health.disable-default-procedures</literal>.</simpara>
<simpara>The following example illustrates the use of the three probes with the <literal>check</literal> operation:</simpara>
<screen>[standalone@localhost:9990 /] /subsystem=microprofile-health-smallrye:check
{
    "checks": [
        {
            "name": "empty-readiness-checks",
            "status": "UP"
        },
        {
            "name": "empty-liveness-checks",
            "status": "UP"
        },
        {
            "data": {
                "value": "running"
            },
            "name": "server-state",
            "status": "UP"
        },
        {
            "name": "deployments-status",
            "status": "UP"
        },
        {
            "name": "boot-errors",
            "status": "UP"
        }
    ],
    "status": "UP"
}</screen>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#microprofile-health-in-eap_default">MicroProfile Health in JBoss EAP</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#global-status-when-probes-are-not-defined_default">Global status when probes are not defined</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="global-status-when-probes-are-not-defined_default">
<title>Global status when probes are not defined</title>
<simpara>The <literal>:empty-readiness-checks-status</literal> and <literal>:empty-liveness-checks-status</literal> management attributes specify the global status when no <literal>readiness</literal> or <literal>liveness</literal> probes are defined.</simpara>
<simpara>These attributes allow applications to report ‘DOWN’ until their probes verify that the application is ready or live. By default, applications report ‘UP’.</simpara>
<itemizedlist>
<listitem>
<simpara>The <literal>:empty-readiness-checks-status</literal> attribute specifies the global status for <literal>readiness</literal> probes if no <literal>readiness</literal> probes have been defined:</simpara>
<screen>/subsystem=microprofile-health-smallrye:read-attribute(name=empty-readiness-checks-status)
{
    "outcome" =&gt; "success",
    "result" =&gt; expression "${env.MP_HEALTH_EMPTY_READINESS_CHECKS_STATUS:UP}"
}</screen>
</listitem>
<listitem>
<simpara>The <literal>:empty-liveness-checks-status</literal> attribute specifies the global status for <literal>liveness</literal> probes if no <literal>liveness</literal> probes have been defined:</simpara>
<screen>/subsystem=microprofile-health-smallrye:read-attribute(name=empty-liveness-checks-status)
{
    "outcome" =&gt; "success",
    "result" =&gt; expression "${env.MP_HEALTH_EMPTY_LIVENESS_CHECKS_STATUS:UP}"
}</screen>
<simpara>The <literal>/health</literal> HTTP endpoint and the <literal>:check</literal> operation that check both <literal>readiness</literal> and <literal>liveness</literal> probes also take into account these attributes.</simpara>
</listitem>
</itemizedlist>
<simpara>You can also modify these attributes as shown in the following example:</simpara>
<screen>/subsystem=microprofile-health-smallrye:write-attribute(name=empty-readiness-checks-status,value=DOWN)
{
    "outcome" =&gt; "success",
    "response-headers" =&gt; {
        "operation-requires-reload" =&gt; true,
        "process-state" =&gt; "reload-required"
    }
}</screen>
</section>
</section>
<section xml:id="microprofile_jwt_configuration" remap="_microprofile_jwt_configuration">
<title>MicroProfile JWT configuration</title>
<section xml:id="enabling-microprofile-jwt-smallrye-subsystem_default">
<title>Enabling <literal>microprofile-jwt-smallrye</literal> subsystem</title>
<simpara>The MicroProfile JWT integration is provided by the <literal>microprofile-jwt-smallrye</literal> subsystem and is included in the default configuration. If the subsystem is not present in the default configuration, you can add it as follows.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>EAP XP is installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Enable the MicroProfile JWT smallrye extension in JBoss EAP:</simpara>
<screen>/extension=org.wildfly.extension.microprofile.jwt-smallrye:add</screen>
</listitem>
<listitem>
<simpara>Enable the <literal>microprofile-jwt-smallrye</literal> subsystem:</simpara>
<screen>/subsystem=microprofile-jwt-smallrye:add</screen>
</listitem>
<listitem>
<simpara>Reload the server:</simpara>
<screen>reload</screen>
</listitem>
</orderedlist>
<simpara>The <literal>microprofile-jwt-smallrye</literal> subsystem is enabled.</simpara>
</section>
</section>
<section xml:id="microprofile_metrics_administration" remap="_microprofile_metrics_administration">
<title>MicroProfile Metrics administration</title>
<section xml:id="metrics-available-on-management-interface_default">
<title>Metrics available on the management interface</title>
<simpara>The JBoss EAP subsystem metrics are exposed in Prometheus format.</simpara>
<simpara>Metrics are automatically available on the JBoss EAP management interface, with the following contexts:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>/metrics/</literal> - Contains metrics specified in the MicroProfile 3.0 specification.</simpara>
</listitem>
<listitem>
<simpara><literal>/metrics/vendor</literal> - Contains vendor-specific metrics, such as memory pools.</simpara>
</listitem>
<listitem>
<simpara><literal>/metrics/application</literal> - Contains metrics from deployed applications and subsystems that use the MicroProfile Metrics API.</simpara>
</listitem>
</itemizedlist>
<simpara>The metric names are based on subsystem and attribute names. For example, the subsystem <literal>undertow</literal> exposes a metric attribute <literal>request-count</literal> for every servlet in an application deployment. The name of this metric is <literal>jboss_undertow_request_count</literal>. The prefix <literal>jboss</literal> identifies JBoss EAP as the source of the metrics.</simpara>
</section>
<section xml:id="examining-metrics-using-the-http-endpoint_default">
<title>Examining metrics using the HTTP endpoint</title>
<simpara>Examine the metrics that are available on the JBoss EAP management interface using the HTTP endpoint.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Use the curl command:</simpara>
<screen>$ curl -v http://localhost:9990/metrics | grep -i type</screen>
</listitem>
</itemizedlist>
</section>
<section xml:id="enabling-authentication-for-the-mterics-http-endpoint_default">
<title>Enabling Authentication for the MicroProfile Metrics HTTP Endpoint</title>
<simpara>Configure the <literal>metrics</literal> context to require users to be authorized to access the context. This configuration extends to all the subcontexts of the <literal>metrics</literal> context.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Set the <literal>security-enabled</literal> attribute to <literal>true</literal> on the <literal>microprofile-metrics-smallrye</literal> subsystem.</simpara>
<screen>/subsystem=microprofile-metrics-smallrye:write-attribute(name=security-enabled,value=true)</screen>
</listitem>
<listitem>
<simpara>Reload the server for the changes to take effect.</simpara>
<screen>reload</screen>
</listitem>
</orderedlist>
<simpara>Any subsequent attempt to access the <literal>metrics</literal> endpoint results in an authentication prompt.</simpara>
</section>
<section xml:id="obtaining-the-request-count-for-a-jax-rs-application_default">
<title>Obtaining the request count for a web service</title>
<simpara>Obtain the request count for a web service that exposes its request count metric.</simpara>
<simpara>The following procedure uses <literal>helloworld-rs</literal> quickstart as the web service for obtaining request count. The quickstart is available at Download the quickstart from: <link xlink:href="https://github.com/jboss-developer/jboss-eap-quickstarts">jboss-eap-quickstarts</link>.</simpara>
<itemizedlist>
<title>Prerequsites</title>
<listitem>
<simpara>The web service exposes request count.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Enable statistics for the <literal>undertow</literal> subsystem:</simpara>
<itemizedlist>
<listitem>
<simpara>Start the standalone server with statistics enabled:</simpara>
<screen>$ ./standalone.sh -Dwildfly.statistics-enabled=true</screen>
</listitem>
<listitem>
<simpara>For an already running server, enable the statistics for the <literal>undertow</literal> subsystem:</simpara>
<screen>/subsystem=undertow:write-attribute(name=statistics-enabled,value=true)</screen>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Deploy the <literal>helloworld-rs</literal> quickstart:</simpara>
<itemizedlist>
<listitem>
<simpara>In the root directory of the quickstart, deploy the web application using Maven:</simpara>
<screen>$ mvn clean install wildfly:deploy</screen>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Query the HTTP endpoint in the CLI using the <literal>curl</literal> command and filter for <literal>request_count</literal>:</simpara>
<screen>$ curl -v http://localhost:9990/metrics |  grep request_count</screen>
<simpara>Expected output:</simpara>
<screen>jboss_undertow_request_count_total{server="default-server",http_listener="default",} 0.0</screen>
<simpara>The attribute value returned is <literal>0.0</literal>.</simpara>
</listitem>
<listitem>
<simpara>Access the quickstart, located at <link xlink:href="http://localhost:8080/helloworld-rs/">http://localhost:8080/helloworld-rs/</link>, in a web browser and click any of the links.</simpara>
</listitem>
<listitem>
<simpara>Query the HTTP endpoint from the CLI again:</simpara>
<screen>$ curl -v http://localhost:9990/metrics |  grep request_count</screen>
<simpara>Expected output:</simpara>
<screen>jboss_undertow_request_count_total{server="default-server",http_listener="default",} 1.0</screen>
<simpara>The value is updated to <literal>1.0</literal>.</simpara>
<simpara>Repeat the last two steps to verify that the request count is updated.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="microprofile_openapi_administration" remap="_microprofile_openapi_administration">
<title>MicroProfile OpenAPI administration</title>
<section xml:id="enabling-microprofile-open-api_default">
<title>Enabling MicroProfile OpenAPI</title>
<simpara>The <literal>microprofile-openapi-smallrye</literal> subsystem is provided in the <literal>standalone-microprofile.xml</literal> configuration. However, JBoss EAP XP uses the <literal>standalone.xml</literal> by default. You must include the subsystem in <literal>standalone.xml</literal> to use it.</simpara>
<simpara>Alternatively, you can follow the procedure <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index/#updating-standalone-server-configuration_default">Updating standalone configurations with Eclipse MicroProfile subsystems and extensions</link> to update the <literal>standalone.xml</literal> configuration file.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Enable the MicroProfile OpenAPI smallrye extension in JBoss EAP:</simpara>
<screen>/extension=org.wildfly.extension.microprofile.openapi-smallrye:add()</screen>
</listitem>
<listitem>
<simpara>Enable the <literal>microprofile-openapi-smallrye</literal> subsystem using the following management command:</simpara>
<screen>/subsystem=microprofile-openapi-smallrye:add()</screen>
</listitem>
<listitem>
<simpara>Reload the server.</simpara>
<screen>reload</screen>
</listitem>
</orderedlist>
<simpara>The <literal>microprofile-openapi-smallrye</literal> subsystem is enabled.</simpara>
</section>
<section xml:id="requesting-openapi-document-http-accept_default">
<title>Requesting an MicroProfile OpenAPI document using Accept HTTP header</title>
<simpara>Request an MicroProfile OpenAPI document, in the JSON format, from a deployment using an Accept HTTP header.</simpara>
<simpara>By default, the OpenAPI endpoint returns a YAML document.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The deployment being queried is configured to return an MicroProfile OpenAPI document.</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Issue the following <literal>curl</literal> command to query the <literal>/openapi</literal> endpoint of the deployment:</simpara>
<screen>$ curl -v -H'Accept: application/json' <emphasis>http://localhost:8080</emphasis>/openapi
&lt; HTTP/1.1 200 OK
...
{"openapi": "3.0.1" ... }</screen>
<simpara>Replace <link xlink:href="http://localhost:8080">http://localhost:8080</link> with the URL and port of the deployment.</simpara>
<simpara>The Accept header indicates that the JSON document is to be returned using the <literal>application/json</literal> string.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="requesting-openapi-document-http-param_default">
<title>Requesting an MicroProfile OpenAPI document using an HTTP parameter</title>
<simpara>Request an MicroProfile OpenAPI document, in the JSON format, from a deployment using a query parameter in an HTTP request.</simpara>
<simpara>By default, the OpenAPI endpoint returns a YAML document.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The deployment being queried is configured to return an MicroProfile OpenAPI document.</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Issue the following <literal>curl</literal> command to query the <literal>/openapi</literal> endpoint of the deployment:</simpara>
<screen>$ curl -v <emphasis>http://localhost:8080</emphasis>/openapi?format=JSON
&lt; HTTP/1.1 200 OK
...</screen>
<simpara>Replace <link xlink:href="http://localhost:8080">http://localhost:8080</link> with the URL and port of the deployment.</simpara>
<simpara>The HTTP parameter <literal>format=JSON</literal> indicates that JSON document is to be returned.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="configuring-eap-to-serve-a-static-open-api-document_default">
<title>Configuring JBoss EAP to serve a static OpenAPI document</title>
<simpara>Configure JBoss EAP to serve a static OpenAPI document that describes the REST services for the host.</simpara>
<simpara>When JBoss EAP is configured to serve a static OpenAPI document, the static OpenAPI document is processed before any Jakarta RESTful Web Services and MicroProfile OpenAPI annotations.</simpara>
<simpara>In a production environment, disable annotation processing when serving a static document. Disabling annotation processing ensures that an immutable and versioned API contract is available for clients.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a directory in the application source tree:</simpara>
<screen>$ mkdir <emphasis>APPLICATION_ROOT</emphasis>/src/main/webapp/META-INF</screen>
<simpara><emphasis>APPLICATION_ROOT</emphasis> is the directory containing the <literal>pom.xml</literal> configuration file for the application.</simpara>
</listitem>
<listitem>
<simpara>Query the OpenAPI endpoint, redirecting the output to a file:</simpara>
<screen>$ curl http://localhost:8080/openapi?format=JSON &gt; src/main/webapp/META-INF/openapi.json</screen>
<simpara>By default, the endpoint serves a YAML document, <literal>format=JSON</literal> specifies that a JSON document is returned.</simpara>
</listitem>
<listitem>
<simpara>Configure the application to skip annotation scanning when processing the OpenAPI document model:</simpara>
<screen>$ echo "mp.openapi.scan.disable=true" &gt; <emphasis>APPLICATION_ROOT</emphasis>/src/main/webapp/META-INF/microprofile-config.properties</screen>
</listitem>
<listitem>
<simpara>Rebuild the application:</simpara>
<screen>$ mvn clean install</screen>
</listitem>
<listitem>
<simpara>Deploy the application again using the following management CLI commands:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Undeploy the application:</simpara>
<screen>undeploy microprofile-openapi.war</screen>
</listitem>
<listitem>
<simpara>Deploy the application:</simpara>
<screen>deploy <emphasis>APPLICATION_ROOT</emphasis>/target/microprofile-openapi.war</screen>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara>JBoss EAP now serves a static OpenAPI document at the OpenAPI endpoint.</simpara>
</section>
<section xml:id="disabling-microprofile-api_default">
<title>Disabling microprofile-openapi-smallrye</title>
<simpara>You can disable the <literal>microprofile-openapi-smallrye</literal> subsystem in JBoss EAP XP using the management CLI.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Disable the <literal>microprofile-openapi-smallrye</literal> subsystem:</simpara>
<screen>/subsystem=microprofile-openapi-smallrye:remove()</screen>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="standalone_server_configuration" remap="_standalone_server_configuration">
<title>Standalone server configuration</title>
<section xml:id="standalone-server-configuration_default">
<title>Standalone server configuration files</title>
<simpara>The JBoss EAP XP includes additional standalone server configuration files, <literal>standalone-microprofile.xml</literal> and <literal>standalone-microprofile-ha.xml</literal>.</simpara>
<simpara>Standard configuration files that are included with JBoss EAP remain unchanged. Note that JBoss EAP XP 3.0.0 does not support the use of <literal>domain.xml</literal> files or domain mode.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Standalone configuration files available in JBoss EAP XP</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Configuration File</entry>
<entry align="left" valign="top">Purpose</entry>
<entry align="left" valign="top">Included capabilities</entry>
<entry align="left" valign="top">Excluded capabilities</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>standalone.xml</literal></simpara></entry>
<entry align="left" valign="top"><simpara>This is the default configuration that is used when you start your standalone server.</simpara></entry>
<entry align="left" valign="top"><simpara>Includes information about the server, including subsystems, networking, deployments, socket bindings, and other configurable details.</simpara></entry>
<entry align="left" valign="top"><simpara>Excludes subsystems necessary for messaging or high availability.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>standalone-microprofile.xml</literal></simpara></entry>
<entry align="left" valign="top"><simpara>This configuration file supports applications that use Eclipse MicroProfile.</simpara></entry>
<entry align="left" valign="top"><simpara>Includes information about the server, including subsystems, networking, deployments, socket bindings, and other configurable details.</simpara></entry>
<entry align="left" valign="top"><simpara>Excludes the following capabilities:</simpara>
<itemizedlist>
<listitem>
<simpara>Jakarta Enterprise Beans</simpara>
</listitem>
<listitem>
<simpara>Messaging</simpara>
</listitem>
<listitem>
<simpara>Java Batch</simpara>
</listitem>
<listitem>
<simpara>JavaServer Faces</simpara>
</listitem>
<listitem>
<simpara>Jakarta Enterprise Beans timers</simpara>
</listitem>
</itemizedlist></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>standalone-ha.xml</literal></simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Includes default subsystems and adds the <literal>modcluster</literal> and <literal>jgroups</literal> subsystems for high availability.</simpara></entry>
<entry align="left" valign="top"><simpara>Excludes subsystems necessary for messaging.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>standalone-microprofile-ha.xml</literal></simpara></entry>
<entry align="left" valign="top"><simpara>This standalone file supports applications that use Eclipse MicroProfile.</simpara></entry>
<entry align="left" valign="top"><simpara>Includes the <literal>modcluster</literal> and <literal>jgroups</literal> subsystems for high availability in addition to default subsystems.</simpara></entry>
<entry align="left" valign="top"><simpara>Excludes subsystems necessary for messaging.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>standalone-full.xml</literal></simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"><simpara>Includes the <literal>messaging-activemq</literal> and <literal>iiop-openjdk</literal> subsystems in addition to default subsystems.</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>standalone-full-ha.xml</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Support for every possible subsystem.</simpara></entry>
<entry align="left" valign="top"><simpara>Includes subsystems for messaging and high availability in addition to default subsystems.</simpara></entry>
<entry align="left" valign="top"/>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>standalone-load-balancer.xml</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Support for the minimum subsystems necessary to use the built-in mod_cluster front-end load balancer to load balance other JBoss EAP instances.</simpara></entry>
<entry align="left" valign="top"/>
<entry align="left" valign="top"/>
</row>
</tbody>
</tgroup>
</table>
<simpara>By default, starting JBoss EAP as a standalone server uses the <literal>standalone.xml</literal> file.  To start JBoss EAP with a standalone Eclipse MicroProfile configuration, use the <literal>-c</literal> argument.  For example,</simpara>
<screen>$ <emphasis>EAP_HOME</emphasis>/bin/standalone.sh -c=standalone-microprofile.xml</screen>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/configuration_guide/#starting_and_stopping_jboss_eap">Starting and Stopping JBoss EAP</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/configuration_guide/#configuration_data">Configuration Data</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="updating-standalone-server-configuration_default">
<title>Updating standalone configurations with Eclipse MicroProfile subsystems and extensions</title>
<simpara>You can update standard standalone server configuration files with Eclipse MicroProfile subsystems and extensions using the <literal>docs/examples/enable-microprofile.cli</literal> script. The <literal>enable-microprofile.cli</literal> script is intended as an example script for updating standard standalone server configuration files, not custom configurations.</simpara>
<simpara>The <literal>enable-microprofile.cli</literal> script modifies the existing standalone server configuration and adds the following Eclipse MicroProfile subsystems and extensions if they do not exist in the standalone configuration file:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>microprofile-openapi-smallrye</literal></simpara>
</listitem>
<listitem>
<simpara><literal>microprofile-jwt-smallrye</literal></simpara>
</listitem>
<listitem>
<simpara><literal>microprofile-fault-tolerance-smallrye</literal></simpara>
</listitem>
</itemizedlist>
<simpara>The <literal>enable-microprofile.cli</literal> script outputs a high-level description of the modifications. The configuration is secured using the <literal>elytron</literal> subsystem. The <literal>security</literal> subsystem, if present, is removed from the configuration.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>JBoss EAP XP is installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Run the following CLI script to update the default <literal>standalone.xml</literal> server configuration file:</simpara>
<screen>$ <emphasis>EAP_HOME</emphasis>/bin/jboss-cli.sh --file=docs/examples/enable-microprofile.cli</screen>
</listitem>
<listitem>
<simpara>Select a standalone server configuration other than the default <literal>standalone.xml</literal> server configuration file using the following command:</simpara>
<screen>$ <emphasis>EAP_HOME</emphasis>/bin/jboss-cli.sh --file=docs/examples/enable-microprofile.cli -Dconfig=&lt;standalone-full.xml|standalone-ha.xml|standalone-full-ha.xml&gt;</screen>
</listitem>
<listitem>
<simpara>The specified configuration file now includes Eclipse MicroProfile subsystems and extensions.</simpara>
</listitem>
</orderedlist>
</section>
</section>
</chapter>
<chapter xml:id="develop_microprofile_applications_for_jboss_eap" remap="_develop_microprofile_applications_for_jboss_eap">
<title>Develop MicroProfile Applications for JBoss EAP</title>
<section xml:id="maven_and_the_jboss_eap_microprofile_maven_repository" remap="_maven_and_the_jboss_eap_microprofile_maven_repository">
<title>Maven and the JBoss EAP MicroProfile Maven repository</title>
<section xml:id="downloading-the-jboss-eap-maven-repository-patch-as-archive_default">
<title>Downloading the JBoss EAP MicroProfile Maven repository patch as an archive file</title>
<simpara>Whenever an MicroProfile Expansion Pack is released for JBoss EAP, a corresponding patch is provided for the JBoss EAP MicroProfile Maven repository.  This patch is provided as an incremental archive file that is extracted into the existing Red Hat JBoss Enterprise Application Platform 7.4.0.GA Maven repository. The incremental archive file does not overwrite or remove any existing files, so there is no rollback requirement.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have set up an account on the <link xlink:href="https://access.redhat.com">Red Hat Customer Portal.</link></simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Open a browser and log in to the <link xlink:href="https://access.redhat.com">Red Hat Customer Portal.</link></simpara>
</listitem>
<listitem>
<simpara>Select <emphasis role="strong">Downloads</emphasis> from the menu at the top of the page.</simpara>
</listitem>
<listitem>
<simpara>Find the <emphasis role="strong">Red Hat JBoss Enterprise Application Platform</emphasis> entry in the list and select it.</simpara>
</listitem>
<listitem>
<simpara>From the <emphasis role="strong">Product</emphasis> drop-down list, select <emphasis role="strong">JBoss EAP XP</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>From the <emphasis role="strong">Version</emphasis> drop-down list, select <emphasis role="strong">2.0.0</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Releases</emphasis> tab.</simpara>
</listitem>
<listitem>
<simpara>Find <emphasis role="strong">JBoss EAP XP 3.0.0 Incremental Maven Repository</emphasis> in the list, and then click <emphasis role="strong">Download</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Save the archive file to your local directory.</simpara>
</listitem>
</orderedlist>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara>To learn more about the JBoss EAP Maven repository, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/development_guide/#using_maven_with_eap">About the Maven Repository</link> in the JBoss EAP <emphasis>Development Guide</emphasis>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="applying-the-jboss-eap-maven-repository-patch-on-your-local-system_default">
<title>Applying the JBoss EAP MicroProfile Maven repository patch on your local system</title>
<simpara>You can install the JBoss EAP MicroProfile Maven repository patch on your local file system.</simpara>
<simpara>When you apply a patch in the form of an incremental archive file to the repository, new files are added to this repository. The incremental archive file does not overwrite or remove any existing files on the repository, so there is no rollback requirement.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/development_guide/#download_jboss_eap_maven_repository">downloaded and installed</link> the Red Hat JBoss Enterprise Application Platform 7.4.0.GA Maven repository on your local system.</simpara>
<itemizedlist>
<listitem>
<simpara>Check that you have this minor version of the Red Hat JBoss Enterprise Application Platform 7.4 Maven repository installed on your local system.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>You have downloaded the JBoss EAP XP 2.0.0 Incremental Maven repository on your local system.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Locate the path to your Red Hat JBoss Enterprise Application Platform 7.4.0.GA Maven repository. For example, <literal>/path/to/repo/jboss-eap-7.3.0.GA-maven-repository/maven-repository/</literal>.</simpara>
</listitem>
<listitem>
<simpara>Extract the downloaded JBoss EAP XP 2.0.0 Incremental Maven repository directly into the directory of the Red Hat JBoss Enterprise Application Platform 7.4.0.GA Maven repository. For example, open a terminal and issue the following command, replacing the value for your Red Hat JBoss Enterprise Application Platform 7.4.0.GA Maven repository path:</simpara>
<screen>$ unzip -o jboss-eap-xp-3.0.0-incremental-maven-repository.zip -d EAP_MAVEN_REPOSITORY_PATH</screen>
</listitem>
</orderedlist>
<note>
<simpara>The <emphasis>EAP_MAVEN_REPOSITORY_PATH</emphasis> points to the <literal>jboss-eap-7.3.0.GA-maven-repository</literal>. For example, this procedure demonstrated the use of the path <literal>/path/to/repo/jboss-eap-7.3.0.GA-maven-repository/</literal>.</simpara>
<simpara>After you extract the JBoss EAP XP Incremental Maven repository into the Red Hat JBoss Enterprise Application Platform 7.4.0.GA Maven repository, the repository name becomes JBoss EAP MicroProfile Maven repository.</simpara>
</note>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara>To determine the URL of the JBoss EAP Maven repository, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/development_guide/#determine_the_url_of_repository">Determining the URL for the JBoss EAP Maven repository</link> in the JBoss EAP <emphasis>Development Guide</emphasis>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="supported-jboss-eap-eclipse-microprofile-bom_default">
<title>Supported JBoss EAP MicroProfile BOM</title>
<simpara>JBoss EAP XP 3.0.0 includes the JBoss EAP MicroProfile BOM. This BOM is named <literal>jboss-eap-xp-microprofile</literal>, and its use case supports JBoss EAP MicroProfile APIs.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>JBoss EAP MicroProfile BOM</title>
<?dbhtml table-width="100%"?>
<?dbfo table-width="100%"?>
<?dblatex table-width="100%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="145*"/>
<colspec colname="col_2" colwidth="281*"/>
<thead>
<row>
<entry align="left" valign="top">BOM Artifact ID</entry>
<entry align="left" valign="top">Use Case</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>jboss-eap-xp-microprofile</simpara></entry>
<entry align="left" valign="top"><simpara>This BOM, whose <literal>groupId</literal> is <literal>org.jboss.bom</literal>, packages many JBoss EAP MicroProfile supported API dependencies, such as <literal>microprofile-openapi-api</literal> and <literal>microprofile-config-api</literal>.  If you use this BOM, you need not specify a version for a supported API dependency, because the <literal>jboss-eap-xp-microprofile</literal> BOM specifies this value for the dependency.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="using-the-eclipse-microprofile-maven-repository_default">
<title>Using the JBoss EAP MicroProfile Maven repository</title>
<simpara>You can access the <literal>jboss-eap-xp-microprofile</literal> BOM after you install the Red Hat JBoss Enterprise Application Platform 7.4.0.GA Maven repository and apply the JBoss EAP XP Incremental Maven repository to it. The repository name then becomes JBoss EAP MicroProfile Maven repository. The BOM is shipped inside the JBoss EAP XP Incremental Maven repository.</simpara>
<simpara>You must configure one of the following to use the JBoss EAP MicroProfile Maven repository:</simpara>
<itemizedlist>
<listitem>
<simpara>The Maven global or user settings</simpara>
</listitem>
<listitem>
<simpara>The project’s POM files</simpara>
</listitem>
</itemizedlist>
<simpara>Maven settings used with a repository manager or repository on a shared server provide better control and manageability of projects.</simpara>
<simpara>You can use an alternative mirror to redirect all lookup requests for a specific repository to your repository manager without changing the project files.</simpara>
<warning>
<simpara>Configuring  the JBoss EAP MicroProfile Maven repository by modifying the POM file overrides the global and user Maven settings for the configured project.</simpara>
</warning>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have installed the Red Hat JBoss Enterprise Application Platform 7.4 Maven repository on your local system, and you have applied the JBoss EAP XP Incremental Maven repository to it.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Choose a configuration method and configure the JBoss EAP MicroProfile Maven repository.</simpara>
</listitem>
<listitem>
<simpara>After you have configured the JBoss EAP MicroProfile Maven repository, add the <literal>jboss-eap-xp-microprofile</literal> BOM to the project POM file. The following example shows how to configure the BOM in the <literal>&lt;dependencyManagement&gt;</literal> section of the <literal>pom.xml</literal> file:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencyManagement&gt;
  &lt;dependencies&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;org.jboss.bom&lt;/groupId&gt;
      &lt;artifactId&gt;jboss-eap-xp-microprofile&lt;/artifactId&gt;
      &lt;version&gt;3.0.0.GA&lt;/version&gt;
      &lt;type&gt;pom&lt;/type&gt;
      &lt;scope&gt;import&lt;/scope&gt;
  &lt;/dependency&gt;
    ...
  &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</programlisting>
<note>
<simpara>If you do not specify a value for the <literal>type</literal> element in the <literal>pom.xml</literal> file, Maven specifies a <literal>jar</literal> value for the element.</simpara>
</note>
</listitem>
</orderedlist>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara>For more information about selecting methods to configure the JBoss EAP Maven repository, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/development_guide/#use_the_maven_repository">Use the Maven Repository</link> in the JBoss EAP <emphasis>Development Guide</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>For more information about managing dependencies, see <link xlink:href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#dependency-management">Dependency Management.</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="microprofile_config_development" remap="_microprofile_config_development">
<title>MicroProfile Config development</title>
<section xml:id="creating-maven-project_default">
<title>Creating a Maven project for MicroProfile Config</title>
<simpara>Create a Maven project with the required dependencies and the directory structure for creating an MicroProfile Config application.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Maven is installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Set up the Maven project.</simpara>
<screen>$ mvn archetype:generate \
    -DgroupId=com.example \
    -DartifactId=microprofile-config \
    -DinteractiveMode=false \
    -DarchetypeGroupId=org.apache.maven.archetypes \
    -DarchetypeArtifactId=maven-archetype-webapp
cd microprofile-config</screen>
<simpara>This creates the directory structure for the project and <literal>pom.xml</literal> configuration file.</simpara>
</listitem>
<listitem>
<simpara>To let the POM file automatically manage the versions for the MicroProfile Config artifact and the MicroProfile REST Client artifact in the <literal>jboss-eap-xp-microprofile</literal> BOM, import the BOM to the <literal>&lt;dependencyManagement&gt;</literal> section of the project POM file.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencyManagement&gt;
  &lt;dependencies&gt;
    &lt;!-- importing the microprofile BOM adds MicroProfile specs --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.jboss.bom&lt;/groupId&gt;
        &lt;artifactId&gt;jboss-eap-xp-microprofile&lt;/artifactId&gt;
        &lt;version&gt;3.0.0.GA&lt;/version&gt;
        &lt;type&gt;pom&lt;/type&gt;
        &lt;scope&gt;import&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</programlisting>
</listitem>
<listitem>
<simpara>Add the MicroProfile Config artifact and the MicroProfile REST Client artifact and other dependencies, managed by the BOM, to the <literal>&lt;dependency&gt;</literal> section of the project POM file. The following example demonstrates adding the MicroProfile Config and the MicroProfile REST Client dependencies to the file:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- Add the MicroProfile REST Client API. Set <literal>provided</literal> for the <literal>&lt;scope&gt;</literal> tag, as the API is included in the server. --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.eclipse.microprofile.rest.client&lt;/groupId&gt;
  &lt;artifactId&gt;microprofile-rest-client-api&lt;/artifactId&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;!-- Add the MicroProfile Config API. Set <literal>provided</literal> for the <literal>&lt;scope&gt;</literal> tag, as the API is included in the server. --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.eclipse.microprofile.config&lt;/groupId&gt;
  &lt;artifactId&gt;microprofile-config-api&lt;/artifactId&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;!-- Add the {JAX-RS} API. Set <literal>provided</literal> for the <literal>&lt;scope&gt;</literal> tag, as the API is included in the server. --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.jboss.spec.javax.ws.rs&lt;/groupId&gt;
  &lt;artifactId&gt;jboss-jaxrs-api_2.1_spec&lt;/artifactId&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;!-- Add the CDI API. Set <literal>provided</literal> for the <literal>&lt;scope&gt;</literal> tag, as the API is included in the server. --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;jakarta.enterprise&lt;/groupId&gt;
  &lt;artifactId&gt;jakarta.enterprise.cdi-api&lt;/artifactId&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="using-microprofile-config-property_default">
<title>Using MicroProfile Config property in an application</title>
<simpara>Create an application that uses a configured <literal>ConfigSource</literal>.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>MicroProfile Config is enabled in JBoss EAP.</simpara>
</listitem>
<listitem>
<simpara>The latest POM is installed.</simpara>
</listitem>
<listitem>
<simpara>The Maven project is configured for creating an MicroProfile Config application.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create the directory to store class files:</simpara>
<screen>$ mkdir -p <emphasis>APPLICATION_ROOT</emphasis>/src/main/java/com/example/microprofile/config/</screen>
<simpara>Where <literal><emphasis>APPLICATION_ROOT</emphasis></literal> is the directory containing the <literal>pom.xml</literal> configuration file for the application.</simpara>
</listitem>
<listitem>
<simpara>Navigate to the new directory:</simpara>
<screen>$ cd <emphasis>APPLICATION_ROOT</emphasis>/src/main/java/com/example/microprofile/config/</screen>
<simpara>Create all class files described in this procedure in this directory.</simpara>
</listitem>
<listitem>
<simpara>Create a class file named <literal>HelloApplication.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.microprofile.config;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("/")
public class HelloApplication extends Application {

}</programlisting>
<simpara>This class defines the application as a Jakarta RESTful Web Services application.</simpara>
</listitem>
<listitem>
<simpara>Create a class file named <literal>HelloService.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.microprofile.config;

public class HelloService {
	String createHelloMessage(String name){
        return "Hello " + name;
    }
}</programlisting>
</listitem>
<listitem>
<simpara>Create a class file named <literal>HelloWorld.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.microprofile.config;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/config")
public class HelloWorld {

    @Inject
    @ConfigProperty(name="name", defaultValue="jim") <co xml:id="CO1-1"/>
    String name;

   	@Inject
   	HelloService helloService;

   	@GET
   	@Path("/json")
   	@Produces({ "application/json" })
   	public String getHelloWorldJSON() {
        String message = helloService.createHelloMessage(name);
       	return "{\"result\":\"" + message + "\"}";
	}
}</programlisting>
<calloutlist>
<callout arearefs="CO1-1">
<para>A MicroProfile Config property is injected into the class with the annotation <literal>@ConfigProperty(name="name", defaultValue="jim")</literal>. If no <literal>ConfigSource</literal> is configured, the value <literal>jim</literal> is returned.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Create an  empty file named <literal>beans.xml</literal> in the <literal>src/main/webapp/WEB-INF/</literal> directory:</simpara>
<screen>$ touch <emphasis>APPLICATION_ROOT</emphasis>/src/main/webapp/WEB-INF/beans.xml</screen>
<simpara>Where <literal><emphasis>APPLICATION_ROOT</emphasis></literal> is the directory containing the <literal>pom.xml</literal> configuration file for the application.</simpara>
</listitem>
<listitem>
<simpara>Navigate to the root directory of the application:</simpara>
<screen>$ cd <emphasis>APPLICATION_ROOT</emphasis></screen>
<simpara>Where <literal><emphasis>APPLICATION_ROOT</emphasis></literal> is the directory containing the <literal>pom.xml</literal> configuration file for the application.</simpara>
</listitem>
<listitem>
<simpara>Build the project:</simpara>
<screen>$ mvn clean install wildfly:deploy</screen>
</listitem>
<listitem>
<simpara>Test the output:</simpara>
<screen>$ curl http://localhost:8080/microprofile-config/config/json</screen>
<simpara>The following is the expected output:</simpara>
<screen>{"result":"Hello jim"}</screen>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="microprofile-fault-tolerance-application-development_ft">
<title>MicroProfile Fault Tolerance application development</title>
<section xml:id="adding-the-microprofile-fault-tolerance-extension_ft">
<title>Adding the MicroProfile Fault Tolerance extension</title>
<simpara>The MicroProfile Fault Tolerance extension is included in <literal>standalone-microprofile.xml</literal> and <literal>standalone-microprofile-ha.xml</literal> configurations that are provided as part of JBoss EAP XP.</simpara>
<simpara>The extension is not included in the standard <literal>standalone.xml</literal> configuration. To use the extension, you must manually enable it.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>EAP XP pack is installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the MicroProfile Fault Tolerance extension using the following management CLI command:</simpara>
<screen>/extension=org.wildfly.extension.microprofile.fault-tolerance-smallrye:add</screen>
</listitem>
<listitem>
<simpara>Enable the <literal>microprofile-fault-tolerance-smallrye</literal> subsystem using the following managenent command:</simpara>
<screen>/subsystem=microprofile-fault-tolerance-smallrye:add</screen>
</listitem>
<listitem>
<simpara>Reload the server with the following management command:</simpara>
<screen>reload</screen>
</listitem>
</orderedlist>
</section>
<section xml:id="configuring-maven-project-for-fault-tolerance_ft">
<title>Configuring Maven project for MicroProfile Fault Tolerance</title>
<simpara>Create a Maven project with the required dependencies and the directory structure for creating an MicroProfile Fault Tolerance application.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Maven is installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Set up the Maven project:</simpara>
<programlisting language="xml" linenumbering="unnumbered">mvn archetype:generate \
    -DgroupId=com.example.microprofile.faulttolerance \
    -DartifactId=microprofile-fault-tolerance \
    -DarchetypeGroupId=org.apache.maven.archetypes \
    -DarchetypeArtifactId=maven-archetype-webapp \
    -DinteractiveMode=false
cd microprofile-fault-tolerance</programlisting>
<simpara>The command creates the directory structure for the project and the <literal>pom.xml</literal> configuration file.</simpara>
</listitem>
<listitem>
<simpara>To let the POM file automatically manage the versions for the MicroProfile Fault Tolerance artifact in the <literal>jboss-eap-xp-microprofile</literal> BOM, import the BOM to the <literal>&lt;dependencyManagement&gt;</literal> section of the project POM file.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencyManagement&gt;
  &lt;dependencies&gt;
    &lt;!-- importing the microprofile BOM adds MicroProfile specs --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.jboss.bom&lt;/groupId&gt;
        &lt;artifactId&gt;jboss-eap-xp-microprofile&lt;/artifactId&gt;
        &lt;version&gt;${version.microprofile.bom}&lt;/version&gt;
        &lt;type&gt;pom&lt;/type&gt;
        &lt;scope&gt;import&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</programlisting>
<simpara>Replace ${version.microprofile.bom} with the installed version of BOM.</simpara>
</listitem>
<listitem>
<simpara>Add the MicroProfile Fault Tolerance artifact, managed by the BOM, to the <literal>&lt;dependency&gt;</literal> section of the project POM file. The following example demonstrates adding the MicroProfile Fault Tolerance dependency to the file:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- Add the MicroProfile Fault Tolerance API. Set <literal>provided</literal> for the <literal>&lt;scope&gt;</literal> tag, as the API is included in the server. --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.eclipse.microprofile.fault.tolerance&lt;/groupId&gt;
  &lt;artifactId&gt;microprofile-fault-tolerance-api&lt;/artifactId&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="creating-an-application-with-ft_ft">
<title>Creating a fault tolerant application</title>
<simpara>Create a fault-tolerant application that implements retry, timeout, and fallback patterns for fault tolerance.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Maven dependencies have been configured.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create the directory to store class files:</simpara>
<screen>$ mkdir -p <emphasis>APPLICATION_ROOT</emphasis>/src/main/java/com/example/microprofile/faulttolerance</screen>
<simpara><emphasis>APPLICATION_ROOT</emphasis> is the directory containing the <literal>pom.xml</literal> configuration file for the application.</simpara>
</listitem>
<listitem>
<simpara>Navigate to the new directory:</simpara>
<screen>$ cd <emphasis>APPLICATION_ROOT</emphasis>/src/main/java/com/example/microprofile/faulttolerance</screen>
<simpara>For the following steps, create all class files in the new directory.</simpara>
</listitem>
<listitem>
<simpara>Create a simple entity representing a coffee sample as <literal>Coffee.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.microprofile.faulttolerance;

public class Coffee {

    public Integer id;
    public String name;
    public String countryOfOrigin;
    public Integer price;

    public Coffee() {
    }

    public Coffee(Integer id, String name, String countryOfOrigin, Integer price) {
        this.id = id;
        this.name = name;
        this.countryOfOrigin = countryOfOrigin;
        this.price = price;
    }
}</programlisting>
</listitem>
<listitem>
<simpara>Create a class file <literal>CoffeeApplication.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.microprofile.faulttolerance;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("/")
public class CoffeeApplication extends Application {
}</programlisting>
</listitem>
<listitem>
<simpara>Create a Jakarta Contexts and Dependency Injection Bean as <literal>CoffeeRepositoryService.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.microprofile.faulttolerance;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class CoffeeRepositoryService {

    private Map&lt;Integer, Coffee&gt; coffeeList = new HashMap&lt;&gt;();

    public CoffeeRepositoryService() {
        coffeeList.put(1, new Coffee(1, "Fernandez Espresso", "Colombia", 23));
        coffeeList.put(2, new Coffee(2, "La Scala Whole Beans", "Bolivia", 18));
        coffeeList.put(3, new Coffee(3, "Dak Lak Filter", "Vietnam", 25));
    }

    public List&lt;Coffee&gt; getAllCoffees() {
        return new ArrayList&lt;&gt;(coffeeList.values());
    }

    public Coffee getCoffeeById(Integer id) {
        return coffeeList.get(id);
    }

    public List&lt;Coffee&gt; getRecommendations(Integer id) {
        if (id == null) {
            return Collections.emptyList();
        }
        return coffeeList.values().stream()
                .filter(coffee -&gt; !id.equals(coffee.id))
                .limit(2)
                .collect(Collectors.toList());
    }
}</programlisting>
</listitem>
<listitem>
<simpara>Create a class file <literal>CoffeeResource.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.microprofile.faulttolerance;

import java.util.List;
import java.util.Random;
import java.util.concurrent.atomic.AtomicLong;
import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import java.util.Collections;
import javax.ws.rs.PathParam;
import org.eclipse.microprofile.faulttolerance.Fallback;
import org.eclipse.microprofile.faulttolerance.Timeout;
import org.eclipse.microprofile.faulttolerance.Retry;

@Path("/coffee")
@Produces(MediaType.APPLICATION_JSON)
public class CoffeeResource {

    @Inject
    private CoffeeRepositoryService coffeeRepository;

    private AtomicLong counter = new AtomicLong(0);

    @GET
    @Retry(maxRetries = 4) <co xml:id="CO2-1"/>
    public List&lt;Coffee&gt; coffees() {
        final Long invocationNumber = counter.getAndIncrement();
        return coffeeRepository.getAllCoffees();
    }


    @GET
    @Path("/{id}/recommendations")
    @Timeout(250) <co xml:id="CO2-2"/>
    public List&lt;Coffee&gt; recommendations(@PathParam("id") int id) {
            return coffeeRepository.getRecommendations(id);
        }

    @GET
    @Path("fallback/{id}/recommendations")
    @Fallback(fallbackMethod = "fallbackRecommendations") <co xml:id="CO2-3"/>
    public List&lt;Coffee&gt; recommendations2(@PathParam("id") int id) {
        return coffeeRepository.getRecommendations(id);
        }

    public List&lt;Coffee&gt; fallbackRecommendations(int id) {
        //always return a default coffee
        return Collections.singletonList(coffeeRepository.getCoffeeById(1));
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO2-1">
<para>Define number of re-tries to <literal>4</literal>.</para>
</callout>
<callout arearefs="CO2-2">
<para>Define the timeout interval in milliseconds.</para>
</callout>
<callout arearefs="CO2-3">
<para>Define a fallback method to call when invocation fails.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Navigate to the root directory of the application:</simpara>
<screen>$ cd <emphasis>APPLICATION_ROOT</emphasis></screen>
</listitem>
<listitem>
<simpara>Build the application using the following Maven command:</simpara>
<screen>$ mvn clean install wildfly:deploy</screen>
<simpara>Access the application at <literal><link xlink:href="http://localhost:8080/microprofile-fault-tolerance/coffee">http://localhost:8080/microprofile-fault-tolerance/coffee</link></literal>.</simpara>
</listitem>
</orderedlist>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara>For a detailed example of fault tolerant application, which includes artificial failures to test the fault tolerance of the application, see the <literal>microprofile-fault-tolerance</literal> quickstart.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="microprofile_health_development" remap="_microprofile_health_development">
<title>MicroProfile Health development</title>
<section xml:id="custom-health-check-example_default">
<title>Custom health check example</title>
<simpara>The default implementation provided by the <literal>microprofile-health-smallrye</literal> subsystem performs a basic health check. For more detailed information, on either the server or application status, custom health checks may be included. Any Jakarta Contexts and Dependency Injection beans that include the <literal>org.eclipse.microprofile.health.Liveness</literal> annotation or the  <literal>org.eclipse.microprofile.health.Readiness</literal> annotation at the class level are automatically discovered and invoked at runtime.</simpara>
<simpara>The following example demonstrates how to create a new implementation of a health check that returns an <literal>UP</literal> state.</simpara>
<programlisting language="java" linenumbering="unnumbered">import org.eclipse.microprofile.health.HealthCheck;
import org.eclipse.microprofile.health.HealthCheckResponse;
import org.eclipse.microprofile.health.Liveness;

import javax.enterprise.context.ApplicationScoped;

@Liveness
@ApplicationScoped
public class HealthTest implements HealthCheck {

    @Override
    public HealthCheckResponse call() {
        return HealthCheckResponse.named("health-test").up().build();
    }
}</programlisting>
<simpara>Once deployed, any subsequent health check queries include the custom checks, as demostrated in the following example.</simpara>
<screen>/subsystem=microprofile-health-smallrye:check
{
    "outcome" =&gt; "success",
    "result" =&gt; {
        "outcome" =&gt; "UP",
        "checks" =&gt; [{
            "name" =&gt; "health-test",
            "state" =&gt; "UP"
        }]
    }
}</screen>
<note>
<simpara>You can use the following for liveness and readiness checks:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>/subsystem=microprofile-health-smallrye:check-live</literal></simpara>
</listitem>
<listitem>
<simpara><literal>/subsystem=microprofile-health-smallrye:check-ready</literal></simpara>
</listitem>
</itemizedlist>
</note>
</section>
<section xml:id="the-at-liveness-annotation-example_default">
<title>The @Liveness annotation example</title>
<simpara>The following is an example of using the <literal>@Liveness</literal> annotation in an application.</simpara>
<programlisting language="java" linenumbering="unnumbered">@Liveness
@ApplicationScoped
public class DataHealthCheck implements HealthCheck {

    @Override
    public HealthCheckResponse call() {
        return HealthCheckResponse.named("Health check with data")
            .up()
            .withData("foo", "fooValue")
            .withData("bar", "barValue")
            .build();
    }
}</programlisting>
</section>
<section xml:id="the-at-readiness-annotation-example_default">
<title>The @Readiness annotation example</title>
<simpara>The following example demonstrates checking connection to a database. If the database is down, the readiness check reports error.</simpara>
<programlisting language="java" linenumbering="unnumbered">@Readiness
@ApplicationScoped
public class DatabaseConnectionHealthCheck implements HealthCheck {

    @Inject
    @ConfigProperty(name = "database.up", defaultValue = "false")
    private boolean databaseUp;

    @Override
    public HealthCheckResponse call() {

        HealthCheckResponseBuilder responseBuilder = HealthCheckResponse.named("Database connection health check");

        try {
            simulateDatabaseConnectionVerification();
            responseBuilder.up();
        } catch (IllegalStateException e) {
            // cannot access the database
            responseBuilder.down()
                .withData("error", e.getMessage()); // pass the exception message
        }

        return responseBuilder.build();
    }

    private void simulateDatabaseConnectionVerification() {
        if (!databaseUp) {
            throw new IllegalStateException("Cannot contact database");
        }
    }
}</programlisting>
</section>
</section>
<section xml:id="microprofile-jwt-application-development_jwt">
<title>MicroProfile JWT application development</title>
<section xml:id="enabling-microprofile-jwt-smallrye-subsystem_jwt">
<title>Enabling <literal>microprofile-jwt-smallrye</literal> subsystem</title>
<simpara>The MicroProfile JWT integration is provided by the <literal>microprofile-jwt-smallrye</literal> subsystem and is included in the default configuration. If the subsystem is not present in the default configuration, you can add it as follows.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>EAP XP is installed.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Enable the MicroProfile JWT smallrye extension in JBoss EAP:</simpara>
<screen>/extension=org.wildfly.extension.microprofile.jwt-smallrye:add</screen>
</listitem>
<listitem>
<simpara>Enable the <literal>microprofile-jwt-smallrye</literal> subsystem:</simpara>
<screen>/subsystem=microprofile-jwt-smallrye:add</screen>
</listitem>
<listitem>
<simpara>Reload the server:</simpara>
<screen>reload</screen>
</listitem>
</orderedlist>
<simpara>The <literal>microprofile-jwt-smallrye</literal> subsystem is enabled.</simpara>
</section>
<section xml:id="configuring-maven-project-jwt_jwt">
<title>Configuring Maven project for developing JWT applications</title>
<simpara>Create a Maven project with the required dependencies and the directory structure for developing a JWT application.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Maven is installed.</simpara>
</listitem>
<listitem>
<simpara><literal>microprofile-jwt-smallrye</literal> subsystem is enabled.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Set up the maven project:</simpara>
<screen>$ mvn archetype:generate -DinteractiveMode=false \
    -DarchetypeGroupId=org.apache.maven.archetypes \
    -DarchetypeArtifactId=maven-archetype-webapp \
    -DgroupId=com.example -DartifactId=microprofile-jwt \
    -Dversion=1.0.0.Alpha1-SNAPSHOT
  cd microprofile-jwt</screen>
<simpara>The command creates the directory structure for the project and the <literal>pom.xml</literal> configuration file.</simpara>
</listitem>
<listitem>
<simpara>To let the POM file automatically manage the versions for the MicroProfile JWT artifact in the <literal>jboss-eap-xp-microprofile</literal> BOM, import the BOM to the <literal>&lt;dependencyManagement&gt;</literal> section of the project POM file.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencyManagement&gt;
  &lt;dependencies&gt;
    &lt;!-- importing the microprofile BOM adds MicroProfile specs --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.jboss.bom&lt;/groupId&gt;
        &lt;artifactId&gt;jboss-eap-xp-microprofile&lt;/artifactId&gt;
        &lt;version&gt;${version.microprofile.bom}&lt;/version&gt;
        &lt;type&gt;pom&lt;/type&gt;
        &lt;scope&gt;import&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</programlisting>
<simpara>Replace ${version.microprofile.bom} with the installed version of BOM.</simpara>
</listitem>
<listitem>
<simpara>Add the MicroProfile JWT artifact, managed by the BOM, to the <literal>&lt;dependency&gt;</literal> section of the project POM file. The following example demonstrates adding the MicroProfile JWT dependency to the file:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- Add the MicroProfile JWT API. Set <literal>provided</literal> for the <literal>&lt;scope&gt;</literal> tag, as the API is included in the server. --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.eclipse.microprofile.jwt&lt;/groupId&gt;
  &lt;artifactId&gt;microprofile-jwt-auth-api&lt;/artifactId&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="creating-application-with-jwt-rbac_jwt">
<title>Creating an application with MicroProfile JWT</title>
<simpara>Create an application that authenticates requests based on JWT tokens and implements authorization based on the identity of the token bearer.</simpara>
<note>
<simpara>The following procedure provides example code for generating tokens. For a production environment, use an identity provider such as Red Hat single sign-on (SSO).</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Maven project is configured with the correct dependencies.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a token generator.</simpara>
<simpara>This step serves as a reference. For a production environment, use an identity provider such as Red Hat SSO.</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Create a directory <literal>src/test/java</literal> for token the generator utility and navigate to it:</simpara>
<screen>$ mkdir -p src/test/java
$ cd src/test/java</screen>
</listitem>
<listitem>
<simpara>Create a class file <literal>TokenUtil.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package  com.example.mpjwt;

import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;
import java.util.UUID;

import javax.json.Json;
import javax.json.JsonArrayBuilder;
import javax.json.JsonObjectBuilder;

import com.nimbusds.jose.JOSEObjectType;
import com.nimbusds.jose.JWSAlgorithm;
import com.nimbusds.jose.JWSHeader;
import com.nimbusds.jose.JWSObject;
import com.nimbusds.jose.JWSSigner;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.crypto.RSASSASigner;

public class TokenUtil {

    private static PrivateKey loadPrivateKey(final String fileName) throws Exception {
        try (InputStream is = new FileInputStream(fileName)) {
            byte[] contents = new byte[4096];
            int length = is.read(contents);
            String rawKey = new String(contents, 0, length, StandardCharsets.UTF_8)
                    .replaceAll("-----BEGIN (.*)-----", "")
                    .replaceAll("-----END (.*)----", "")
                    .replaceAll("\r\n", "").replaceAll("\n", "").trim();

            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(rawKey));
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");

            return keyFactory.generatePrivate(keySpec);
        }
    }

    public static String generateJWT(final String principal, final String birthdate, final String...groups) throws Exception {
    	PrivateKey privateKey = loadPrivateKey("private.pem");

        JWSSigner signer = new RSASSASigner(privateKey);
        JsonArrayBuilder groupsBuilder = Json.createArrayBuilder();
        for (String group : groups) { groupsBuilder.add(group); }

        long currentTime = System.currentTimeMillis() / 1000;
        JsonObjectBuilder claimsBuilder = Json.createObjectBuilder()
                .add("sub", principal)
                .add("upn", principal)
                .add("iss", "quickstart-jwt-issuer")
                .add("aud", "jwt-audience")
                .add("groups", groupsBuilder.build())
                .add("birthdate", birthdate)
                .add("jti", UUID.randomUUID().toString())
                .add("iat", currentTime)
                .add("exp", currentTime + 14400);

        JWSObject jwsObject = new JWSObject(new JWSHeader.Builder(JWSAlgorithm.RS256)
                .type(new JOSEObjectType("jwt"))
                .keyID("Test Key").build(),
                new Payload(claimsBuilder.build().toString()));

        jwsObject.sign(signer);

        return jwsObject.serialize();
    }

    public static void main(String[] args) throws Exception {
        if (args.length &lt; 2) throw new IllegalArgumentException("Usage TokenUtil {principal} {birthdate} {groups}");
        String principal = args[0];
        String birthdate = args[1];
        String[] groups = new String[args.length - 2];
        System.arraycopy(args, 2, groups, 0, groups.length);

        String token = generateJWT(principal, birthdate, groups);
        String[] parts = token.split("\\.");
        System.out.println(String.format("\nJWT Header - %s", new String(Base64.getDecoder().decode(parts[0]), StandardCharsets.UTF_8)));
        System.out.println(String.format("\nJWT Claims - %s", new String(Base64.getDecoder().decode(parts[1]), StandardCharsets.UTF_8)));
        System.out.println(String.format("\nGenerated JWT Token \n%s\n", token));
    }
}</programlisting>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Create the <literal>web.xml</literal> file in the <literal>src/main/webapp/WEB-INF</literal> directory with the following content:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;context-param&gt;
    &lt;param-name&gt;resteasy.role.based.security&lt;/param-name&gt;
    &lt;param-value&gt;true&lt;/param-value&gt;
&lt;/context-param&gt;

&lt;security-role&gt;
    &lt;role-name&gt;Subscriber&lt;/role-name&gt;
&lt;/security-role&gt;</programlisting>
</listitem>
<listitem>
<simpara>Create a class file <literal>SampleEndPoint.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.mpjwt;

import javax.ws.rs.GET;
import javax.ws.rs.Path;

import java.security.Principal;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.SecurityContext;

import javax.annotation.security.RolesAllowed;
import javax.inject.Inject;

import java.time.LocalDate;
import java.time.Period;
import java.util.Optional;

import org.eclipse.microprofile.jwt.Claims;
import org.eclipse.microprofile.jwt.Claim;

import org.eclipse.microprofile.jwt.JsonWebToken;

@Path("/Sample")
public class SampleEndPoint {

    @GET
    @Path("/helloworld")
    public String helloworld(@Context SecurityContext securityContext) {
        Principal principal = securityContext.getUserPrincipal();
        String caller = principal == null ? "anonymous" : principal.getName();

        return "Hello " + caller;
    }

    @Inject
	JsonWebToken jwt;

	@GET()
	@Path("/subscription")
	@RolesAllowed({"Subscriber"})
	public String helloRolesAllowed(@Context SecurityContext ctx) {
    	Principal caller =  ctx.getUserPrincipal();
    	String name = caller == null ? "anonymous" : caller.getName();
    	boolean hasJWT = jwt.getClaimNames() != null;
    	String helloReply = String.format("hello + %s, hasJWT: %s", name, hasJWT);

    	return helloReply;
	}

	@Inject
	@Claim(standard = Claims.birthdate)
	Optional&lt;String&gt; birthdate;

	@GET()
	@Path("/birthday")
	@RolesAllowed({ "Subscriber" })
	public String birthday() {
    	if (birthdate.isPresent()) {
        	LocalDate birthdate = LocalDate.parse(this.birthdate.get().toString());
        	LocalDate today = LocalDate.now();
        	LocalDate next = birthdate.withYear(today.getYear());
        	if (today.equals(next)) {
            	return "Happy Birthday";
        }
        if (next.isBefore(today)) {
            next = next.withYear(next.getYear() + 1);
        }

        Period wait = today.until(next);

        return String.format("%d months and %d days until your next birthday.", wait.getMonths(), wait.getDays());
    }

    return "Sorry, we don't know your birthdate.";

	}

}</programlisting>
<simpara>The methods annotated with <literal>@Path</literal> are the Jakarta RESTful Web Services endpoints.</simpara>
<simpara>The annotation <literal>@Claim</literal> defines a JWT claim.</simpara>
</listitem>
<listitem>
<simpara>Create a class file <literal>App.java</literal> to enable Jakarta RESTful Web Services:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.mpjwt;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

import org.eclipse.microprofile.auth.LoginConfig;

@ApplicationPath("/rest")
@LoginConfig(authMethod="MP-JWT", realmName="MP JWT Realm")
public class App extends Application {}</programlisting>
<simpara>The annotation <literal>@LoginConfig(authMethod="MP-JWT", realmName="MP JWT Realm")</literal> enables JWT RBAC during deployment.</simpara>
</listitem>
<listitem>
<simpara>Compile the application with the following Maven command:</simpara>
<screen>$ mvn package</screen>
</listitem>
<listitem>
<simpara>Generate JWT token using the token generator utility:</simpara>
<screen>$ mvn exec:java -Dexec.mainClass=org.wildfly.quickstarts.mpjwt.TokenUtil -Dexec.classpathScope=test -Dexec.args="testUser 2017-09-15 Echoer Subscriber"</screen>
</listitem>
<listitem>
<simpara>Build and deploy the application using the following Maven command:</simpara>
<screen>$ mvn package wildfly:deploy</screen>
</listitem>
<listitem>
<simpara>Test the application.</simpara>
<itemizedlist>
<listitem>
<simpara>Call the <literal>Sample/subscription</literal> endpoint using the bearer token:</simpara>
<screen>$ curl -H "Authorization: Bearer ey..rg" http://localhost:8080/microprofile-jwt/rest/Sample/subscription</screen>
</listitem>
<listitem>
<simpara>Call the <literal>Sample/birthday</literal> endpoint:</simpara>
<screen>$ curl -H "Authorization: Bearer ey..rg" http://localhost:8080/microprofile-jwt/rest/Sample/birthday</screen>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="microprofile_metrics_development" remap="_microprofile_metrics_development">
<title>MicroProfile Metrics development</title>
<section xml:id="creating-microprofile-metrics-application">
<title>Creating an MicroProfile Metrics application</title>
<simpara>Create an application that returns the number of requests made to the application.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a class file <literal>HelloService.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.microprofile.metrics;

public class HelloService {
    String createHelloMessage(String name){
        return "Hello" + name;
    }
}</programlisting>
</listitem>
<listitem>
<simpara>Create a class file <literal>HelloWorld.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.microprofile.metrics;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import org.eclipse.microprofile.metrics.annotation.Counted;

@Path("/")
public class HelloWorld {
@Inject
    HelloService helloService;

@GET
@Path("/json")
    @Produces({ "application/json" })
    @Counted(name = "requestCount",
  		 absolute = true,
description = "Number of times the getHelloWorldJSON was requested")
    public String getHelloWorldJSON() {
        return "{\"result\":\"" + helloService.createHelloMessage("World") + "\"}";
    }
}</programlisting>
</listitem>
<listitem>
<simpara>Update the <literal>pom.xml</literal> file to include the following dependency:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
    &lt;groupId&gt;org.eclipse.microprofile.metrics&lt;/groupId&gt;
    &lt;artifactId&gt;microprofile-metrics-api&lt;/artifactId&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
</listitem>
<listitem>
<simpara>Build the application using the following Maven command:</simpara>
<screen>$ mvn clean install wildfly:deploy</screen>
</listitem>
<listitem>
<simpara>Test the metrics:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Issue the following command in the CLI:</simpara>
<screen>$ curl -v http://localhost:9990/metrics |  grep request_count | grep helloworld-rs-metrics</screen>
<simpara>Expected output:</simpara>
<screen>jboss_undertow_request_count_total{deployment="helloworld-rs-metrics.war",servlet="org.jboss.as.quickstarts.rshelloworld.JAXActivator",subdeployment="helloworld-rs-metrics.war",microprofile_scope="vendor"} 0.0</screen>
</listitem>
<listitem>
<simpara>In a browser, navigate to the URL <link xlink:href="http://localhost:8080/helloworld-rs/rest/json">http://localhost:8080/helloworld-rs/rest/json</link>.</simpara>
</listitem>
<listitem>
<simpara>Re-Issue the following command in the CLI:</simpara>
<screen>$ curl -v http://localhost:9990/metrics |  grep request_count | grep helloworld-rs-metrics</screen>
<simpara>Expected output:</simpara>
<screen>jboss_undertow_request_count_total{deployment="helloworld-rs-metrics.war",servlet="org.jboss.as.quickstarts.rshelloworld.JAXActivator",subdeployment="helloworld-rs-metrics.war",microprofile_scope="vendor"} 1.0</screen>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="developing-a-microprofile-open-api-application_openapi">
<title>Developing an MicroProfile OpenAPI application</title>
<section xml:id="enabling-microprofile-open-api_openapi">
<title>Enabling MicroProfile OpenAPI</title>
<simpara>The <literal>microprofile-openapi-smallrye</literal> subsystem is provided in the <literal>standalone-microprofile.xml</literal> configuration. However, JBoss EAP XP uses the <literal>standalone.xml</literal> by default. You must include the subsystem in <literal>standalone.xml</literal> to use it.</simpara>
<simpara>Alternatively, you can follow the procedure <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index/#updating-standalone-server-configuration_default">Updating standalone configurations with Eclipse MicroProfile subsystems and extensions</link> to update the <literal>standalone.xml</literal> configuration file.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Enable the MicroProfile OpenAPI smallrye extension in JBoss EAP:</simpara>
<screen>/extension=org.wildfly.extension.microprofile.openapi-smallrye:add()</screen>
</listitem>
<listitem>
<simpara>Enable the <literal>microprofile-openapi-smallrye</literal> subsystem using the following management command:</simpara>
<screen>/subsystem=microprofile-openapi-smallrye:add()</screen>
</listitem>
<listitem>
<simpara>Reload the server.</simpara>
<screen>reload</screen>
</listitem>
</orderedlist>
<simpara>The <literal>microprofile-openapi-smallrye</literal> subsystem is enabled.</simpara>
</section>
<section xml:id="configuring-maven-project-for-open-api_openapi">
<title>Configuring Maven project for MicroProfile OpenAPI</title>
<simpara>Create a Maven project to set up the dependencies for creating an MicroProfile OpenAPI application.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Maven is installed.</simpara>
</listitem>
<listitem>
<simpara>JBoss EAP Maven repository is configured.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Initialize the project:</simpara>
<screen>mvn archetype:generate \
     -DgroupId=com.example.microprofile.openapi \
     -DartifactId=microprofile-openapi\
     -DarchetypeGroupId=org.apache.maven.archetypes \
     -DarchetypeArtifactId=maven-archetype-webapp \
     -DinteractiveMode=false
cd microprofile-openapi</screen>
<simpara>The command creates the directory structure for the project and the <literal>pom.xml</literal> configuration file.</simpara>
</listitem>
<listitem>
<simpara>Edit the <literal>pom.xml</literal> configuration file to contain:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.example.microprofile.openapi&lt;/groupId&gt;
    &lt;artifactId&gt;microprofile-openapi&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;war&lt;/packaging&gt;

    &lt;name&gt;microprofile-openapi Maven Webapp&lt;/name&gt;
    &lt;!-- Update the value with the URL of the project --&gt;
    &lt;url&gt;http://www.example.com&lt;/url&gt;

    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
        &lt;version.server.bom&gt;3.0.0.GA&lt;/version.server.bom&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.jboss.bom&lt;/groupId&gt;
                &lt;artifactId&gt;jboss-eap-xp-microprofile&lt;/artifactId&gt;
                &lt;version&gt;${version.server.bom}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.jboss.spec.javax.ws.rs&lt;/groupId&gt;
            &lt;artifactId&gt;jboss-jaxrs-api_2.1_spec&lt;/artifactId&gt;
            &lt;scope&gt;provided&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;!-- Set the name of the archive --&gt;
        &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.1.0&lt;/version&gt;
            &lt;/plugin&gt;
            &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;
            &lt;plugin&gt;
                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.0.2&lt;/version&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.8.0&lt;/version&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.22.1&lt;/version&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.2.2&lt;/version&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.5.2&lt;/version&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.8.2&lt;/version&gt;
            &lt;/plugin&gt;
            &lt;!-- Allows to use mvn wildfly:deploy --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.wildfly.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;wildfly-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;</programlisting>
<simpara>Use the <literal>pom.xml</literal> configuration file and directory structure to create an application.</simpara>
</listitem>
</orderedlist>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For information about configuring the JBoss EAP Maven repository, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index/#configuring-the-jboss-eap-maven-repository-with-the-pom-file_default">Configuring the JBoss EAP Maven repository with the POM file</link>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="creating-mp-open-api-application_openapi">
<title>Creating an MicroProfile OpenAPI application</title>
<simpara>Create an application that returns an OpenAPI v3 document.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Maven project is configured for creating an MicroProfile OpenAPI application.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create the directory to store class files:</simpara>
<screen>$ mkdir -p <emphasis>APPLICATION_ROOT</emphasis>/src/main/java/com/example/microprofile/openapi/</screen>
<simpara><emphasis>APPLICATION_ROOT</emphasis> is the directory containing the <literal>pom.xml</literal> configuration file for the application.</simpara>
</listitem>
<listitem>
<simpara>Navigate to the new directory:</simpara>
<screen>$ cd <emphasis>APPLICATION_ROOT</emphasis>/src/main/java/com/example/microprofile/openapi/</screen>
<simpara>All the class files in the following steps must be created in this directory.</simpara>
</listitem>
<listitem>
<simpara>Create the class file <literal>InventoryApplication.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.microprofile.openapi;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("/inventory")
public class InventoryApplication extends Application {
}</programlisting>
<simpara>This class serves as the REST endpoint for the application.</simpara>
</listitem>
<listitem>
<simpara>Create a class file <literal>Fruit.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.microprofile.openapi;

public class Fruit {

    private final String name;
    private final String description;

    public Fruit(String name, String description) {
        this.name = name;
        this.description = description;
    }

    public String getName() {
        return this.name;
    }

    public String getDescription() {
        return this.description;
    }
}</programlisting>
</listitem>
<listitem>
<simpara>Create a class file <literal>FruitResource.java</literal> with the following content:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.microprofile.openapi;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Set;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/fruit")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class FruitResource {

    private final Set&lt;Fruit&gt; fruits = Collections.newSetFromMap(Collections.synchronizedMap(new LinkedHashMap&lt;&gt;()));

    public FruitResource() {
        this.fruits.add(new Fruit("Apple", "Winter fruit"));
        this.fruits.add(new Fruit("Pineapple", "Tropical fruit"));
    }

    @GET
    public Set&lt;Fruit&gt; all() {
        return this.fruits;
    }

    @POST
    public Set&lt;Fruit&gt; add(Fruit fruit) {
        this.fruits.add(fruit);
        return this.fruits;
    }

    @DELETE
    public Set&lt;Fruit&gt; remove(Fruit fruit) {
        this.fruits.removeIf(existingFruit -&gt; existingFruit.getName().contentEquals(fruit.getName()));
        return this.fruits;
    }
}</programlisting>
</listitem>
<listitem>
<simpara>Navigate to the root directory of the application:</simpara>
<screen>$ cd <emphasis>APPLICATION_ROOT</emphasis></screen>
</listitem>
<listitem>
<simpara>Build and deploy the application using the following Maven command:</simpara>
<screen>$ mvn wildfly:deploy</screen>
</listitem>
<listitem>
<simpara>Test the application.</simpara>
<itemizedlist>
<listitem>
<simpara>Access the OpenAPI documentation of the sample application using <literal>curl</literal>:</simpara>
<screen>$ curl http://localhost:8080/openapi</screen>
</listitem>
<listitem>
<simpara>The following output is returned:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">openapi: 3.0.1
info:
  title: Archetype Created Web Application
  version: "1.0"
servers:
- url: /microprofile-openapi
paths:
  /inventory/fruit:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fruit'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fruit'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fruit'
    delete:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fruit'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fruit'
components:
  schemas:
    Fruit:
      type: object
      properties:
        description:
          type: string
        name:
          type: string</programlisting>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
<itemizedlist>
<title>Additional Resources</title>
<listitem>
<simpara>For a list of annotations defined in MicroProfile SmallRye OpenAPI, see <link xlink:href="https://github.com/eclipse/microprofile-open-api/tree/master/api/src/main/java/org/eclipse/microprofile/openapi/annotations">MicroProfile OpenAPI annotations</link>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="configuring-eap-to-serve-a-static-open-api-document_openapi">
<title>Configuring JBoss EAP to serve a static OpenAPI document</title>
<simpara>Configure JBoss EAP to serve a static OpenAPI document that describes the REST services for the host.</simpara>
<simpara>When JBoss EAP is configured to serve a static OpenAPI document, the static OpenAPI document is processed before any Jakarta RESTful Web Services and MicroProfile OpenAPI annotations.</simpara>
<simpara>In a production environment, disable annotation processing when serving a static document. Disabling annotation processing ensures that an immutable and versioned API contract is available for clients.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a directory in the application source tree:</simpara>
<screen>$ mkdir <emphasis>APPLICATION_ROOT</emphasis>/src/main/webapp/META-INF</screen>
<simpara><emphasis>APPLICATION_ROOT</emphasis> is the directory containing the <literal>pom.xml</literal> configuration file for the application.</simpara>
</listitem>
<listitem>
<simpara>Query the OpenAPI endpoint, redirecting the output to a file:</simpara>
<screen>$ curl http://localhost:8080/openapi?format=JSON &gt; src/main/webapp/META-INF/openapi.json</screen>
<simpara>By default, the endpoint serves a YAML document, <literal>format=JSON</literal> specifies that a JSON document is returned.</simpara>
</listitem>
<listitem>
<simpara>Configure the application to skip annotation scanning when processing the OpenAPI document model:</simpara>
<screen>$ echo "mp.openapi.scan.disable=true" &gt; <emphasis>APPLICATION_ROOT</emphasis>/src/main/webapp/META-INF/microprofile-config.properties</screen>
</listitem>
<listitem>
<simpara>Rebuild the application:</simpara>
<screen>$ mvn clean install</screen>
</listitem>
<listitem>
<simpara>Deploy the application again using the following management CLI commands:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Undeploy the application:</simpara>
<screen>undeploy microprofile-openapi.war</screen>
</listitem>
<listitem>
<simpara>Deploy the application:</simpara>
<screen>deploy <emphasis>APPLICATION_ROOT</emphasis>/target/microprofile-openapi.war</screen>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara>JBoss EAP now serves a static OpenAPI document at the OpenAPI endpoint.</simpara>
</section>
</section>
<section xml:id="microprofile_rest_client_development" remap="_microprofile_rest_client_development">
<title>MicroProfile REST Client development</title>
<section xml:id="intuitive-syntax_default">
<title>A comparison of MicroProfile REST client and Jakarta RESTful Web Services syntaxes</title>
<simpara>The MicroProfile REST client enables a version of distributed object communication, which is also implemented in CORBA, Java Remote Method Invocation (RMI), the JBoss Remoting Project, and RESTEasy. For example, consider the resource:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Path("resource")
public class TestResource {
   @Path("test")
   @GET
   String test() {
      return "test";
   }
 }</programlisting>
<simpara>The following example demonstrates the use of the Jakarta RESTful Web Services-native way to access the <literal>TestResource</literal> class:</simpara>
<programlisting language="java" linenumbering="unnumbered">Client client = ClientBuilder.newClient();
String response = client.target("http://localhost:8081/test").request().get(String.class);</programlisting>
<simpara>However, Microprofile REST client supports a more intuitive syntax by directly calling the <literal>test()</literal> method, as the following example demonstrates:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Path("resource")
public interface TestResourceIntf {
    @Path("test")
    @GET
    public String test();
}

TestResourceIntf service = RestClientBuilder.newBuilder()
                              .baseUrl(http://localhost:8081/))
                              .build(TestResourceIntf.class);
String s = service.test();</programlisting>
<simpara>In the preceding example, making calls on the <literal>TestResource</literal> class becomes much easier with the <literal>TestResourceIntf</literal> class, as illustrated by the call <literal>service.test()</literal>.</simpara>
<simpara>The following example is a more elaborate version of the <literal>TestResourceIntf</literal> class:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Path("resource")
public interface TestResourceIntf2 {
   @Path("test/{path}")
   @Consumes("text/plain")
   @Produces("text/html")
   @POST
   public String test(@PathParam("path") String path, @QueryParam("query") String query, String entity);
}</programlisting>
<simpara>Calling the <literal>service.test("p", "q", "e")</literal> method results in an HTTP message as shown in the following example:</simpara>
<screen>POST /resource/test/p/?query=q HTTP/1.1
Accept: text/html
Content-Type: text/plain
Content-Length: 1

e</screen>
</section>
<section xml:id="programmatic-registration-of-providers_default">
<title>Programmatic registration of providers in MicroProfile REST client</title>
<simpara>With the MicroProfile REST client, you can configure the client environment by registering providers. For example:</simpara>
<programlisting language="java" linenumbering="unnumbered">TestResourceIntf service = RestClientBuilder.newBuilder()
                              .baseUrl(http://localhost:8081/))
                              .register(MyClientResponseFilter.class)
                              .register(MyMessageBodyReader.class)
                              .build(TestResourceIntf.class);</programlisting>
</section>
<section xml:id="declarative-registration-of-providers_default">
<title>Declarative registration of providers in MicroProfile REST client</title>
<simpara>Use the MicroProfile REST client to register providers declaratively by adding the <literal>org.eclipse.microprofile.rest.client.annotation.RegisterProvider</literal> annotation to the target interface, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Path("resource")
@RegisterProvider(MyClientResponseFilter.class)
@RegisterProvider(MyMessageBodyReader.class)
public interface TestResourceIntf2 {
   @Path("test/{path}")
   @Consumes("text/plain")
   @Produces("text/html")
   @POST
   public String test(@PathParam("path") String path, @QueryParam("query") String query, String entity);
}</programlisting>
<simpara>Declaring the <literal>MyClientResponseFilter</literal> class and the <literal>MyMessageBodyReader</literal> class with annotations eliminates the need to call the <literal>RestClientBuilder.register()</literal> method.</simpara>
</section>
<section xml:id="declarative-specification-of-headers_default">
<title>Declarative specification of headers in MicroProfile REST client</title>
<simpara>You can specify a header for an HTTP request in the following ways:</simpara>
<itemizedlist>
<listitem>
<simpara>By annotating one of the resource method parameters.</simpara>
</listitem>
<listitem>
<simpara>By declaratively using the <literal>org.eclipse.microprofile.rest.client.annotation.ClientHeaderParam</literal> annotation.</simpara>
</listitem>
</itemizedlist>
<simpara>The following example illustrates setting a header by annotating one of the resource method parameters with the annotation <literal>@HeaderParam</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">@POST
@Produces(MediaType.TEXT_PLAIN)
@Consumes(MediaType.TEXT_PLAIN)
String contentLang(@HeaderParam(HttpHeaders.CONTENT_LANGUAGE) String contentLanguage, String subject);</programlisting>
<simpara>The following example illustrates setting a header using the <literal>org.eclipse.microprofile.rest.client.annotation.ClientHeaderParam</literal> annotation:</simpara>
<programlisting language="java" linenumbering="unnumbered">@POST
@Produces(MediaType.TEXT_PLAIN)
@Consumes(MediaType.TEXT_PLAIN)
@ClientHeaderParam(name=HttpHeaders.CONTENT_LANGUAGE, value="{getLanguage}")
String contentLang(String subject);

default String getLanguage() {
   return ...;
}</programlisting>
</section>
<section xml:id="responseexceptionmapper_default">
<title>ResponseExceptionMapper in MicroProfile REST client</title>
<simpara>The <literal>org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper</literal> class is the client-side inverse of the <literal>javax.ws.rs.ext.ExceptionMapper</literal> class, which is defined in Jakarta RESTful Web Services. The <literal>ExceptionMapper.toResponse()</literal> method turns an <literal>Exception</literal> class thrown during the server-side processing into a <literal>Response</literal> class. The <literal>ResponseExceptionMapper.toThrowable()</literal> method turns a <literal>Response</literal> class received on the client-side with an HTTP error status into an <literal>Exception</literal> class.</simpara>
<simpara>You can register the <literal>ResponseExceptionMapper</literal> class either programmatically or declaratively. In the absence of a registered <literal>ResponseExceptionMapper</literal> class, a default <literal>ResponseExceptionMapper</literal> class maps any response with status <literal>&gt;= 400</literal> to a <literal>WebApplicationException</literal> class.</simpara>
</section>
<section xml:id="cdi-integration_default">
<title>Context dependency injection with MicroProfile REST client</title>
<simpara>With the MicroProfile REST client, you must annotate any interface that is managed as a Jakarta contexts and dependency injection (Jakarta Contexts and Dependency Injection) bean with the <literal>@RegisterRestClient</literal> class. For example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Path("resource")
@RegisterProvider(MyClientResponseFilter.class)
public static class TestResourceImpl {
      @Inject TestDataBase db;

      @Path("test/{path}")
      @Consumes("text/plain")
      @Produces("text/html")
      @POST
      public String test(@PathParam("path") String path, @QueryParam("query")
      String query, String entity) {
         return db.getByName(query);
      }
   }
   @Path("database")
   @RegisterRestClient
   public interface TestDataBase {

      @Path("")
      @POST
      public String getByName(String name);
   }</programlisting>
<simpara>Here, the MicroProfile REST client implementation creates a client for a <literal>TestDataBase</literal> class service, allowing easy access by the <literal>TestResourceImpl</literal> class. However, it does not include the information about the path to the <literal>TestDataBase</literal> class implementation. This information can be supplied by the optional
<literal>@RegisterProvider</literal> parameter <literal>baseUri</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Path("database")
@RegisterRestClient(baseUri="https://localhost:8080/webapp")
public interface TestDataBase {
   @Path("")
   @POST
   public String getByName(String name);
}</programlisting>
<simpara>This indicates that you can access the implementation of <literal>TestDataBase</literal> at <link xlink:href="https://localhost:8080/webapp">https://localhost:8080/webapp</link>. You can also use MicroProfile configuration to supply the information externally:</simpara>
<programlisting language="java" linenumbering="unnumbered">&lt;fully qualified name of TestDataBase&gt;/mp-rest/url=&lt;URL&gt;</programlisting>
<simpara>For example, the following property indicates that you can access an implementation of the <literal>com.bluemonkeydiamond.TestDatabase</literal> class at <link xlink:href="https://localhost:8080/webapp">https://localhost:8080/webapp</link>:</simpara>
<programlisting language="java" linenumbering="unnumbered">com.bluemonkeydiamond.TestDatabase/mp-rest/url=https://localhost:8080/webapp</programlisting>
<simpara>You can supply a number of other properties to Jakarta Contexts and Dependency Injection clients. For example, <literal>com.mycompany.remoteServices.MyServiceClient/mp-rest/providers</literal>, comma-separated list of fully-qualified provider class names to include in the client.</simpara>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For more information about the MicroProfile REST Client specification, see <link xlink:href="https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html">Rest Client for MicroProfile</link>.</simpara>
</listitem>
<listitem>
<simpara>For more information about MicroProfile REST Client 2.0 features, see <link xlink:href="https://docs.jboss.org/resteasy/docs/3.15.1.Final/userguide/html/MicroProfile_Rest_Client.html#d4e3758">MicroProfile REST Client 2.0</link>.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</chapter>
<chapter xml:id="using-the-openshift-image-for-jboss-eap-xp_default">
<title>Build and run microservices applications on the OpenShift image for JBoss EAP XP</title>
<simpara xml:id="build-and-run-microservices-applications-on-the-openshift-image-for-jboss-eap-xp_default">You can build and run your microservices applications on the OpenShift image for JBoss EAP XP.</simpara>
<note>
<simpara>JBoss EAP XP is supported only on OpenShift 4 and later versions.</simpara>
</note>
<simpara>Use the following workflow to build and run a microservices application on the OpenShift image for JBoss EAP XP by using the source-to-image (S2I) process.</simpara>
<note>
<simpara>The OpenShift images for JBoss EAP XP 3.0.0 provide a default standalone configuration file, which is based on the <literal>standalone-microprofile-ha.xml</literal> file. For more information about the server configuration files included in JBoss EAP XP, see the <emphasis>Standalone server configuration files</emphasis> section.</simpara>
</note>
<simpara>This workflow uses the <literal>microprofile-config</literal> quickstart as an example. The quickstart provides a small, specific working example that can be used as a reference for your own project. See the <literal>microprofile-config</literal> quickstart that ships with JBoss EAP XP 3.0.0 for more information.</simpara>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara>For  more information about the server configuration files included in JBoss EAP XP, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index/#standalone-server-configuration_default">Standalone server configuration files</link>.</simpara>
</listitem>
</itemizedlist>
<section xml:id="preparing-openshift-for-application-deployment_default">
<title>Preparing OpenShift for application deployment</title>
<simpara>Prepare OpenShift for application deployment.</simpara>
<formalpara>
<title>Prerequisites</title>
<para>You have installed an operational OpenShift instance. For more information, see the <emphasis>Installing and Configuring OpenShift Container Platform Clusters</emphasis> book on <link xlink:href="https://access.redhat.com/products/red-hat-openshift-container-platform/">Red Hat Customer Portal</link>.</para>
</formalpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Log in to your OpenShift instance using the <literal>oc login</literal> command.</simpara>
</listitem>
<listitem>
<simpara>Create a new project in OpenShift.</simpara>
<simpara>A project allows a group of users to organize and manage content separately from other groups. You can create a project in OpenShift using the following command.</simpara>
<screen>$ oc new-project <emphasis>PROJECT_NAME</emphasis></screen>
<simpara>For example, for the <literal>microprofile-config</literal> quickstart, create a new project named <literal>eap-demo</literal> using the following command.</simpara>
<screen>$ oc new-project eap-demo</screen>
</listitem>
</orderedlist>
</section>
<section xml:id="configuring-authentication-to-the-red-hat-container-registry_default">
<title>Configuring authentication to the Red Hat Container Registry</title>
<simpara>Before you can import and use the OpenShift image for JBoss EAP XP, you must configure authentication to the Red Hat Container Registry.</simpara>
<simpara>Create an authentication token using a registry service account to configure access to the Red Hat Container Registry. You need not use or store your Red Hat account’s username and password in your OpenShift configuration when you use an authentication token.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Follow the instructions on Red Hat Customer Portal to create an authentication token using a <link xlink:href="https://access.redhat.com/terms-based-registry/">Registry Service Account management application</link>.</simpara>
</listitem>
<listitem>
<simpara>Download the YAML file containing the OpenShift secret for the token.</simpara>
<simpara>You can download the YAML file from the <emphasis role="strong">OpenShift Secret</emphasis> tab on your token’s <emphasis role="strong">Token Information</emphasis> page.</simpara>
</listitem>
<listitem>
<simpara>Create the authentication token secret for your OpenShift project using the YAML file that you downloaded:</simpara>
<screen>oc create -f <emphasis>1234567_myserviceaccount-secret.yaml</emphasis></screen>
</listitem>
<listitem>
<simpara>Configure the secret for your OpenShift project using the following commands, replacing the secret name below with the name of your secret created in the previous step.</simpara>
<screen>oc secrets link default <emphasis>1234567-myserviceaccount-pull-secret</emphasis> --for=pull
oc secrets link builder <emphasis>1234567-myserviceaccount-pull-secret</emphasis> --for=pull</screen>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/RegistryAuthentication">Configuring authentication to the Red Hat Container Registry</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/terms-based-registry/">Registry Service Account management application</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/openshift_container_platform/3.11/html/developer_guide/dev-guide-managing-images#allowing-pods-to-reference-images-from-other-secured-registries">Configuring access to secured registries</link></simpara>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
</section>
<section xml:id="importing-the-latest-openshift-image-streams-and-templates-for-jboss-eap-xp_default">
<title>Importing the latest OpenShift imagestreams and templates for JBoss EAP XP</title>
<simpara>Import the latest OpenShift imagestreams and templates for JBoss EAP XP.</simpara>
<important>
<simpara>OpenJDK 8 images and imagestreams on OpenShift are deprecated.</simpara>
<simpara>The images and imagestreams are still supported on OpenShift. However, no enhancements are made to these images and imagestreams and they might be removed in the future. Red Hat continues to provide full support and bug fixes OpenJDK 8 images and imagestreams under its standard support terms and conditions.</simpara>
</important>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Use one of the following commands to import the latest JDK 8 and JDK 11 imagestreams and templates for the OpenShift image for JBoss EAP XP into your OpenShift project’s namespace.</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Import JDK 8 imagestreams:</simpara>
<screen>oc replace --force -f https://raw.githubusercontent.com/jboss-container-images/jboss-eap-openshift-templates/eap-xp2/jboss-eap-xp2-openjdk8-openshift.json</screen>
<simpara>This command imports the following imagestreams and templates:</simpara>
<itemizedlist>
<listitem>
<simpara>The JDK 8 builder imagestream: jboss-eap-xp2-openjdk8-openshift</simpara>
</listitem>
<listitem>
<simpara>The JDK 8 runtime imagestream: jboss-eap-xp2-openjdk8-runtime-openshift</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Import JDK 11 imagestream:</simpara>
<screen>oc replace --force -f https://raw.githubusercontent.com/jboss-container-images/jboss-eap-openshift-templates/eap-xp2/jboss-eap-xp2-openjdk11-openshift.json</screen>
<simpara>This command imports the following imagestreams and templates:</simpara>
<itemizedlist>
<listitem>
<simpara>The JDK 11 builder imagestream: jboss-eap-xp2-openjdk11-openshift</simpara>
</listitem>
<listitem>
<simpara>The JDK 11 runtime imagestream: jboss-eap-xp2-openjdk11-runtime-openshift</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Import the JDK 8 and JDK 11 templates:</simpara>
<screen>for resource in \
eap-xp2-basic-s2i.json \
eap-xp2-third-party-db-s2i.json
do
oc replace --force -f https://raw.githubusercontent.com/jboss-container-images/jboss-eap-openshift-templates/eap-xp2/templates/${resource}
done</screen>
</listitem>
</orderedlist>
<note>
<simpara>The JBoss EAP XP imagestreams and templates imported using the above command are only available within that OpenShift project.</simpara>
</note>
</listitem>
<listitem>
<simpara>If you have administrative access to the general <literal>openshift</literal> namespace and want the imagestreams and templates to be accessible by all projects, add <literal>-n openshift</literal> to the <literal>oc replace</literal> line of the command. For example:</simpara>
<screen>...
oc replace -n openshift --force -f \
...</screen>
</listitem>
<listitem>
<simpara>If you want to import the imagestreams and templates into a different project, add the <literal>-n <emphasis>PROJECT_NAME</emphasis></literal> to the <literal>oc replace</literal> line of the command. For example:</simpara>
<screen>...
oc replace -n <emphasis>PROJECT_NAME</emphasis> --force -f
...</screen>
<simpara>If you use the cluster-samples-operator, see the OpenShift documentation on configuring the cluster samples operator.  See <link xlink:href="https://docs.openshift.com/container-platform/latest/openshift_images/configuring-samples-operator.html">https://docs.openshift.com/container-platform/latest/openshift_images/configuring-samples-operator.html</link> for details about configuring the cluster samples operator.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="deploying-a-jboss-eap-xp-source-to-image-s2i-application-onto-openshift_default">
<title>Deploying a JBoss EAP XP source-to-image (S2I) application on OpenShift</title>
<simpara>Deploy a JBoss EAP XP source-to-image (S2I) application on OpenShift.</simpara>
<important>
<simpara>OpenJDK 8 images and imagestreams on OpenShift are deprecated.</simpara>
<simpara>The images and imagestreams are still supported on OpenShift. However, no enhancements are made to these images and imagestreams and they might be removed in the future. Red Hat continues to provide full support and bug fixes for OpenJDK 8 images and imagestreams  under its standard support terms and conditions.</simpara>
</important>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Optional: A template can specify default values for many template parameters, and you might have to override some, or all, of the defaults. To see template information, including a list of parameters and any default values, use the command <literal>oc describe template TEMPLATE_NAME</literal>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a new OpenShift application using the JBoss EAP XP image and your Java application’s source code. Use one of the provided JBoss EAP XP templates for S2I builds.</simpara>
<screen>$ oc new-app --template=eap-xp2-basic-s2i \ <co xml:id="CO3-1"/>
 -p EAP_IMAGE_NAME=jboss-eap-xp2-openjdk8-openshift:latest \
 -p EAP_RUNTIME_IMAGE_NAME=jboss-eap-xp2-openjdk8-runtime-openshift:latest \
 -p IMAGE_STREAM_NAMESPACE=eap-demo \ <co xml:id="CO3-2"/>
 -p SOURCE_REPOSITORY_URL=https://github.com/jboss-developer/jboss-eap-quickstarts \ <co xml:id="CO3-3"/>
 -p SOURCE_REPOSITORY_REF=xp-3.0.x \ <co xml:id="CO3-4"/>
 -p CONTEXT_DIR=microprofile-config <co xml:id="CO3-5"/></screen>
<calloutlist>
<callout arearefs="CO3-1">
<para>The template to use. The application image is tagged with the <literal>latest</literal> tag.</para>
</callout>
<callout arearefs="CO3-2">
<para>The latest images streams and templates <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#importing-the-latest-openshift-image-streams-and-templates-for-jboss-eap-xp_default">were imported into the project’s namespace</link>, so you must specify the namespace of where to find the imagestream. This is usually the project’s name.</para>
</callout>
<callout arearefs="CO3-3">
<para>URL to the repository containing the application source code.</para>
</callout>
<callout arearefs="CO3-4">
<para>The Git repository reference to use for the source code. This can be a Git branch or tag reference.</para>
</callout>
<callout arearefs="CO3-5">
<para>The directory within the source repository to build.</para>
</callout>
</calloutlist>
<simpara>As another example, to deploy the <literal>microprofile-config</literal> quickstart using the JDK 11 runtime image enter the following command. The command uses the <literal>eap-xp2-basic-s2i</literal> template in the <literal>eap-demo</literal> project, created in the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#preparing-openshift-for-application-deployment_default">Preparing OpenShift for application deployment</link> section, with the <literal>microprofile-config</literal> source code on GitHub.</simpara>
<screen>$ oc new-app --template=eap-xp2-basic-s2i \ <co xml:id="CO4-1"/>
 -p EAP_IMAGE_NAME=jboss-eap-xp2-openjdk11-openshift:latest \
 -p EAP_RUNTIME_IMAGE_NAME=jboss-eap-xp2-openjdk11-runtime-openshift:latest \
 -p IMAGE_STREAM_NAMESPACE=eap-demo \ <co xml:id="CO4-2"/>
 -p SOURCE_REPOSITORY_URL=https://github.com/jboss-developer/jboss-eap-quickstarts \ <co xml:id="CO4-3"/>
 -p SOURCE_REPOSITORY_REF=xp-3.0.x \ <co xml:id="CO4-4"/>
 -p CONTEXT_DIR=microprofile-config <co xml:id="CO4-5"/></screen>
<calloutlist>
<callout arearefs="CO4-1">
<para>The template to use. The application image is tagged with the <literal>latest</literal> tag.</para>
</callout>
<callout arearefs="CO4-2">
<para>The latest imagestreams and templates were imported into the project’s namespace, so you must specify the namespace where to find the imagestream. This is usually the project’s name.</para>
</callout>
<callout arearefs="CO4-3">
<para>URL to the repository containing the application source code.</para>
</callout>
<callout arearefs="CO4-4">
<para>The Git repository reference to use for the source code. This can be a Git branch or tag reference.</para>
</callout>
<callout arearefs="CO4-5">
<para>The directory within the source repository to build.</para>
</callout>
</calloutlist>
<note>
<simpara>A template can specify default values for many template parameters, and you might have to override some, or all, of the defaults. To see template information, including a list of parameters and any default values, use the command <literal>oc describe template <emphasis>TEMPLATE_NAME</emphasis></literal>.</simpara>
</note>
<simpara>You might also want to <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/getting_started_with_jboss_eap_for_openshift_container_platform/#configuring_eap_env_vars">configure environment variables</link> when creating your new OpenShift application.</simpara>
</listitem>
<listitem>
<simpara>Retrieve the name of the build configurations.</simpara>
<screen>$ oc get bc -o name</screen>
</listitem>
<listitem>
<simpara>Use the name of the build configurations from the previous step to view the Maven progress of the builds.</simpara>
<screen>$ oc logs -f buildconfig/${APPLICATION_NAME}-build-artifacts

…
Push successful
$ oc logs -f buildconfig/${APPLICATION_NAME}
…
Push successful</screen>
<simpara>For example, for the <literal>microprofile-config</literal>, the following command shows the progress of the Maven builds.</simpara>
<screen>$ oc logs -f buildconfig/eap-xp2-basic-app-build-artifacts

…
Push successful
$ oc logs -f buildconfig/eap-xp2-basic-app
…
Push successful</screen>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#importing-the-latest-openshift-image-streams-and-templates-for-jboss-eap-xp_default">Importing the latest OpenShift imagestreams and templates for JBoss EAP XP</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#preparing-openshift-for-application-deployment_default">Preparing OpenShift for application deployment</link></simpara>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
</section>
<section xml:id="completing-post-deployment-tasks-for-jboss-eap-xp-source-to-image-s2i-application_default">
<title>Completing post-deployment tasks for JBoss EAP XP source-to-image (S2I) application</title>
<simpara>Depending on your application, you might need to complete some tasks after your OpenShift application has been built and deployed.</simpara>
<simpara>Examples of post-deployment tasks include the following:</simpara>
<itemizedlist>
<listitem>
<simpara>Exposing a service so that the application is viewable from outside of OpenShift.</simpara>
</listitem>
<listitem>
<simpara>Scaling your application to a specific number of replicas.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Get the service name of your application using the following command.</simpara>
<screen>$ oc get service</screen>
</listitem>
<listitem>
<simpara><emphasis role="strong">Optional</emphasis>: Expose the main service as a route so you can access your application from outside of OpenShift. For example, for the <literal>microprofile-config</literal> quickstart, use the following command to expose the required service and port.</simpara>
<note>
<simpara>If you used a template to create the application, the route might already exist. If it does, continue on to the next step.</simpara>
</note>
<screen>$ oc expose service/eap-xp2-basic-app --port=8080</screen>
</listitem>
<listitem>
<simpara>Get the URL of the route.</simpara>
<screen>$ oc get route</screen>
</listitem>
<listitem>
<simpara>Access the application in your web browser using the URL. The URL is the value of the <literal>HOST/PORT</literal> field from previous command’s output.</simpara>
<note>
<simpara>For JBoss EAP XP 3.0.0 GA distribution, the Microprofile Config quickstart does not reply to HTTPS GET requests to the application’s root context. This enhancement is only available in the {JBossXPShortName101} GA distribution.</simpara>
<simpara>For example, to interact with the Microprofile Config application, the URL might be <literal>http://<emphasis>HOST_PORT_Value</emphasis>/config/value</literal> in your browser.</simpara>
</note>
<simpara>If your application does not use the JBoss EAP root context, append the context of the application to the URL. For example, for the <literal>microprofile-config</literal> quickstart, the URL might be <literal>http://<emphasis>HOST_PORT_VALUE</emphasis>/microprofile-config/</literal>.</simpara>
</listitem>
<listitem>
<simpara>Optionally, you can scale up the application instance by running the following command. This command increases the number of replicas to 3.</simpara>
<screen>$ oc scale deploymentconfig <emphasis>DEPLOYMENTCONFIG_NAME</emphasis> --replicas=3</screen>
<simpara>For example, for the <literal>microprofile-config</literal> quickstart, use the following command to scale up the application.</simpara>
<screen>$ oc scale deploymentconfig/eap-xp2-basic-app --replicas=3</screen>
</listitem>
</orderedlist>
<formalpara>
<title>Additional Resources</title>
<para>For more information about JBoss EAP XP Quickstarts, see the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index/#use-quickstarts_context">Use the Quickstarts</link> section in the <emphasis>Using Eclipse MicroProfile in JBoss EAP</emphasis> guide.</para>
</formalpara>
</section>
</chapter>
<chapter xml:id="capability-trimming_default">
<title>Capability trimming</title>
<simpara>When building a bootable JAR, you can decide which JBoss EAP features and subsystems to include.</simpara>
<note>
<simpara>Capability trimming is supported only on OpenShift or when building a bootable JAR.</simpara>
</note>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#about-bootable-jar_default">About the bootable JAR</link></simpara>
</listitem>
</itemizedlist>
<section xml:id="available-jboss-eap-layers_default">
<title>Available JBoss EAP layers</title>
<simpara>Red Hat makes available a number of layers to customize provisioning of the JBoss EAP server in OpenShift or a bootable JAR.</simpara>
<simpara>Three layers are base layers that provide core functionality. The other layers are decorator layers that enhance the base layers with additional capabilities.</simpara>
<simpara>Most decorator layers can be used to build S2I images in JBoss EAP for OpenShift or to build a bootable JAR.  A few layers do not support S2I images; the description of the layer notes this limitation.</simpara>
<note>
<simpara>Only the listed layers are supported. Layers not listed here are not supported.</simpara>
</note>
<section xml:id="base-provisioning-layers_default">
<title>Base layers</title>
<simpara>Each base layer includes core functionality for a typical server user case.</simpara>
<bridgehead xml:id="datasources_web_server" renderas="sect4" remap="_datasources_web_server">datasources-web-server</bridgehead>
<simpara>This layer includes a servlet container and the ability to configure a datasource.</simpara>
<simpara>This layer does not include MicroProfile capabilities.</simpara>
<simpara>The following Jakarta EE specifications are supported in this layer:</simpara>
<itemizedlist>
<listitem>
<simpara>Jakarta JSON Processing 1.1</simpara>
</listitem>
<listitem>
<simpara>Jakarta JSON Binding 1.0</simpara>
</listitem>
<listitem>
<simpara>Jakarta Servlet 4.0</simpara>
</listitem>
<listitem>
<simpara>Jakarta Expression Language 3.0</simpara>
</listitem>
<listitem>
<simpara>Jakarta Server Pages 2.3</simpara>
</listitem>
<listitem>
<simpara>Jakarta Standard Tag Library 1.2</simpara>
</listitem>
<listitem>
<simpara>Jakarta Concurrency 1.1</simpara>
</listitem>
<listitem>
<simpara>Jakarta Annotations 1.3</simpara>
</listitem>
<listitem>
<simpara>Jakarta XML Binding 2.3</simpara>
</listitem>
<listitem>
<simpara>Jakarta Debugging Support for Other Languages 1.0</simpara>
</listitem>
<listitem>
<simpara>Jakarta Transaction 1.3</simpara>
</listitem>
<listitem>
<simpara>Jakarta Connector API 1.7</simpara>
</listitem>
</itemizedlist>
<bridgehead xml:id="jaxrs_server" renderas="sect4" remap="_jaxrs_server">jaxrs-server</bridgehead>
<simpara>This layer enhances the <literal>datasources-web-server</literal> layer with the following JBoss EAP subsystems:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>jaxrs</literal></simpara>
</listitem>
<listitem>
<simpara><literal>weld</literal></simpara>
</listitem>
<listitem>
<simpara><literal>jpa</literal></simpara>
</listitem>
</itemizedlist>
<simpara>This layer also adds Infinispan-based second-level entity caching locally in the container.</simpara>
<simpara>The following MicroProfile capability is included in this layer:</simpara>
<itemizedlist>
<listitem>
<simpara>MicroProfile REST Client</simpara>
</listitem>
</itemizedlist>
<simpara>The following Jakarta EE specifications are supported in this layer in addition to those supported in the <literal>datasources-web-server</literal> layer:</simpara>
<itemizedlist>
<listitem>
<simpara>Jakarta Contexts and Dependency Injection 2.0</simpara>
</listitem>
<listitem>
<simpara>Jakarta Bean Validation 2.0</simpara>
</listitem>
<listitem>
<simpara>Jakarta Interceptors 1.2</simpara>
</listitem>
<listitem>
<simpara>Jakarta RESTful Web Services 2.1</simpara>
</listitem>
<listitem>
<simpara>Jakarta Persistence 2.2</simpara>
</listitem>
</itemizedlist>
<bridgehead xml:id="cloud_server" renderas="sect4" remap="_cloud_server">cloud-server</bridgehead>
<simpara>This layer enhances the <literal>jaxrs-server</literal> layer with the following JBoss EAP subsystems:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>resource-adapters</literal></simpara>
</listitem>
<listitem>
<simpara><literal>messaging-activemq</literal> (remote broker messaging, not embedded messaging)</simpara>
</listitem>
</itemizedlist>
<simpara>This layer also adds the following observability features to the <literal>jaxrs-server</literal> layer:</simpara>
<itemizedlist>
<listitem>
<simpara>MicroProfile Health</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Metrics</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Config</simpara>
</listitem>
<listitem>
<simpara>MicroProfile OpenTracing</simpara>
</listitem>
</itemizedlist>
<simpara>The following Jakarta EE specification is supported in this layer in addition to those supported in the <literal>jaxrs-server</literal> layer:</simpara>
<itemizedlist>
<listitem>
<simpara>Jakarta Security 1.0</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="decorator-provisioning-layers_default">
<title>Decorator layers</title>
<simpara>Decorator layers are not used alone.  You can configure one or more decorator layers with a base layer to deliver additional functionality.</simpara>
<bridgehead xml:id="ejb_lite" renderas="sect4" remap="_ejb_lite">ejb-lite</bridgehead>
<simpara>This decorator layer adds a minimal Jakarta Enterprise Beans implementation to the provisioned server. The following support is not included in this layer:</simpara>
<itemizedlist>
<listitem>
<simpara>IIOP integration</simpara>
</listitem>
<listitem>
<simpara>MDB instance pool</simpara>
</listitem>
<listitem>
<simpara>Remote connector resource</simpara>
</listitem>
</itemizedlist>
<simpara>This layer is only supported when building a bootable JAR.  This layer is not supported when using S2I.</simpara>
<bridgehead xml:id="jakarta_enterprise_beans" renderas="sect4" remap="_jakarta_enterprise_beans">Jakarta Enterprise Beans</bridgehead>
<simpara>This decorator layer extends the <literal>ejb-lite</literal> layer.  This layer adds the following support to the provisioned server, in addition to the base functionality included in the <literal>ejb-lite</literal> layer:</simpara>
<itemizedlist>
<listitem>
<simpara>MDB instance pool</simpara>
</listitem>
<listitem>
<simpara>Remote connector resource</simpara>
</listitem>
</itemizedlist>
<simpara>Use this layer if you want to use message-driven beans (MDBs) or Jakarta Enterprise Beans remoting capabilities, or both.  If you do not need these capabilities, use the <literal>ejb-lite</literal> layer.</simpara>
<simpara>This layer is only supported when building a bootable JAR.  This layer is not supported when using S2I.</simpara>
<bridgehead xml:id="ejb_local_cache" renderas="sect4" remap="_ejb_local_cache">ejb-local-cache</bridgehead>
<simpara>This decorator layer adds local caching support for Jakarta Enterprise Beans to the provisioned server.</simpara>
<simpara><emphasis>Dependencies</emphasis>: You can only include this layer if you have included the <literal>ejb-lite</literal> layer or the <literal>ejb</literal> layer.</simpara>
<note>
<simpara>This layer is not compatible with the <literal>ejb-dist-cache</literal> layer.  If you include the <literal>ejb-dist-cache</literal> layer, you cannot include the <literal>ejb-local-cache</literal> layer. If you include both layers, the resulting build might include an unexpected Jakarta Enterprise Beans configuration.</simpara>
</note>
<simpara>This layer is only supported when building a bootable JAR.  This layer is not supported when using S2I.</simpara>
<bridgehead xml:id="ejb_dist_cache" renderas="sect4" remap="_ejb_dist_cache">ejb-dist-cache</bridgehead>
<simpara>This decorator layer adds distributed caching support for Jakarta Enterprise Beans to the provisioned server.</simpara>
<simpara><emphasis>Dependencies</emphasis>: You can only include this layer if you have included the <literal>ejb-lite</literal> layer or the <literal>ejb</literal> layer.</simpara>
<note>
<simpara>This layer is not compatible with the <literal>ejb-local-cache</literal> layer.  If you include the <literal>ejb-dist-cache</literal> layer, you cannot include the <literal>ejb-local-cache</literal> layer. If you include both layers, the resulting build might result in an unexpected configuration.</simpara>
</note>
<simpara>This layer is only supported when building a bootable JAR.  This layer is not supported when using S2I.</simpara>
<bridgehead xml:id="jdr" renderas="sect4" remap="_jdr">jdr</bridgehead>
<simpara>This decorator layer adds the JBoss Diagnostic Reporting (<literal>jdr</literal>) subsystem to gather diagnostic data when requesting support from Red Hat.</simpara>
<simpara>This layer is only supported when building a bootable JAR.  This layer is not supported when using S2I.</simpara>
<bridgehead xml:id="jakarta_persistence" renderas="sect4" remap="_jakarta_persistence">Jakarta Persistence</bridgehead>
<simpara>This decorator layer adds persistence capabilities for a single-node server. Note that distributed caching only works if the servers are able to form a cluster.</simpara>
<simpara>The layer adds Hibernate libraries to the provisioned server, with the following support:</simpara>
<itemizedlist>
<listitem>
<simpara>Configurations of the <literal>jpa</literal> subsystem</simpara>
</listitem>
<listitem>
<simpara>Configurations of the <literal>infinispan</literal> subsystem</simpara>
</listitem>
<listitem>
<simpara>A local Hibernate cache container</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>This layer is not compatible with the <literal>jpa-distributed</literal> layer. If you include the <literal>jpa</literal> layer, you cannot include the <literal>jpa-distributed</literal> layer.</simpara>
</note>
<simpara>This layer is only supported when building a bootable JAR.  This layer is not supported when using S2I.</simpara>
<bridgehead xml:id="jpa_distributed" renderas="sect4" remap="_jpa_distributed">jpa-distributed</bridgehead>
<simpara>This decorator layer adds persistence capabilities for servers operating in a cluster. The layer adds Hibernate libraries to the provisioned server, with the following support:</simpara>
<itemizedlist>
<listitem>
<simpara>Configurations of the <literal>jpa</literal> subsystem</simpara>
</listitem>
<listitem>
<simpara>Configurations of the <literal>infinispan</literal> subsystem</simpara>
</listitem>
<listitem>
<simpara>A local Hibernate cache container</simpara>
</listitem>
<listitem>
<simpara>Invalidation and replication Hibernate cache containers</simpara>
</listitem>
<listitem>
<simpara>Configuration of the <literal>jgroups</literal> subsystem</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>This layer is not compatible with the <literal>jpa</literal> layer. If you include the <literal>jpa</literal> layer, you cannot include the <literal>jpa-distributed</literal> layer.</simpara>
</note>
<simpara>This layer is only supported when building a bootable JAR.  This layer is not supported when using S2I.</simpara>
<bridgehead xml:id="jakarta_server_faces" renderas="sect4" remap="_jakarta_server_faces">Jakarta Server Faces</bridgehead>
<simpara>This decorator layer adds the <literal>jsf</literal> subsystem to the provisioned server.</simpara>
<simpara>This layer is only supported when building a bootable JAR.  This layer is not supported when using S2I.</simpara>
<bridgehead xml:id="microprofile_platform" renderas="sect4" remap="_microprofile_platform">microprofile-platform</bridgehead>
<simpara>This decorator layer adds the following Eclipse MicroProfile capabilities to the provisioned server:</simpara>
<itemizedlist>
<listitem>
<simpara>MicroProfile Config</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Fault Tolerance</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Health</simpara>
</listitem>
<listitem>
<simpara>MicroProfile JWT</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Metrics</simpara>
</listitem>
<listitem>
<simpara>MicroProfile OpenAPI</simpara>
</listitem>
<listitem>
<simpara>MicroProfile OpenTracing</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>This layer includes MicroProfile capabilities that are also included in the <literal>observability</literal> layer. If you include this layer, you do not need to include the <literal>observability</literal> layer.</simpara>
</note>
<bridgehead xml:id="observability" renderas="sect4" remap="_observability">observability</bridgehead>
<simpara>This decorator layer adds the following observability features to the provisioned server:</simpara>
<itemizedlist>
<listitem>
<simpara>MicroProfile Health</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Metrics</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Config</simpara>
</listitem>
<listitem>
<simpara>MicroProfile OpenTracing</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>This layer is built in to the <literal>cloud-server</literal> layer. You do not need to add this layer to the <literal>cloud-server</literal> layer.</simpara>
</note>
<bridgehead xml:id="remote_activemq" renderas="sect4" remap="_remote_activemq">remote-activemq</bridgehead>
<simpara>This decorator layer adds the ability to communicate with a remote ActiveMQ broker to the provisioned server, integrating messaging support.</simpara>
<simpara>The pooled connection factory configuration specifies <literal>guest</literal> as the value for the <literal>user</literal> and <literal>password</literal> attributes. You can use a CLI script to change these values at runtime.</simpara>
<simpara>This layer is only supported when building a bootable JAR.  This layer is not supported when using S2I.</simpara>
<bridgehead xml:id="sso" renderas="sect4" remap="_sso">sso</bridgehead>
<simpara>This decorator layer adds Red Hat Single Sign-On integration to the provisioned server.</simpara>
<simpara>This layer should only be used when provisioning a server using S2I.</simpara>
<bridgehead xml:id="web_console" renderas="sect4" remap="_web_console">web-console</bridgehead>
<simpara>This decorator layer adds the management console to the provisioned server.</simpara>
<simpara>This layer is only supported when building a bootable JAR.  This layer is not supported when using S2I.</simpara>
<bridgehead xml:id="web_clustering" renderas="sect4" remap="_web_clustering">web-clustering</bridgehead>
<simpara>This layer adds embedded Infinispan-based web session clustering to the provisioned server.</simpara>
<bridgehead xml:id="webservices" renderas="sect4" remap="_webservices">webservices</bridgehead>
<simpara>This layer adds web services functionality to the provisioned server, supporting Jakarta web services deployments.</simpara>
<simpara>This layer is only supported when building a bootable JAR.  This layer is not supported when using S2I.</simpara>
<itemizedlist>
<title>Additional resources</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/configuring_messaging/#pooled_connection_factory_attributes">Pooled Connection Factory Attributes</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
</chapter>
<chapter xml:id="assembly-enable-microprofile-application-development-jboss-eap-codeready-studio_default">
<title>Enable MicroProfile application development for JBoss EAP on Red Hat CodeReady Studio</title>
<simpara>If you want to incorporate MicroProfile capabilities in applications that you develop on CodeReady Studio, you must enable MicroProfile support for JBoss EAP in CodeReady Studio.</simpara>
<simpara>JBoss EAP expansion packs provide support for MicroProfile.</simpara>
<simpara>JBoss EAP expansion packs are not supported on JBoss EAP 7.2 and earlier.</simpara>
<simpara>Each version of the JBoss EAP expansion pack supports specific patches of JBoss EAP. For details, see the JBoss EAP expansion pack Support and Life Cycle Policies page.</simpara>
<important>
<simpara>The JBoss EAP XP Quickstarts for Openshift are provided as Technology Preview only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs), might not be functionally complete, and Red Hat does not recommend to use them for production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.</simpara>
<simpara>See <link xlink:href="https://access.redhat.com/support/offerings/techpreview">Technology Preview Features Support Scope</link> on the Red Hat Customer Portal for information about the support scope for Technology Preview features.</simpara>
</important>
<section xml:id="configure-codeready-studio-microprofile_default">
<title>Configuring CodeReady Studio to use MicroProfile capabilities</title>
<simpara>To enable MicroProfile support on JBoss EAP, register a new runtime server for JBoss EAP XP, and then create the new JBoss EAP 7.4 server.</simpara>
<simpara>Give the server an appropriate name that helps you recognize that it supports MicroProfile capabilities.</simpara>
<simpara>This server uses a newly created JBoss EAP XP runtime that points to the runtime installed previously and uses the <literal>standalone-microprofile.xml</literal> configuration file.</simpara>
<note>
<simpara>If you set the <emphasis role="strong">Target runtime</emphasis> to <emphasis role="strong">7.4</emphasis> or a later runtime version in Red Hat CodeReady Studio, your project is compatible with the Jakarta EE 8 specification.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#installing-jboss-eap-xp-on-eap_default">JBoss EAP XP 3.0.0 has been installed</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Set up the new server on the <literal>New Server</literal> dialog box.</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>In the <emphasis role="strong">Select server type</emphasis> list, select <emphasis>Red Hat JBoss Enterprise Application Platform 7.4</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Server’s host name</emphasis> field, enter <emphasis>localhost</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Server name</emphasis> field, enter <emphasis>JBoss EAP 7.4 XP</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Next</emphasis>.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Configure the new server.</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>In the <emphasis role="strong">Home directory</emphasis> field, if you do not want to use the default setting, specify a new directory; for example: <emphasis>home/myname/dev/microprofile/runtimes/jboss-eap-7.3</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Make sure the <emphasis role="strong">Execution Environment</emphasis> is set to <emphasis>JavaSE-1.8</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Optional: Change the values in the <emphasis role="strong">Server base directory</emphasis> and <emphasis role="strong">Configuration file</emphasis> fields.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Finish</emphasis>.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<formalpara>
<title>Result</title>
<para>You are now ready to begin developing applications using MicroProfile capabilities, or to begin using the MicroProfile quickstarts for JBoss EAP.</para>
</formalpara>
</section>
<section xml:id="use-microprofile-quickstarts_default">
<title>Using MicroProfile quickstarts for CodeReady Studio</title>
<simpara>Enabling the MicroProfile quickstarts makes the simple examples available to run and test on your installed server.</simpara>
<simpara>These examples illustrate the following MicroProfile capabilities.</simpara>
<itemizedlist>
<listitem>
<simpara>MicroProfile Config</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Fault Tolerance</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Health</simpara>
</listitem>
<listitem>
<simpara>MicroProfile JWT</simpara>
</listitem>
<listitem>
<simpara>MicroProfile Metrics</simpara>
</listitem>
<listitem>
<simpara>MicroProfile OpenAPI</simpara>
</listitem>
<listitem>
<simpara>MicroProfile OpenTracing</simpara>
</listitem>
<listitem>
<simpara>MicroProfile REST Client</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Import the <literal>pom.xml</literal> file from the Quickstart Parent Artifact.</simpara>
</listitem>
<listitem>
<simpara>If the quickstart you are using requires environment variables, configure the environment variables.</simpara>
<simpara>Define environment variables on the launch configuration on the server <emphasis role="strong">Overview</emphasis> dialog box.</simpara>
<simpara>For example, the <literal>microprofile-opentracing</literal> quickstart uses the following environment variables:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>JAEGER_REPORTER_LOG_SPANS</literal> set to <literal>true</literal></simpara>
</listitem>
<listitem>
<simpara><literal>JAEGER_SAMPLER_PARAM</literal> set to <literal>1</literal></simpara>
</listitem>
<listitem>
<simpara><literal>JAEGER_SAMPLER_TYPE</literal> set to <literal>const</literal></simpara>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
<formalpara>
<title>Additional resources</title>
<para><link xlink:href="https://projects.eclipse.org/proposals/eclipse-microprofile">About Eclipse Microprofile</link></para>
</formalpara>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_in_jboss_eap/index#about-jboss-eap-xp_default">About JBoss Enterprise Application Platform expansion pack</link></simpara>
<simpara><link xlink:href="https://access.redhat.com/support/policy/updates/jboss_eap_xp_notes">Red Hat JBoss Enterprise Application Platform expansion pack Support and Life Cycle Policies</link></simpara>
</section>
</chapter>
<chapter xml:id="the-bootable-jar_default">
<title>The bootable JAR</title>
<simpara>You can build and package a microservices application as a bootable JAR with the JBoss EAP JAR Maven plug-in. You can then run the application on a JBoss EAP bare-metal platform or a JBoss EAP OpenShift platform.</simpara>
<section xml:id="about-bootable-jar_default">
<title>About the bootable JAR</title>
<simpara role="_abstract">You can build and package a microservices application as a bootable JAR with the JBoss EAP JAR Maven plug-in.</simpara>
<simpara>A bootable JAR contains a server, a packaged application, and the runtime required to launch the server.</simpara>
<simpara>The JBoss EAP JAR Maven plug-in uses Galleon trimming capability to reduce the size and memory footprint of the server. Thus, you can configure the server according to your requirements, including only the Galleon layers that provide the capabilities that you need.</simpara>
<simpara>The JBoss EAP JAR Maven plug-in supports the execution of JBoss EAP CLI script files  to customize your server configuration. A CLI script includes a list of CLI commands for configuring the server.</simpara>
<simpara>A bootable JAR is like a standard JBoss EAP server in the following ways:</simpara>
<itemizedlist>
<listitem>
<simpara>It supports JBoss EAP common management CLI commands.</simpara>
</listitem>
<listitem>
<simpara>It can be managed using the JBoss EAP management console.</simpara>
</listitem>
</itemizedlist>
<simpara>The following limitations exist when packaging a server in a bootable JAR:</simpara>
<itemizedlist>
<listitem>
<simpara>CLI management operations that require a server restart are not supported.</simpara>
</listitem>
<listitem>
<simpara>The server cannot be restarted in admin-only mode, which is a mode that starts services related to server administration.</simpara>
</listitem>
<listitem>
<simpara>If you shut down the server, updates that you applied to the server are lost.</simpara>
</listitem>
</itemizedlist>
<simpara>Additionally, you can provision a hollow bootable JAR. This JAR contains only the server, so you can reuse the server to run a different application.</simpara>
<formalpara role="_additional-resources">
<title>Additional resources</title>
<para>For information about capability trimming, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#capability-trimming_default">Capability Trimming</link>.</para>
</formalpara>
</section>
<section xml:id="jboss-eap-maven-plug-in_default">
<title>JBoss EAP Maven plug-in</title>
<simpara role="_abstract">You can use the JBoss EAP JAR Maven plug-in to build an application as a bootable JAR.</simpara>
<simpara>You can retrieve the latest Maven plug-in version from the Maven repository, which is available at <link xlink:href="https://maven.repository.redhat.com/ga/org/wildfly/plugins/wildfly-jar-maven-plugin/">Index of /ga/org/wildfly/plugins/wildfly-jar-maven-plugin</link>.</simpara>
<simpara>In a Maven project, the <literal>src</literal> directory contains all the source files required to build your application. After the JBoss EAP JAR Maven plug-in builds the bootable JAR, the generated JAR is located in <literal>target/&lt;application&gt;-bootable.jar</literal>.</simpara>
<simpara>The JBoss EAP JAR Maven plug-in also provides the following functionality:</simpara>
<itemizedlist>
<listitem>
<simpara>Applies CLI script commands to the server.</simpara>
</listitem>
<listitem>
<simpara>Uses the <literal>org.jboss.eap:wildfly-galleon-pack</literal> Galleon feature pack and some of its layers for customizing the server configuration file.</simpara>
</listitem>
<listitem>
<simpara>Supports the addition of extra files into the packaged bootable JAR, such as a keystore file.</simpara>
</listitem>
<listitem>
<simpara>Includes the capability to create a hollow bootable JAR; that is, a bootable JAR that does not contain an application.</simpara>
</listitem>
</itemizedlist>
<simpara>After you use the JBoss EAP JAR Maven plug-in to create the bootable JAR, you can start the application by issuing the following command. Replace <literal>target/myapp-bootable.jar</literal> with the path to your bootable JAR. For example:</simpara>
<screen>$ java -jar target/myapp-bootable.jar</screen>
<note>
<simpara>To get a list of supported bootable JAR startup commands, append <literal>--help</literal> to the end of the startup command. For example, <literal>java -jar target/myapp-bootable.jar --help</literal>.</simpara>
</note>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For information about supported JBoss EAP Galleon layers, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#available-jboss-eap-layers_default">Available JBoss EAP layers</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about supported Galleon plug-ins to build feature packs for your project, see the <link xlink:href="https://docs.wildfly.org/galleon-plugins/">WildFly Galleon Maven Plugin Documentation</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about selecting methods to configure the JBoss EAP Maven repository, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/development_guide/#use_the_maven_repository">Use the Maven Repository</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about Maven project directories, see <link xlink:href="https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">Introduction to the Standard Directory Layout</link> in the <emphasis>Apache Maven</emphasis> documentation.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="bootable-jar-arguments_default">
<title>Bootable JAR arguments</title>
<simpara role="_abstract">View the arguments in the following table to learn about supported arguments for use with the bootable JAR.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Supported bootable JAR executable arguments</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="67*"/>
<colspec colname="col_2" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">Argument</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>--help</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Display the help message for the specified command and exit.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>--deployment=&lt;path&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Argument specific to the hollow bootable JAR. Specifies the path to the WAR, JAR, EAR file or exploded directory that contains the application you want to deploy on a server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>--display-galleon-config</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Print the content of the generated Galleon configuration file.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>--install-dir=&lt;path&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara>By default, the JVM settings are used to create a <emphasis>TEMP</emphasis> directory after the bootable JAR is started. You can use the <literal>--install-dir</literal> argument to specify a directory to install the server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>-secmgr</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Runs the server with a security manager installed.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>-b&lt;interface&gt;=&lt;value&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Set system property <literal>jboss.bind.address.&lt;interface&gt;</literal> to the given value. For example, <literal>bmanagement=IP_ADDRESS</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>-b=&lt;value&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Set system property <literal>jboss.bind.address</literal>, which is used in configuring the bind address for the public interface. This defaults to 127.0.0.1 if no value is specified.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>-D&lt;name&gt;[=&lt;value&gt;]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Specifies system properties that are set by the server at server runtime. The bootable JAR JVM does not set these system properties.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>--properties=&lt;url&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Loads system properties from a specified URL.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>-S&lt;name&gt;[=value]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Set a security property.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>-u=&lt;value&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Set system property <literal>jboss.default.multicast.address</literal>, which is used in configuring the multicast address in the socket-binding elements in the configuration files. This defaults to 230.0.0.4 if no value is specified.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>--version</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Display the application server version and exit.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="specifying-galleon-layers-bootable-jar-server_default">
<title>Specifying Galleon layers for your bootable JAR server</title>
<simpara role="_abstract">You can specify Galleon layers to build a custom configuration for your server. Additionally, you can specify Galleon layers that you want excluded from the server.</simpara>
<simpara>To reference a single feature pack, use the <literal>&lt;feature-pack-location&gt;</literal> element to specify its location. The following example specifies <literal>org.jboss.eap:wildfly-galleon-pack:3.0.0.GA-redhat-00001</literal> in the <literal>&lt;feature-pack-location&gt;</literal> element of the Maven plug-in configuration file.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;configuration&gt;
  &lt;feature-pack-location&gt;org.jboss.eap:wildfly-galleon-pack:3.0.0.GA-redhat-00001&lt;/feature-pack-location&gt;
&lt;/configuration&gt;</programlisting>
<simpara>If you need to reference more than one feature pack, list them in the <literal>&lt;feature-packs&gt;</literal> element. The following example shows the addition of the Red Hat Single Sign-On feature pack to the <literal>&lt;feature-packs&gt;</literal> element:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;configuration&gt;
    &lt;feature-packs&gt;
         &lt;feature-pack&gt;
             &lt;location&gt;org.jboss.eap:wildfly-galleon-pack:3.0.0.GA-redhat-00001&lt;/location&gt;
        &lt;/feature-pack&gt;
        &lt;feature-pack&gt;
            &lt;location&gt;org.jboss.sso:keycloak-adapter-galleon-pack:9.0.10.redhat-00001&lt;/location&gt;
        &lt;/feature-pack&gt;
    &lt;/feature-packs&gt;
&lt;/configuration&gt;</programlisting>
<simpara>You can combine Galleon layers from multiple feature packs to configure the bootable JAR server to include only the supported Galleon layers that provide the capabilities that you need.</simpara>
<note>
<simpara>On a bare-metal platform, if you do not specify Galleon layers in your configuration file then the provisioned server contains a configuration identical to that of a default <literal>standalone-microprofile.xml</literal> configuration.</simpara>
<simpara>On an OpenShift platform, after you have added the <literal>&lt;cloud/&gt;</literal> configuration element in the plug-in configuration and you choose not to specify Galleon layers in your configuration file, the provisioned server contains a configuration that is adjusted for the cloud environment and is similar to a default  <literal>standalone-microprofile-ha.xml</literal>.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Maven is installed.</simpara>
</listitem>
<listitem>
<simpara>You have checked the latest Maven plug-in version, such as <literal><emphasis>MAVEN_PLUGIN_VERSION</emphasis>.X.GA.Final-redhat-00001</literal>, where <emphasis>MAVEN_PLUGIN_VERSION</emphasis> is the major version and  <emphasis>X</emphasis> is the microversion. See <link xlink:href="https://maven.repository.redhat.com/ga/org/wildfly/plugins/wildfly-jar-maven-plugin/">Index of /ga/org/wildfly/plugins/wildfly-jar-maven-plugin</link>.</simpara>
</listitem>
<listitem>
<simpara>You have checked the latest Galleon feature pack version, such as <literal>3.0.X.GA-redhat-<emphasis>BUILD_NUMBER</emphasis></literal>, where  <emphasis>X</emphasis> is the microversion of JBoss EAP XP 2 and <emphasis>BUILD_NUMBER</emphasis> is the build number of the Galleon feature pack. Both <emphasis>X</emphasis> and <emphasis>BUILD_NUMBER</emphasis> can evolve during the JBoss EAP XP 3.0.0 product life cycle. See <link xlink:href="https://maven.repository.redhat.com/ga/org/jboss/eap/wildfly-galleon-pack/">Index of /ga/org/jboss/eap/wildfly-galleon-pack</link>.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>The examples shown in the procedure specify the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>${bootable.jar.maven.plugin.version}</literal> for the Maven plug-in version.</simpara>
</listitem>
<listitem>
<simpara><literal>${jboss.xp.galleon.feature.pack.version}</literal> for the Galleon feature pack version.</simpara>
</listitem>
</itemizedlist>
<simpara>You must set these properties in your project. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;properties&gt;
    &lt;bootable.jar.maven.plugin.version&gt;4.0.3.Final-redhat-00001&lt;/bootable.jar.maven.plugin.version&gt;
    &lt;jboss.xp.galleon.feature.pack.version&gt;3.0.0.GA-redhat-00001&lt;/jboss.xp.galleon.feature.pack.version&gt;
&lt;/properties&gt;</programlisting>
</note>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Identify the supported JBoss EAP Galleon layers that provide the capabilities that you need to run your application.</simpara>
</listitem>
<listitem>
<simpara>Reference a JBoss EAP feature pack location in the <literal>&lt;plugin&gt;</literal> element of the Maven project <literal>pom.xml</literal> file. You must specify the latest version of any Maven plug-in and the latest version of the <literal>org.jboss.eap:wildfly-galleon-pack</literal> Galleon feature pack, as demonstrated in the following example. The following example also displays the inclusion of a single feature-pack, which includes the <literal>jaxrs-server</literal> base layer and the <literal>jpa-distributed</literal> layer . The <literal>jaxrs-server</literal> base layer provides additional support for the server.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugins&gt;
      &lt;plugin&gt;
            &lt;groupId&gt;org.wildfly.plugins&lt;/groupId&gt;
             &lt;artifactId&gt;wildfly-jar-maven-plugin&lt;/artifactId&gt;
             &lt;version&gt;${bootable.jar.maven.plugin.version}&lt;/version&gt;
            &lt;configuration&gt;
                 &lt;feature-pack-location&gt;org.jboss.eap:wildfly-galleon-pack:${jboss.xp.galleon.feature.pack.version}&lt;/feature-pack-location&gt;
                 &lt;layers&gt;
                     &lt;layer&gt;jaxrs-server&lt;/layer&gt;
                     &lt;layer&gt;jpa-distributed&lt;/layer&gt;
                 &lt;/layers&gt;
                 &lt;excluded-layers&gt;
                     &lt;layer&gt;jpa&lt;/layer&gt;
                 &lt;/excluded-layers&gt;
                 ...
&lt;/plugins&gt;</programlisting>
<simpara>This example also shows the exclusion of the <literal>jpa</literal> layer from the project.</simpara>
<note>
<simpara>If you include the <literal>jpa-distributed</literal> layer in your project, you must exclude the <literal>jpa</literal> layer from the <literal>jaxrs-server</literal> layer.  The <literal>jpa</literal> layer configures a local infinispan hibernate cache, while the <literal>jpa-distributed</literal> layer  configures a remote infinispan hibernate cache.</simpara>
</note>
</listitem>
</orderedlist>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For information about available base layers, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#base-provisioning-layers_default">Base layers</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about supported Galleon plug-ins to build feature packs for your project, see the <link xlink:href="https://docs.wildfly.org/galleon-plugins/">WildFly Galleon Maven Plugin Documentation</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about selecting methods to configure the JBoss EAP Maven repository, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#maven_and_the_jboss_eap_eclipse_microprofile_maven_repository">Maven and the JBoss EAP Eclipse MicroProfile Maven repository</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about managing your Maven dependencies, see <link xlink:href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#dependency-management">Dependency Management</link> in the <emphasis>Apache Maven Project</emphasis> documentation.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="using-bootable-jar-jboss-eap-bare-metal-platform_default">
<title>Using a bootable JAR on a JBoss EAP bare-metal platform</title>
<simpara role="_abstract">You can package an application as a bootable JAR on a JBoss EAP bare-metal platform.</simpara>
<simpara>A bootable JAR contains a server, a packaged application, and the runtime required to launch the server.</simpara>
<simpara>This procedure demonstrates packaging the MicroProfile Config microservices application as a bootable JAR with the JBoss EAP JAR Maven plug-in. See <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#eclipse_microprofile_config_development">MicroProfile Config development</link>.</simpara>
<simpara>You can use CLI scripts to configure the server during the packaging of the bootable JAR.</simpara>
<important>
<simpara>On building a web application that must be packaged inside a bootable JAR, you must specify <literal>war</literal> in the <literal>&lt;packaging&gt;</literal> element of your <literal>pom.xml</literal> file.  For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;packaging&gt;war&lt;/packaging&gt;</programlisting>
<simpara>This value is required to package the build application as a WAR file and not as the default JAR file.</simpara>
<simpara>In a Maven project that is used solely to build a hollow bootable JAR, set the packaging value to  <literal>pom</literal>. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;packaging&gt;pom&lt;/packaging&gt;</programlisting>
<simpara>You are not limited to using <literal>pom</literal> packaging when you build a hollow bootable JAR for a Maven project. You can create one by specifying <literal>true</literal> in the <literal>&lt;hollow-jar&gt;</literal> element for any type of packaging, such as <literal>war</literal>. See <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#creating-hollow-bootable-jar-jboss-eap-bare-metal-platform_default">Creating a hollow bootable JAR on a JBoss EAP bare-metal platform</link>.</simpara>
</important>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have checked the latest Maven plug-in version, such as <literal><emphasis>MAVEN_PLUGIN_VERSION</emphasis>.X.GA.Final-redhat-00001</literal>, where <emphasis>MAVEN_PLUGIN_VERSION</emphasis> is the major version and  <emphasis>X</emphasis> is the microversion. See <link xlink:href="https://maven.repository.redhat.com/ga/org/wildfly/plugins/wildfly-jar-maven-plugin/">Index of /ga/org/wildfly/plugins/wildfly-jar-maven-plugin</link>.</simpara>
</listitem>
<listitem>
<simpara>You have checked the latest Galleon feature pack version, such as <literal>3.0.X.GA-redhat-<emphasis>BUILD_NUMBER</emphasis></literal>, where  <emphasis>X</emphasis> is the microversion of JBoss EAP XP 2 and <emphasis>BUILD_NUMBER</emphasis> is the build number of the Galleon feature pack. Both <emphasis>X</emphasis> and <emphasis>BUILD_NUMBER</emphasis> can evolve during the JBoss EAP XP 3.0.0 product life cycle. See <link xlink:href="https://maven.repository.redhat.com/ga/org/jboss/eap/wildfly-galleon-pack/">Index of /ga/org/jboss/eap/wildfly-galleon-pack</link>.</simpara>
</listitem>
<listitem>
<simpara>You have created a Maven project, set up a parent dependency, and added dependencies for creating an MicroProfile application. See <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#eclipse_microprofile_config_development">MicroProfile Config development</link>.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>The examples shown in the procedure specify the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>${bootable.jar.maven.plugin.version}</literal> for the Maven plug-in version.</simpara>
</listitem>
<listitem>
<simpara><literal>${jboss.xp.galleon.feature.pack.version}</literal> for the Galleon feature pack version.</simpara>
</listitem>
</itemizedlist>
<simpara>You must set these properties in your project. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;properties&gt;
    &lt;bootable.jar.maven.plugin.version&gt;4.0.3.Final-redhat-00001&lt;/bootable.jar.maven.plugin.version&gt;
    &lt;jboss.xp.galleon.feature.pack.version&gt;3.0.0.GA-redhat-00001&lt;/jboss.xp.galleon.feature.pack.version&gt;
&lt;/properties&gt;</programlisting>
</note>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the following content to the <literal>&lt;build&gt;</literal> element of the <literal>pom.xml</literal> file. You must specify the latest version of any Maven plug-in and the latest version of the <literal>org.jboss.eap:wildfly-galleon-pack</literal> Galleon feature pack. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugins&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.wildfly.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;wildfly-jar-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${bootable.jar.maven.plugin.version}&lt;/version&gt;
        &lt;configuration&gt;
             &lt;feature-pack-location&gt;org.jboss.eap:wildfly-galleon-pack:${jboss.xp.galleon.feature.pack.version}&lt;/feature-pack-location&gt;
            &lt;layers&gt;
                &lt;layer&gt;jaxrs-server&lt;/layer&gt;
                &lt;layer&gt;microprofile-platform&lt;/layer&gt;
            &lt;/layers&gt;
         &lt;/configuration&gt;
        &lt;executions&gt;
            &lt;execution&gt;
                &lt;goals&gt;
                    &lt;goal&gt;package&lt;/goal&gt;
                &lt;/goals&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;</programlisting>
<note>
<simpara>If you do not specify Galleon layers in your <literal>pom.xml</literal> file then the bootable JAR server contains a configuration that is identical to a <literal>standalone-microprofile.xml</literal> configuration.</simpara>
</note>
</listitem>
<listitem>
<simpara>Package the application as a bootable JAR:</simpara>
<screen>$ mvn package</screen>
</listitem>
<listitem>
<simpara>Start the application:</simpara>
<programlisting language="java" linenumbering="unnumbered">$ NAME="foo" java -jar target/microprofile-config-bootable.jar</programlisting>
<note>
<simpara>The example uses <literal>NAME</literal> as the environment variable, but you can choose to use <literal>jim</literal>, which is the default value.</simpara>
</note>
<note>
<simpara>To view a list of supported bootable JAR arguments, append <literal>--help</literal> to the end of the <literal>java -jar target/microprofile-config-bootable.jar</literal> command.</simpara>
</note>
</listitem>
<listitem>
<simpara>Specify the following URL in your web browser to access the MicroProfile Config application:</simpara>
<programlisting language="java" linenumbering="unnumbered">http://localhost:8080/config/json</programlisting>
</listitem>
<listitem>
<simpara><emphasis>Verification:</emphasis> Test the application behaves properly by issuing the following command in your terminal:</simpara>
<programlisting language="java" linenumbering="unnumbered">curl http://localhost:8080/config/json</programlisting>
<simpara>The following is the expected output:</simpara>
<programlisting language="java" linenumbering="unnumbered">{"result":"Hello foo"}</programlisting>
</listitem>
</orderedlist>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For information about available MicroProfile Config functionality, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#eclipse_microprofile_config">MicroProfile Config</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about <literal>ConfigSources</literal>, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#eclipse_microprofile_config_reference">Eclipse MicroProfile Config reference</link>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="creating-hollow-bootable-jar-jboss-eap-bare-metal-platform_default">
<title>Creating a hollow bootable JAR on a JBoss EAP bare-metal platform</title>
<simpara role="_abstract">You can package an application as a hollow bootable JAR on a JBoss EAP bare-metal platform.</simpara>
<simpara>A hollow bootable JAR contains only the JBoss EAP server. The hollow bootable JAR is packaged by the JBoss EAP JAR Maven plug-in. The application is provided at server runtime. The hollow bootable JAR is useful if you need to re-use the server configuration for a different application.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have created a Maven project, set up a parent dependency, and added dependencies for creating an application. See <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#eclipse_microprofile_config_development">MicroProfile Config development</link>.</simpara>
</listitem>
<listitem>
<simpara>You have completed the <literal>pom.xml</literal> file configuration steps outlined in <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#using-bootable-jar-jboss-eap-bare-metal-platform_default">Using a bootable JAR on a JBoss EAP bare-metal platform</link>.</simpara>
</listitem>
<listitem>
<simpara>You have checked the latest Maven plug-in version, such as <literal><emphasis>MAVEN_PLUGIN_VERSION</emphasis>.X.GA.Final-redhat-00001</literal>, where <emphasis>MAVEN_PLUGIN_VERSION</emphasis> is the major version and  <emphasis>X</emphasis> is the microversion. See <link xlink:href="https://maven.repository.redhat.com/ga/org/wildfly/plugins/wildfly-jar-maven-plugin/">Index of /ga/org/wildfly/plugins/wildfly-jar-maven-plugin</link>.</simpara>
</listitem>
<listitem>
<simpara>You have checked the latest Galleon feature pack version, such as <literal>3.0.X.GA-redhat-<emphasis>BUILD_NUMBER</emphasis></literal>, where  <emphasis>X</emphasis> is the microversion of JBoss EAP XP 2 and <emphasis>BUILD_NUMBER</emphasis> is the build number of the Galleon feature pack. Both <emphasis>X</emphasis> and <emphasis>BUILD_NUMBER</emphasis> can evolve during the JBoss EAP XP 3.0.0 product life cycle. See <link xlink:href="https://maven.repository.redhat.com/ga/org/jboss/eap/wildfly-galleon-pack/">Index of /ga/org/jboss/eap/wildfly-galleon-pack</link>.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>The example shown in the procedure specifies <literal>${jboss.xp.galleon.feature.pack.version}</literal> for the Galleon feature pack version, but you must set the property in your project. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;properties&gt;
    &lt;jboss.xp.galleon.feature.pack.version&gt;3.0.0.GA-redhat-00001&lt;/jboss.xp.galleon.feature.pack.version&gt;
&lt;/properties&gt;</programlisting>
</note>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>To build a hollow bootable JAR, you must set the <literal>&lt;hollow-jar&gt;</literal> plug-in configuration element to true in the project <literal>pom.xml</literal> file. For example:</simpara>
</listitem>
</orderedlist>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugins&gt;
        &lt;plugin&gt;
            ...
            &lt;configuration&gt;
                &lt;!-- This example configuration does not show a complete plug-in configuration --&gt;
                 ...
                &lt;feature-pack-location&gt;org.jboss.eap:wildfly-galleon-pack:${jboss.xp.galleon.feature.pack.version}&lt;/feature-pack-location&gt;
                 &lt;hollow-jar&gt;true&lt;/hollow-jar&gt;
            &lt;/configuration&gt;
         &lt;/plugin&gt;
&lt;/plugins&gt;</programlisting>
<note>
<simpara>By specifying <literal>true</literal> in the <literal>&lt;hollow-jar&gt;</literal> element, the JBoss EAP JAR Maven plug-in does not include an application in the JAR.</simpara>
</note>
<orderedlist numeration="arabic">
<listitem>
<simpara>Build the hollow bootable JAR:</simpara>
<screen>$ mvn clean package</screen>
</listitem>
<listitem>
<simpara>Run the hollow bootable JAR:</simpara>
<screen>$ java -jar target/microprofile-config-bootable.jar --deployment=target/microprofile-config.war</screen>
<important>
<simpara>To specify the path to the WAR file that you want to deploy on the server, use the following argument, where <literal>&lt;PATH_NAME&gt;</literal> is the path to your deployment.</simpara>
<programlisting language="java" linenumbering="unnumbered">--deployment=&lt;PATH_NAME&gt;</programlisting>
</important>
</listitem>
<listitem>
<simpara>Access the application:</simpara>
<screen>$ curl http://localhost:8080/microprofile-config/config/json</screen>
<note>
<simpara>To register your web application in the root directory, name the application <literal>ROOT.war</literal>.</simpara>
</note>
</listitem>
</orderedlist>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For information about available MicroProfile functionality, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#eclipse_microprofile_config">MicroProfile Config</link>.</simpara>
</listitem>
<listitem>
<simpara>For more information about the JBoss EAP JAR Maven plug-in supported in JBoss EAP XP 3.0.0, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#jboss-eap-maven-plug-in_default">JBoss EAP Maven plug-in.</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="cli-scripts_default">
<title>CLI scripts</title>
<simpara role="_abstract">You can create CLI scripts to configure the server during the packaging of the bootable JAR.</simpara>
<simpara>A CLI script is a text file that contains a sequence of CLI commands that you can use to apply additional server configurations.  For example, you can create a script to add a new logger to the <literal>logging</literal> subsystem.</simpara>
<simpara>You can also specify more complex operations in a CLI script. For example, you can group security management operations into a single command to enable HTTP authentication for the management HTTP endpoint.</simpara>
<note>
<simpara>You must define CLI scripts in the <literal>&lt;cli-session&gt;</literal> element of the plug-in configuration before you package an application as a bootable JAR. This ensures the server configuration settings persist after packaging the bootable JAR.</simpara>
</note>
<simpara>Although you can combine predefined Galleon layers to configure a server that deploys your application, limitations do exist. For example, you cannot enable the HTTPS <literal>undertow</literal> listener using Galleon layers when packaging the bootable JAR. Instead, you must use a CLI script.</simpara>
<simpara>You must define the CLI scripts in the <literal>&lt;cli-session&gt;</literal> element of the <literal>pom.xml</literal> file. The following table shows types of CLI session attributes:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>CLI script attributes</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="67*"/>
<colspec colname="col_2" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">Argument</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>script-files</literal></simpara></entry>
<entry align="left" valign="top"><simpara>List of paths to script files.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>properties-file</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional attribute that specifies a path to a properties file. This file lists Java properties that scripts can reference by using the <literal>${my.prop}</literal> syntax. The following example sets <literal>public inet-address</literal> to the value of <literal>all.addresses</literal>: <literal>/interface=public:write-attribute(name=inet-address,value=${all.addresses})</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>resolve-expressions</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Optional attribute that contains a boolean value. Indicates if system properties or
expressions are resolved before sending the operation requests to the server. Value is <literal>true</literal> by default.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<itemizedlist>
<listitem>
<simpara>CLI scripts are started in the order that they are defined in the <literal>&lt;cli-session&gt;</literal> element of the <literal>pom.xml</literal> file.</simpara>
</listitem>
<listitem>
<simpara>The JBoss EAP JAR Maven plug-in starts the embedded server for each CLI session. Thus, your CLI script does not have to start or stop the embedded server.</simpara>
</listitem>
</itemizedlist>
</note>
</section>
<section xml:id="using-bootable-jar-jboss-eap-openshift-platform_default">
<title>Using a bootable JAR on a JBoss EAP OpenShift platform</title>
<simpara role="_abstract">After you packaged an application as a bootable JAR, you can run the application on a JBoss EAP OpenShift platform.</simpara>
<important>
<simpara>On OpenShift, you cannot use the EAP Operator automated transaction recovery feature with your bootable JAR. A fix for this technical limitation is planned for a future JBoss EAP XP 3.0.0 patch release.</simpara>
</important>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have created a Maven project for <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#eclipse_microprofile_config_development">Eclipse MicroProfile Config development</link>.</simpara>
</listitem>
<listitem>
<simpara>You have checked the latest Maven plug-in version, such as <literal><emphasis>MAVEN_PLUGIN_VERSION</emphasis>.X.GA.Final-redhat-00001</literal>, where <emphasis>MAVEN_PLUGIN_VERSION</emphasis> is the major version and  <emphasis>X</emphasis> is the microversion. See <link xlink:href="https://maven.repository.redhat.com/ga/org/wildfly/plugins/wildfly-jar-maven-plugin/">Index of /ga/org/wildfly/plugins/wildfly-jar-maven-plugin</link>.</simpara>
</listitem>
<listitem>
<simpara>You have checked the latest Galleon feature pack version, such as <literal>3.0.X.GA-redhat-<emphasis>BUILD_NUMBER</emphasis></literal>, where  <emphasis>X</emphasis> is the microversion of JBoss EAP XP 2 and <emphasis>BUILD_NUMBER</emphasis> is the build number of the Galleon feature pack. Both <emphasis>X</emphasis> and <emphasis>BUILD_NUMBER</emphasis> can evolve during the JBoss EAP XP 3.0.0 product life cycle. See <link xlink:href="https://maven.repository.redhat.com/ga/org/jboss/eap/wildfly-galleon-pack/">Index of /ga/org/jboss/eap/wildfly-galleon-pack</link>.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>The examples shown in the procedure specify the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>${bootable.jar.maven.plugin.version}</literal> for the Maven plug-in version.</simpara>
</listitem>
<listitem>
<simpara><literal>${jboss.xp.galleon.feature.pack.version}</literal> for the Galleon feature pack version.</simpara>
</listitem>
</itemizedlist>
<simpara>You must set these properties in your project. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;properties&gt;
    &lt;bootable.jar.maven.plugin.version&gt;4.0.3.Final-redhat-00001&lt;/bootable.jar.maven.plugin.version&gt;
    &lt;jboss.xp.galleon.feature.pack.version&gt;3.0.0.GA-redhat-00001&lt;/jboss.xp.galleon.feature.pack.version&gt;
&lt;/properties&gt;</programlisting>
</note>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the following content to the <literal>&lt;build&gt;</literal> element of the <literal>pom.xml</literal> file. You must specify the latest version of any Maven plug-in and the latest version of the <literal>org.jboss.eap:wildfly-galleon-pack</literal> Galleon feature pack. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugins&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.wildfly.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;wildfly-jar-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${bootable.jar.maven.plugin.version}&lt;/version&gt;
        &lt;configuration&gt;
            &lt;feature-pack-location&gt;org.jboss.eap:wildfly-galleon-pack:${jboss.xp.galleon.feature.pack.version}&lt;/feature-pack-location&gt;
            &lt;layers&gt;
                &lt;layer&gt;jaxrs-server&lt;/layer&gt;
                &lt;layer&gt;microprofile-platform&lt;/layer&gt;
            &lt;/layers&gt;
            &lt;cloud/&gt;
            &lt;/configuration&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;package&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;</programlisting>
<note>
<simpara>You must include the <literal>&lt;cloud/&gt;</literal> element in the <literal>&lt;configuration&gt;</literal> element of the plug-in configuration, so the JBoss EAP Maven JAR plug-in can identify that you choose the OpenShift platform.</simpara>
</note>
</listitem>
<listitem>
<simpara>Package the application:</simpara>
<screen>$ mvn package</screen>
</listitem>
<listitem>
<simpara>Log in to your OpenShift instance using the <literal>oc login</literal> command.</simpara>
</listitem>
<listitem>
<simpara>Create a new project in OpenShift. For example:</simpara>
<screen>$ oc new-project bootable-jar-project</screen>
</listitem>
<listitem>
<simpara>Enter the following <literal>oc</literal> commands to create an application image:</simpara>
<screen>$ mkdir target/openshift &amp;&amp; cp target/microprofile-config-bootable.jar target/openshift  <co xml:id="CO5-1"/>

$ oc import-image ubi8/openjdk-11 --from=registry.redhat.io/ubi8/openjdk-11 --confirm <co xml:id="CO5-2"/>

$ oc new-build --strategy source --binary --image-stream openjdk-11 --name microprofile-config-app <co xml:id="CO5-3"/>

$ oc start-build microprofile-config-app --from-dir target/openshift <co xml:id="CO5-4"/></screen>
<calloutlist>
<callout arearefs="CO5-1">
<para>Creates an openshift sub-directory in the target directory. The packaged application is copied into the created sub-directory.</para>
</callout>
<callout arearefs="CO5-2">
<para>Imports the latest OpenJDK 11 imagestream tag and image information into the OpenShift project.</para>
</callout>
<callout arearefs="CO5-3">
<para>Creates a build configuration based on the microprofile-config-app directory and the OpenJDK 11 imagestream.</para>
</callout>
<callout arearefs="CO5-4">
<para>Uses the <literal>target/openshift</literal> sub-directory as the binary input to build the application.</para>
</callout>
</calloutlist>
<note>
<simpara>OpenShift applies a set of CLI script commands to the bootable JAR configuration file to adjust it to the cloud environment. You can access this script by opening the <literal>bootable-jar-build-artifacts/generated-cli-script.txt</literal> file in the Maven project <literal>/target directory</literal>.</simpara>
</note>
</listitem>
<listitem>
<simpara><emphasis>Verification:</emphasis></simpara>
<simpara>View a list of OpenShift pods available and check the pods build statuses by issuing the following command:</simpara>
<screen>$ oc get pods</screen>
<simpara>Verify the built application image:</simpara>
<screen>$ oc get is microprofile-config-app</screen>
<simpara>The output shows the built application image details, such as name and image repository, tag, and so on. For the example in this procedure, the imagestream name and tag output displays <literal>microprofile-config-app:latest</literal>.</simpara>
</listitem>
<listitem>
<simpara>Deploy the application:</simpara>
<screen>$ oc new-app microprofile-config-app

$ oc expose svc/microprofile-config-app</screen>
<important>
<simpara>To provide system properties to the bootable JAR, you must use the <literal>JAVA_OPTS_APPEND</literal> environment variable. The following example demonstrates usage of the <literal>JAVA_OPTS_APPEND</literal> environment variable:</simpara>
<screen>$ oc new-app &lt;_IMAGESTREAM_&gt; -e JAVA_OPTS_APPEND="-Xlog:gc*:file=/tmp/gc.log:time -Dwildfly.statistics-enabled=true"</screen>
</important>
<simpara>A new application is created and started. The application configuration is exposed as a new service.</simpara>
</listitem>
<listitem>
<simpara><emphasis>Verification</emphasis>: Test the application behaves properly by issuing the following command in your terminal:</simpara>
<screen>$ curl http://$(oc get route microprofile-config-app --template='{{ .spec.host }}')/config/json</screen>
<simpara>Expected output:</simpara>
<screen>{"result":"Hello jim"}</screen>
</listitem>
</orderedlist>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For information about Eclipse MicroProfile, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#eclipse_microprofile_config">MicroProfile Config</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about <literal>ConfigSources</literal>, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#microprofile-default-config-attributes_default">Default Eclipse MicroProfile Config attributes</link>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="configure-bootable-jar-openshift_default">
<title>Configure the bootable JAR for OpenShift</title>
<simpara role="_abstract">Before using your bootable JAR, you can configure JVM settings to ensure that your standalone server operates correctly on JBoss EAP for OpenShift.</simpara>
<simpara>Use the <literal>JAVA_OPTS_APPEND</literal> environment variable to configure JVM settings. Use the <literal>JAVA_ARGS</literal> command to provide arguments to the bootable JAR.</simpara>
<simpara>You can use environment variables to set values for properties. For example, you can use the <literal>JAVA_OPTS_APPEND</literal> environment variable to set the <literal>-Dwildfly.statistics-enabled</literal> property to <literal>true</literal>:</simpara>
<screen>JAVA_OPTS_APPEND="-Xlog:gc*:file=/tmp/gc.log:time -Dwildfly.statistics-enabled=true"</screen>
<simpara>Statistics are now enabled for your server.</simpara>
<note>
<simpara>Use the <literal>JAVA_ARGS</literal> environment variable, if you need to provide arguments to the bootable JAR.</simpara>
</note>
<simpara>JBoss EAP for OpenShift provides a JDK 11 image. To run the application associated with your bootable JAR, you must first import the latest OpenJDK 11 imagestream tag and image information into your OpenShift project. You can then use environment variables to configure the JVM in the imported image.</simpara>
<simpara>You can apply the same configuration options for configuring the JVM used for JBoss EAP  for OpenShift S2I image, but with the following differences:</simpara>
<itemizedlist>
<listitem>
<simpara>Optional: The <literal>-Xlog</literal> capability is not available, but you can set garbage collection logging by enabling <literal>-Xlog:gc</literal>. For example: <literal>JAVA_OPTS_APPEND="-Xlog:gc*:file=/tmp/gc.log:time"</literal>.</simpara>
</listitem>
<listitem>
<simpara>To increase initial metaspace size, you can set the <literal>GC_METASPACE_SIZE</literal> environment variable. For best metadata capacity performance, set the value to <literal>96</literal>.</simpara>
</listitem>
<listitem>
<simpara>The default value for <literal>GC_MAX_METASPACE_SIZE</literal> is set as <literal>100</literal>, but for best metadata capacity after a garbage collection, you must set it to at least <literal>256</literal>.</simpara>
</listitem>
<listitem>
<simpara>For better random file generation, use the <literal>JAVA_OPTS_APPEND</literal> environment variable to set  <literal>java.security.egd</literal> property as <literal>-Djava.security.egd=file:/dev/urandom</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>These configurations improve the memory settings and garbage collection capability of JVM when running on your imported OpenJDK 11 image.</simpara>
</section>
<section xml:id="using-configmap-openshift">
<title>Using a ConfigMap in your application on OpenShift</title>
<simpara role="_abstract">For OpenShift, you can use a deployment controller (dc) to mount the configmap into the pods used to run the application.</simpara>
<simpara>A <literal>ConfigMap</literal> is an OpenShift resource that is used to store non-confidential data in key-value pairs.</simpara>
<simpara>After you specify the <literal>microprofile-platform</literal> Galleon layer to add <literal>microprofile-config-smallrye</literal> subsystem and any extensions to the server configuration file, you can use a CLI script to add a new <literal>ConfigSource</literal> to the server configuration. You can save CLI scripts in an accessible directory, such as the <literal>/scripts</literal> directory, in the root directory of your Maven project.</simpara>
<simpara>MicroProfile Config functionality is implemented in JBoss EAP using the SmallRye Config component and is provided by the <literal>microprofile-config-smallrye</literal> subsystem. This subsystem is included in the <literal>microprofile-platform</literal> Galleon layer.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have installed Maven.</simpara>
</listitem>
<listitem>
<simpara>You have configured the JBoss EAP Maven repository.</simpara>
</listitem>
<listitem>
<simpara>You have packaged an application as a bootable JAR and you can run the application on a JBoss EAP OpenShift platform. For information about building an application as a bootable JAR on an OpenShift platform, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#using-bootable-jar-jboss-eap-openshift-platform_default">Using a bootable JAR on a JBoss EAP OpenShift platform</link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a directory named <literal>scripts</literal> at the root directory of your project. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">$ mkdir scripts</programlisting>
</listitem>
<listitem>
<simpara>Create a <literal>cli.properties</literal> file and save the file in the <literal>/scripts</literal> directory. Define the <literal>config.path</literal> and the <literal>config.ordinal</literal> system properties in this file. For example:</simpara>
<screen>config.path=/etc/config
config.ordinal=200</screen>
</listitem>
<listitem>
<simpara>Create a CLI script, such as <literal>mp-config.cli</literal>, and save it in an accessible directory in the bootable JAR, such as the <literal>/scripts</literal> directory. The following example shows the contents of the <literal>mp-config.cli</literal> script:</simpara>
<screen># config map

/subsystem=microprofile-config-smallrye/config-source=os-map:add(dir={path=${config.path}}, ordinal=${config.ordinal})</screen>
<simpara>The <literal>mp-config.cli</literal> CLI script creates a new <literal>ConfigSource</literal>, to which ordinal and path values are retrieved from a properties file.</simpara>
</listitem>
<listitem>
<simpara>Save the script in the <literal>/scripts</literal> directory, which is located at the root directory of the project.</simpara>
</listitem>
<listitem>
<simpara>Add the following configuration extract to the existing plug-in <literal>&lt;configuration&gt;</literal> element:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;cli-sessions&gt;
    &lt;cli-session&gt;
        &lt;properties-file&gt;
            scripts/cli.properties
        &lt;/properties-file&gt;
        &lt;script-files&gt;
            &lt;script&gt;scripts/mp-config.cli&lt;/script&gt;
        &lt;/script-files&gt;
    &lt;/cli-session&gt;
&lt;/cli-sessions&gt;</programlisting>
</listitem>
<listitem>
<simpara>Package the application:</simpara>
<screen>$ mvn package</screen>
</listitem>
<listitem>
<simpara>Log in to your OpenShift instance using the <literal>oc login</literal> command.</simpara>
</listitem>
<listitem>
<simpara><emphasis>Optional:</emphasis> If you have not previously created a <literal>target/openshift</literal> subdirectory, you must create the suddirectory by issuing the following command:</simpara>
<screen>$ mkdir target/openshift</screen>
</listitem>
<listitem>
<simpara>Copy the packaged application into the created subdirectory.</simpara>
<screen>$ cp target/microprofile-config-bootable.jar target/openshift</screen>
</listitem>
<listitem>
<simpara>Use the <literal>target/openshift</literal> subdirectory as the binary input to build the application:</simpara>
<screen>$ oc start-build microprofile-config-app --from-dir target/openshift</screen>
<note>
<simpara>OpenShift applies a set of CLI script commands to the bootable JAR configuration file to enable it for the cloud environment. You can access this script by opening the <literal>bootable-jar-build-artifacts/generated-cli-script.txt</literal> file in the Maven project <literal>/target</literal> directory.</simpara>
</note>
</listitem>
<listitem>
<simpara>Create a <literal>ConfigMap</literal>. For example:</simpara>
<screen>$ oc create configmap microprofile-config-map --from-literal=name="Name comes from Openshift ConfigMap"</screen>
</listitem>
<listitem>
<simpara>Mount the <literal>ConfigMap</literal> into the application with the dc. For example:</simpara>
<screen>$ oc set volume deployments/microprofile-config-app --add --name=config-volume \
--mount-path=/etc/config \
--type=configmap \
--configmap-name=microprofile-config-map</screen>
<simpara>After executing the <literal>oc set volume</literal> command, the application is re-deployed with the new configuration settings.</simpara>
</listitem>
<listitem>
<simpara>Test the output:</simpara>
<programlisting language="java" linenumbering="unnumbered">$ curl http://$(oc get route microprofile-config-app --template='{{ .spec.host }}')/config/json</programlisting>
<simpara>The following is the expected output:</simpara>
<programlisting language="java" linenumbering="unnumbered">{"result":"Hello Name comes from Openshift ConfigMap"}</programlisting>
</listitem>
</orderedlist>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For information about Eclipse MicroProfile Config <literal>ConfigSources</literal> attributes, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#microprofile-default-config-attributes_default">Default MicroProfile Config attributes</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about bootable JAR arguments, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#bootable-jar-arguments_default">Supported bootable JAR arguments</link>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="creating-bootable-jar-maven-project_default">
<title>Creating a bootable JAR Maven project</title>
<simpara role="_abstract">Follow the steps in the procedure to create an example Maven project. You must create a Maven project before you can perform the following procedures:</simpara>
<itemizedlist>
<listitem>
<simpara>Enabling JSON logging for your bootable JAR</simpara>
</listitem>
<listitem>
<simpara>Enabling web session data storage for multiple bootable JAR instances</simpara>
</listitem>
<listitem>
<simpara>Enabling HTTP authentication for bootable JAR with a CLI script</simpara>
</listitem>
<listitem>
<simpara>Securing your JBoss EAP bootable JAR application with Red Hat Single Sign-On</simpara>
</listitem>
</itemizedlist>
<simpara>In the project <literal>pom.xml</literal> file, you can configure Maven to retrieve the project artifacts required to build your bootable JAR.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Set up the Maven project:</simpara>
<programlisting language="xml" linenumbering="unnumbered">$ mvn archetype:generate \
-DgroupId=GROUP_ID \
-DartifactId=ARTIFACT_ID \
-DarchetypeGroupId=org.apache.maven.archetypes \
-DarchetypeArtifactId=maven-archetype-webapp \
-DinteractiveMode=false</programlisting>
<simpara>Where <emphasis>GROUP_ID</emphasis> is the <literal>groupId</literal> of your project and <emphasis>ARTIFACT_ID</emphasis> is the <literal>artifactId</literal> of your project.</simpara>
</listitem>
<listitem>
<simpara>In the <literal>pom.xml</literal> file, configure Maven to retrieve the JBoss EAP BOM file from a remote repository.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;jboss&lt;/id&gt;
        &lt;url&gt;https://maven.repository.redhat.com/ga&lt;/url&gt;
        &lt;snapshots&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
        &lt;/snapshots&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;
&lt;pluginRepositories&gt;
  &lt;pluginRepository&gt;
      &lt;id&gt;jboss&lt;/id&gt;
        &lt;url&gt;https://maven.repository.redhat.com/ga&lt;/url&gt;
        &lt;snapshots&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
        &lt;/snapshots&gt;
  &lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;</programlisting>
</listitem>
<listitem>
<simpara>To configure Maven to automatically manage versions for the Jakarta EE artifacts in the <literal>jboss-eap-jakartaee8</literal> BOM, add the BOM to the <literal>&lt;dependencyManagement&gt;</literal> section of the project <literal>pom.xml</literal> file. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencyManagement&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.jboss.bom&lt;/groupId&gt;
        &lt;artifactId&gt;jboss-eap-jakartaee8&lt;/artifactId&gt;
        &lt;version&gt;7.3.4.GA&lt;/version&gt;
        &lt;type&gt;pom&lt;/type&gt;
        &lt;scope&gt;import&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</programlisting>
</listitem>
<listitem>
<simpara>Add the servlet API artifact, which is managed by the BOM, to the <literal>&lt;dependency&gt;</literal> section of the project <literal>pom.xml</literal> file, as shown in the following example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
    &lt;groupId&gt;org.jboss.spec.javax.servlet&lt;/groupId&gt;
    &lt;artifactId&gt;jboss-servlet-api_4.0_spec&lt;/artifactId&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
</listitem>
</orderedlist>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For information about the JBoss EAP Maven plug-in, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#jboss-eap-maven-plug-in_default">JBoss EAP Maven plug-in</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about the Galleon layers, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#specifying-galleon-layers-bootable-jar-server_default">Specifying Galleon layers for your bootable JAR server</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about including the Red Hat Single Sign-On Galleon feature pack in your project, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#securing-web-application-rh-sso_default">Securing your JBoss EAP bootable JAR application with Red Hat Single Sign-On</link>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="enabling-json-logging-for-bootable-jar_default">
<title>Enabling JSON logging for your bootable JAR</title>
<simpara role="_abstract">You can enable JSON logging for your bootable JAR by configuring the server logging configuration with a CLI script. When you enable JSON logging, you can use the JSON formatter to view log messages in JSON format.</simpara>
<simpara>The example in this procedure shows you how to enable JSON logging for your bootable JAR on a bare-metal platform and an OpenShift platform.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have checked the latest Maven plug-in version, such as <literal><emphasis>MAVEN_PLUGIN_VERSION</emphasis>.X.GA.Final-redhat-00001</literal>, where <emphasis>MAVEN_PLUGIN_VERSION</emphasis> is the major version and  <emphasis>X</emphasis> is the microversion. See <link xlink:href="https://maven.repository.redhat.com/ga/org/wildfly/plugins/wildfly-jar-maven-plugin/">Index of /ga/org/wildfly/plugins/wildfly-jar-maven-plugin</link>.</simpara>
</listitem>
<listitem>
<simpara>You have checked the latest Galleon feature pack version, such as <literal>3.0.X.GA-redhat-<emphasis>BUILD_NUMBER</emphasis></literal>, where  <emphasis>X</emphasis> is the minor version of JBoss EAP XP 2 and <emphasis>BUILD_NUMBER</emphasis> is the build number of the Galleon feature pack. Both <emphasis>X</emphasis> and <emphasis>BUILD_NUMBER</emphasis> can evolve during the JBoss EAP XP 3.0.0 product life cycle. See <link xlink:href="https://maven.repository.redhat.com/ga/org/jboss/eap/wildfly-galleon-pack/">Index of /ga/org/jboss/eap/wildfly-galleon-pack</link>.</simpara>
</listitem>
<listitem>
<simpara>You have created a Maven project, set up a parent dependency, and added dependencies for creating an application. See <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#creating-bootable-jar-maven-project_default">Creating a bootable JAR Maven project</link>.</simpara>
<important>
<simpara>In the Maven archetype of your Maven project, you must specify the groupID and artifactID that are specific to your project. For example:</simpara>
<screen>$ mvn archetype:generate \
-DgroupId=com.example.logging \
-DartifactId=logging \
-DarchetypeGroupId=org.apache.maven.archetypes \
-DarchetypeArtifactId=maven-archetype-webapp \
-DinteractiveMode=false
cd logging</screen>
</important>
<note>
<simpara>The examples shown in the procedure specify the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>${bootable.jar.maven.plugin.version}</literal> for the Maven plug-in version.</simpara>
</listitem>
<listitem>
<simpara><literal>${jboss.xp.galleon.feature.pack.version}</literal> for the Galleon feature pack version.</simpara>
</listitem>
</itemizedlist>
<simpara>You must set these properties in your project. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;properties&gt;
    &lt;bootable.jar.maven.plugin.version&gt;4.0.3.Final-redhat-00001&lt;/bootable.jar.maven.plugin.version&gt;
    &lt;jboss.xp.galleon.feature.pack.version&gt;3.0.0.GA-redhat-00001&lt;/jboss.xp.galleon.feature.pack.version&gt;
&lt;/properties&gt;</programlisting>
</note>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the JBoss Logging and Jakarta RESTful Web Services dependencies, which are managed by the BOM, to the <literal>&lt;dependencies&gt;</literal> section of the project <literal>pom.xml</literal> file. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.jboss.logging&lt;/groupId&gt;
        &lt;artifactId&gt;jboss-logging&lt;/artifactId&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.jboss.spec.javax.ws.rs&lt;/groupId&gt;
        &lt;artifactId&gt;jboss-jaxrs-api_2.1_spec&lt;/artifactId&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>
</listitem>
<listitem>
<simpara>Add the following content to the <literal>&lt;build&gt;</literal> element of the <literal>pom.xml</literal> file.  You must specify the latest version of any Maven plug-in and the latest version of the <literal>org.jboss.eap:wildfly-galleon-pack</literal> Galleon feature pack. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugins&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.wildfly.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;wildfly-jar-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${bootable.jar.maven.plugin.version}&lt;/version&gt;
        &lt;configuration&gt;
            &lt;feature-packs&gt;
                &lt;feature-pack&gt;
                    &lt;location&gt;org.jboss.eap:wildfly-galleon-pack:${jboss.xp.galleon.feature.pack.version}&lt;/location&gt;
                &lt;/feature-pack&gt;
            &lt;/feature-packs&gt;
            &lt;layers&gt;
                &lt;layer&gt;jaxrs-server&lt;/layer&gt;
             &lt;/layers&gt;
        &lt;/configuration&gt;
        &lt;executions&gt;
            &lt;execution&gt;
                &lt;goals&gt;
                    &lt;goal&gt;package&lt;/goal&gt;
                &lt;/goals&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;</programlisting>
</listitem>
<listitem>
<simpara>Create the directory to store Java files:</simpara>
<screen>$ mkdir -p APPLICATION_ROOT/src/main/java/com/example/logging/</screen>
<simpara>Where <literal>APPLICATION_ROOT</literal> is the directory containing the <literal>pom.xml</literal> configuration file for the application.</simpara>
</listitem>
<listitem>
<simpara>Create a Java file <literal>RestApplication.java</literal> with the following content and save the file in the <literal>APPLICATION_ROOT/src/main/java/com/example/logging/</literal> directory:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.logging;
import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("/")
public class RestApplication extends Application {
}</programlisting>
</listitem>
<listitem>
<simpara>Create a Java file <literal>HelloWorldEndpoint.java</literal> with the following content and save the file in the <literal>APPLICATION_ROOT/src/main/java/com/example/logging/</literal> directory:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.logging;

import javax.ws.rs.Path;
import javax.ws.rs.core.Response;
import javax.ws.rs.GET;
import javax.ws.rs.Produces;

import org.jboss.logging.Logger;
@Path("/hello")
public class HelloWorldEndpoint {

    private static Logger log = Logger.getLogger(HelloWorldEndpoint.class.getName());
    @GET
    @Produces("text/plain")
    public Response doGet() {
        log.debug("HelloWorldEndpoint.doGet called");
        return Response.ok("Hello from XP bootable jar!").build();
    }
}</programlisting>
</listitem>
<listitem>
<simpara>Create a CLI script, such as <literal>logging.cli</literal>, and save it in an accessible directory in the bootable JAR, such as the <literal><emphasis>APPLICATION_ROOT</emphasis>/scripts</literal> directory, where <literal>APPLICATION_ROOT</literal> is the root directory of your Maven project. The script must contain the following commands:</simpara>
<screen>/subsystem=logging/logger=com.example.logging:add(level=ALL)
/subsystem=logging/json-formatter=json-formatter:add(exception-output-type=formatted, pretty-print=false, meta-data={version="1"}, key-overrides={timestamp="@timestamp"})
/subsystem=logging/console-handler=CONSOLE:write-attribute(name=level,value=ALL)
/subsystem=logging/console-handler=CONSOLE:write-attribute(name=named-formatter, value=json-formatter)</screen>
</listitem>
<listitem>
<simpara>Add the following configuration extract to the plug-in <literal>&lt;configuration&gt;</literal> element:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;cli-sessions&gt;
        &lt;cli-session&gt;
        &lt;script-files&gt;
            &lt;script&gt;scripts/logging.cli&lt;/script&gt;
        &lt;/script-files&gt;
    &lt;/cli-session&gt;
&lt;/cli-sessions&gt;</programlisting>
<simpara>This example shows the <literal>logging.cli</literal> CLI script, which modifies the server logging configuration file to enable JSON logging for your application.</simpara>
</listitem>
<listitem>
<simpara>Package the application as a bootable JAR.</simpara>
<screen>$ mvn package</screen>
</listitem>
<listitem>
<simpara><emphasis>Optional</emphasis>: To run the application on a JBoss EAP bare-metal platform, follow the steps outlined in <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#using-bootable-jar-jboss-eap-bare-metal-platform_default">Using a bootable JAR on a JBoss EAP bare-metal platform</link>, but with the following difference:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Start the application:</simpara>
<screen>mvn wildfly-jar:run</screen>
</listitem>
<listitem>
<simpara>Verification: You can access the application by specifying the following URL in your browser: <link xlink:href="http://127.0.0.1:8080/hello">http://127.0.0.1:8080/hello</link>.</simpara>
<simpara>Expected output: You can view the JSON-formatted logs, including the <literal>com.example.logging.HelloWorldEndpoint</literal> debug trace, in the application console.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara><emphasis>Optional</emphasis>: To run the application on a JBoss EAP OpenShift platform, complete the following steps:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Add the <literal>&lt;cloud/&gt;</literal> element to the plug-in configuration. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugins&gt;
   &lt;plugin&gt;
       ... &lt;!-- You must evolve the existing configuration with the &lt;cloud/&gt; element  --&gt;
       &lt;configuration &gt;
           ...
           &lt;cloud/&gt;
        &lt;/configuration&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;</programlisting>
</listitem>
<listitem>
<simpara>Rebuild the application:</simpara>
<screen>$ mvn clean package</screen>
</listitem>
<listitem>
<simpara>Log in to your OpenShift instance using the <literal>oc login</literal> command.</simpara>
</listitem>
<listitem>
<simpara>Create a new project in OpenShift. For example:</simpara>
<screen>$ oc new-project bootable-jar-project</screen>
</listitem>
<listitem>
<simpara>Enter the following <literal>oc</literal> commands to create an application image:</simpara>
<screen>$ mkdir target/openshift &amp;&amp; cp target/logging-bootable.jar target/openshift <co xml:id="CO6-1"/>

$ oc import-image ubi8/openjdk-11 --from=registry.redhat.io/ubi8/openjdk-11 --confirm
 <co xml:id="CO6-2"/>

$ oc new-build --strategy source --binary --image-stream openjdk-11 --name logging <co xml:id="CO6-3"/>

$ oc start-build logging --from-dir target/openshift <co xml:id="CO6-4"/></screen>
<calloutlist>
<callout arearefs="CO6-1">
<para>Creates the <literal>target/openshift</literal> subdirectory. The packaged application is copied into the <literal>openshift</literal> subdirectory.</para>
</callout>
<callout arearefs="CO6-2">
<para>Imports the latest OpenJDK 11 imagestream tag and image information into the OpenShift project.</para>
</callout>
<callout arearefs="CO6-3">
<para>Creates a build configuration based on the logging directory and the OpenJDK 11 imagestream.</para>
</callout>
<callout arearefs="CO6-4">
<para>Uses the <literal>target/openshift</literal> subdirectory as the binary input to build the application.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Deploy the application:</simpara>
<screen>$ oc new-app logging

$ oc expose svc/logging</screen>
</listitem>
<listitem>
<simpara>Get the URL of the route.</simpara>
<screen>$ oc get route logging --template='{{ .spec.host }}'</screen>
</listitem>
<listitem>
<simpara>Access the application in your web browser using the URL returned from the previous command. For example:</simpara>
<screen>http://ROUTE_NAME/hello</screen>
</listitem>
<listitem>
<simpara><emphasis>Verification:</emphasis> Issue the following command to view a list of OpenShift pods available, and to check the pods build statuses:</simpara>
<screen>$ oc get pods</screen>
<simpara>Access a running pod log of your application. Where <literal>APP_POD_NAME</literal> is the name of the running pod logging application.</simpara>
<screen>$ oc logs APP_POD_NAME</screen>
<simpara>Expected outcome: The pod log is in JSON format and includes the <literal>com.example.logging.HelloWorldEndpoint</literal> debug trace.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For information about logging functionality for JBoss EAP, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/configuration_guide/#logging_with_jboss_eap">Logging with JBoss EAP</link> in the <emphasis>Configuration Guide</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>For information about using a bootable JAR on OpenShift, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#using-bootable-jar-jboss-eap-openshift-platform_default">Using a bootable JAR on a JBoss EAP OpenShift platform</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about specifying the JBoss EAP JAR Maven for your project, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#specifying-galleon-layers-bootable-jar-server_default">Specifying Galleon layers for your bootable JAR server</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about creating CLI scripts, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#cli-scripts_default">CLI scripts</link>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="enabling-web-session-data-storage-multiple-bootable-jar-instances_default">
<title>Enabling web session data storage for multiple bootable JAR instances</title>
<simpara role="_abstract">You can build and package a web-clustering application as a bootable JAR.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have checked the latest Maven plug-in version, such as <literal><emphasis>MAVEN_PLUGIN_VERSION</emphasis>.X.GA.Final-redhat-00001</literal>, where <emphasis>MAVEN_PLUGIN_VERSION</emphasis> is the major version and  <emphasis>X</emphasis> is the microversion. See <link xlink:href="https://maven.repository.redhat.com/ga/org/wildfly/plugins/wildfly-jar-maven-plugin/">Index of /ga/org/wildfly/plugins/wildfly-jar-maven-plugin</link>.</simpara>
</listitem>
<listitem>
<simpara>You have checked the latest Galleon feature pack version, such as <literal>3.0.X.GA-redhat-<emphasis>BUILD_NUMBER</emphasis></literal>, where  <emphasis>X</emphasis> is the microversion of JBoss EAP XP 2 and <emphasis>BUILD_NUMBER</emphasis> is the build number of the Galleon feature pack. Both <emphasis>X</emphasis> and <emphasis>BUILD_NUMBER</emphasis> can evolve during the JBoss EAP XP 3.0.0 product life cycle. See <link xlink:href="https://maven.repository.redhat.com/ga/org/jboss/eap/wildfly-galleon-pack/">Index of /ga/org/jboss/eap/wildfly-galleon-pack</link>.</simpara>
</listitem>
<listitem>
<simpara>You have created a Maven project, set up a parent dependency, and added dependencies for creating a web-clustering application. See <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#creating-bootable-jar-maven-project_default">Creating a bootable JAR Maven project</link>.</simpara>
<important>
<simpara>When setting up the Maven project, you must specify values in the Maven archetype configuration. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">$ mvn archetype:generate \
-DgroupId=com.example.webclustering \
-DartifactId=web-clustering \
-DarchetypeGroupId=org.apache.maven.archetypes \
-DarchetypeArtifactId=maven-archetype-webapp \
-DinteractiveMode=false
cd web-clustering</programlisting>
</important>
<note>
<simpara>The examples shown in the procedure specify the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>${bootable.jar.maven.plugin.version}</literal> for the Maven plug-in version.</simpara>
</listitem>
<listitem>
<simpara><literal>${jboss.xp.galleon.feature.pack.version}</literal> for the Galleon feature pack version.</simpara>
</listitem>
</itemizedlist>
<simpara>You must set these properties in your project. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;properties&gt;
    &lt;bootable.jar.maven.plugin.version&gt;4.0.3.Final-redhat-00001&lt;/bootable.jar.maven.plugin.version&gt;
    &lt;jboss.xp.galleon.feature.pack.version&gt;3.0.0.GA-redhat-00001&lt;/jboss.xp.galleon.feature.pack.version&gt;
&lt;/properties&gt;</programlisting>
</note>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the following content to the <literal>&lt;build&gt;</literal> element of the <literal>pom.xml</literal> file. You must specify the latest version of any Maven plug-in and the latest version of the <literal>org.jboss.eap:wildfly-galleon-pack</literal> Galleon feature pack. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugins&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.wildfly.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;wildfly-jar-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${bootable.jar.maven.plugin.version}&lt;/version&gt;
        &lt;configuration&gt;
            &lt;feature-pack-location&gt;org.jboss.eap:wildfly-galleon-pack:${jboss.xp.galleon.feature.pack.version}&lt;/feature-pack-location&gt;
            &lt;layers&gt;
                &lt;layer&gt;datasources-web-server&lt;/layer&gt;
                &lt;layer&gt;web-clustering&lt;/layer&gt;
            &lt;/layers&gt;
        &lt;/configuration&gt;
        &lt;executions&gt;
            &lt;execution&gt;
                &lt;goals&gt;
                    &lt;goal&gt;package&lt;/goal&gt;
                &lt;/goals&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;</programlisting>
<note>
<simpara>This example makes use of the <literal>web-clustering</literal> Galleon layer to enable web session sharing.</simpara>
</note>
</listitem>
<listitem>
<simpara>Update the <literal>web.xml</literal> file in the <literal>src/main/webapp/WEB-INF</literal> directory with the following configuration:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;web-app version="4.0"
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"&gt;
    &lt;distributable/&gt;
&lt;/web-app&gt;</programlisting>
<simpara>The <literal>&lt;distributable/&gt;</literal> tag indicates that this servlet can be distributed across multiple servers.</simpara>
</listitem>
<listitem>
<simpara>Create the directory to store Java files:</simpara>
<screen>$ mkdir -p APPLICATION_ROOT
/src/main/java/com/example/webclustering/</screen>
<simpara>Where <literal>APPLICATION_ROOT</literal> is the directory containing the <literal>pom.xml</literal> configuration file for the application.</simpara>
</listitem>
<listitem>
<simpara>Create a Java file <literal>MyServlet.java</literal> with the following content and save the file in the <literal><emphasis>APPLICATION_ROOT</emphasis>/src/main/java/com/example/webclustering/</literal> directory.</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.webclustering;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet(urlPatterns = {"/clustering"})
public class MyServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        response.setContentType("text/html;charset=UTF-8");
        long t;
        User user = (User) request.getSession().getAttribute("user");
        if (user == null) {
            t = System.currentTimeMillis();
            user = new User(t);
            request.getSession().setAttribute("user", user);
        }
        try (PrintWriter out = response.getWriter()) {
            out.println("&lt;!DOCTYPE html&gt;");
            out.println("&lt;html&gt;");
            out.println("&lt;head&gt;");
            out.println("&lt;title&gt;Web clustering demo&lt;/title&gt;");
            out.println("&lt;/head&gt;");
            out.println("&lt;body&gt;");
            out.println("&lt;h1&gt;Session id " + request.getSession().getId() + "&lt;/h1&gt;");
            out.println("&lt;h1&gt;User Created " + user.getCreated() + "&lt;/h1&gt;");
            out.println("&lt;h1&gt;Host Name " + System.getenv("HOSTNAME") + "&lt;/h1&gt;");
            out.println("&lt;/body&gt;");
            out.println("&lt;/html&gt;");
        }
    }
}</programlisting>
<simpara>The  content in <literal>MyServlet.java</literal> defines the endpoint to which a client sends an HTTP request.</simpara>
</listitem>
<listitem>
<simpara>Create a Java file <literal>User.java</literal> with the following content and save the file in the <literal><emphasis>APPLICATION_ROOT</emphasis>/src/main/java/com/example/webclustering/</literal> directory.</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.webclustering;

import java.io.Serializable;

public class User implements Serializable {
    private final long created;

    User(long created) {
        this.created = created;
    }
    public long getCreated() {
        return created;
    }
}</programlisting>
</listitem>
<listitem>
<simpara>Package the application:</simpara>
<screen>$ mvn package</screen>
</listitem>
<listitem>
<simpara><emphasis>Optional</emphasis>: To run the application on a JBoss EAP bare-metal platform, follow the steps outlined in <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#using-bootable-jar-jboss-eap-bare-metal-platform_default">Using a bootable JAR on a JBoss EAP bare-metal platform</link>, but with the following difference:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>On a JBoss EAP bare-metal platform, you can use the <literal>java -jar</literal> command to run multiple bootable JAR instances, as demonstrated in the following examples:</simpara>
<screen>$ java -jar target/web-clustering-bootable.jar -Djboss.node.name=node1

$ java -jar target/web-clustering-bootable.jar -Djboss.node.name=node2 -Djboss.socket.binding.port-offset=10</screen>
</listitem>
<listitem>
<simpara><emphasis>Verification</emphasis>:  You can access the application on the node 1 instance: <link xlink:href="http://127.0.0.1:8080/clustering">http://127.0.0.1:8080/clustering</link>. Note the user session ID and the user-creation time.</simpara>
<simpara>After you kill this instance, you can access the node 2 instance: <link xlink:href="http://127.0.0.1:8090/clustering">http://127.0.0.1:8090/clustering</link>. The user must match the session ID and the user-creation time of the node 1 instance.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara><emphasis>Optional</emphasis>: To run the application on a JBoss EAP OpenShift platform, follow the steps outlined in <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#using-bootable-jar-jboss-eap-openshift-platform_default">Using a bootable JAR on a JBoss EAP OpenShift platform</link>, but complete the following steps:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Add the <literal>&lt;cloud/&gt;</literal> element to the plug-in configuration. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugins&gt;
   &lt;plugin&gt;
       ... &lt;!-- You must evolve the existing configuration with the &lt;cloud/&gt; element  --&gt;
       &lt;configuration &gt;
           ...
           &lt;cloud/&gt;
        &lt;/configuration&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;</programlisting>
</listitem>
<listitem>
<simpara>Rebuild the application:</simpara>
<screen>$ mvn clean package</screen>
</listitem>
<listitem>
<simpara>Log in to your OpenShift instance using the <literal>oc login</literal> command.</simpara>
</listitem>
<listitem>
<simpara>Create a new project in OpenShift. For example:</simpara>
<screen>$ oc new-project bootable-jar-project</screen>
</listitem>
<listitem>
<simpara>To run a web-clustering application on a JBoss EAP OpenShift platform, authorization access must be granted for the service account that the pod is running in. The service account can then access the Kubernetes REST API. The following example shows authorization access being granted to a service account:</simpara>
<screen>$ oc policy add-role-to-user view system:serviceaccount:$(oc project -q):default</screen>
</listitem>
<listitem>
<simpara>Enter the following <literal>oc</literal> commands to create an application image:</simpara>
<screen>$ mkdir target/openshift &amp;&amp; cp target/web-clustering-bootable.jar target/openshift <co xml:id="CO7-1"/>

$ oc import-image ubi8/openjdk-11 --from=registry.redhat.io/ubi8/openjdk-11 --confirm <co xml:id="CO7-2"/>

$ oc new-build --strategy source --binary --image-stream openjdk-11 --name web-clustering <co xml:id="CO7-3"/>

$ oc start-build web-clustering --from-dir target/openshift <co xml:id="CO7-4"/></screen>
<calloutlist>
<callout arearefs="CO7-1">
<para>Creates the <literal>target/openshift</literal> sub-directory. The packaged application is copied into the <literal>openshift</literal> sub-directory.</para>
</callout>
<callout arearefs="CO7-2">
<para>Imports the latest OpenJDK 11 imagestream tag and image information into the OpenShift project.</para>
</callout>
<callout arearefs="CO7-3">
<para>Creates a build configuration based on the web-clustering directory and the OpenJDK 11 imagestream.</para>
</callout>
<callout arearefs="CO7-4">
<para>Uses the <literal>target/openshift</literal> sub-directory as the binary input to build the application.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Deploy the application:</simpara>
<screen>$ oc new-app web-clustering -e KUBERNETES_NAMESPACE=$(oc project -q)

$ oc expose svc/web-clustering</screen>
<important>
<simpara>You must use the <literal>KUBERNETES_NAMESPACE</literal> environment variable to view other pods in the current OpenShift namespace; otherwise, the server attempts to retrieve the pods from the <literal>default</literal> namespace.</simpara>
</important>
</listitem>
<listitem>
<simpara>Get the URL of the route.</simpara>
<screen>$ oc get route web-clustering --template='{{ .spec.host }}'</screen>
</listitem>
<listitem>
<simpara>Access the application in your web browser using the URL returned from the previous command. For example:</simpara>
<screen>http://ROUTE_NAME/clustering</screen>
<simpara>Note the user session ID and user creation time.</simpara>
</listitem>
<listitem>
<simpara>Scale the application to two pods:</simpara>
<screen>$ oc scale --replicas=2 deployments web-clustering</screen>
</listitem>
<listitem>
<simpara>Issue the following command to view a list of OpenShift pods available, and to check the pods build statuses:</simpara>
<screen>$ oc get pods</screen>
</listitem>
<listitem>
<simpara>Kill the oldest pod using the <literal>oc delete pod web-clustering-<emphasis>POD_NAME</emphasis></literal> command, where <emphasis>POD_NAME</emphasis> is the name of your oldest pod.</simpara>
</listitem>
<listitem>
<simpara>Access the application again:</simpara>
<screen>http://ROUTE_NAME/clustering</screen>
<simpara>Expected outcome: The session ID and the creation time generated by the new pod match those of the of the terminated pod. This indicates that web session data storage is enabled.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For information about distributable web session management profiles, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/development_guide/#distributable_web_subsystem">The distributable-web subsystem for Distributable Web Session Configurations</link> in the <emphasis>Development Guide</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>For information about configuring the JGroups protocol stack, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/getting_started_with_jboss_eap_for_openshift_container_platform/#configuring_a_jgroups_discovery_mechanism">Configuring a JGroups Discovery Mechanism</link> in the <emphasis>Getting Started with JBoss EAP for OpenShift Container Platform</emphasis> guide.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="enabling-http-authentication-bootable-jar-cli-script_default">
<title>Enabling HTTP authentication for bootable JAR with a CLI script</title>
<simpara role="_abstract">You can enable HTTP authentication for the bootable JAR with a CLI script. This script adds a security realm and a security domain to your server.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have checked the latest Maven plug-in version, such as <literal><emphasis>MAVEN_PLUGIN_VERSION</emphasis>.X.GA.Final-redhat-00001</literal>, where <emphasis>MAVEN_PLUGIN_VERSION</emphasis> is the major version and  <emphasis>X</emphasis> is the microversion. See <link xlink:href="https://maven.repository.redhat.com/ga/org/wildfly/plugins/wildfly-jar-maven-plugin/">Index of /ga/org/wildfly/plugins/wildfly-jar-maven-plugin</link>.</simpara>
</listitem>
<listitem>
<simpara>You have checked the latest Galleon feature pack version, such as <literal>3.0.X.GA-redhat-<emphasis>BUILD_NUMBER</emphasis></literal>, where  <emphasis>X</emphasis> is the microversion of JBoss EAP XP 2 and <emphasis>BUILD_NUMBER</emphasis> is the build number of the Galleon feature pack. Both <emphasis>X</emphasis> and <emphasis>BUILD_NUMBER</emphasis> can evolve during the JBoss EAP XP 3.0.0 product life cycle. See <link xlink:href="https://maven.repository.redhat.com/ga/org/jboss/eap/wildfly-galleon-pack/">Index of /ga/org/jboss/eap/wildfly-galleon-pack</link>.</simpara>
</listitem>
<listitem>
<simpara>You have created a Maven project, set up a parent dependency, and added dependencies for creating an application that requires HTTP authentication. See <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#creating-bootable-jar-maven-project_default">Creating a bootable JAR Maven project</link>.</simpara>
<important>
<simpara>When setting up the Maven project, you must specify HTTP authentication values in the Maven archetype configuration. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">$ mvn archetype:generate \
-DgroupId=com.example.auth \
-DartifactId=authentication \
-DarchetypeGroupId=org.apache.maven.archetypes \
-DarchetypeArtifactId=maven-archetype-webapp \
-DinteractiveMode=false
cd authentication</programlisting>
</important>
<note>
<simpara>The examples shown in the procedure specify the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>${bootable.jar.maven.plugin.version}</literal> for the Maven plug-in version.</simpara>
</listitem>
<listitem>
<simpara><literal>${jboss.xp.galleon.feature.pack.version}</literal> for the Galleon feature pack version.</simpara>
</listitem>
</itemizedlist>
<simpara>You must set these properties in your project. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;properties&gt;
    &lt;bootable.jar.maven.plugin.version&gt;4.0.3.Final-redhat-00001&lt;/bootable.jar.maven.plugin.version&gt;
    &lt;jboss.xp.galleon.feature.pack.version&gt;3.0.0.GA-redhat-00001&lt;/jboss.xp.galleon.feature.pack.version&gt;
&lt;/properties&gt;</programlisting>
</note>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the following content to the <literal>&lt;build&gt;</literal> element of the <literal>pom.xml</literal> file. You must specify the latest version of any Maven plug-in and the latest version of the <literal>org.jboss.eap:wildfly-galleon-pack</literal> Galleon feature pack. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugins&gt;
    &lt;plugin&gt;
         &lt;groupId&gt;org.wildfly.plugins&lt;/groupId&gt;
         &lt;artifactId&gt;wildfly-jar-maven-plugin&lt;/artifactId&gt;
         &lt;version&gt;${bootable.jar.maven.plugin.version}&lt;/version&gt;
         &lt;configuration&gt;
             &lt;feature-pack-location&gt;org.jboss.eap:wildfly-galleon-pack:${jboss.xp.galleon.feature.pack.version}&lt;/feature-pack-location&gt;
             &lt;layers&gt;
                   &lt;layer&gt;datasources-web-server&lt;/layer&gt;
             &lt;/layers&gt;
        &lt;/configuration&gt;
        &lt;executions&gt;
            &lt;execution&gt;
                &lt;goals&gt;
                    &lt;goal&gt;package&lt;/goal&gt;
                 &lt;/goals&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;</programlisting>
<simpara>The example shows the inclusion of the <literal>datasources-web-server</literal> Galleon layer that contains the <literal>elytron</literal> subsystem.</simpara>
</listitem>
<listitem>
<simpara>Update the <literal>web.xml</literal> file in the <literal>src/main/webapp/WEB-INF</literal> directory. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;web-app version="4.0"
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"&gt;

    &lt;login-config&gt;
        &lt;auth-method&gt;BASIC&lt;/auth-method&gt;
        &lt;realm-name&gt;Example Realm&lt;/realm-name&gt;
    &lt;/login-config&gt;

&lt;/web-app&gt;</programlisting>
</listitem>
<listitem>
<simpara>Create the directory to store Java files:</simpara>
<screen>$ mkdir -p APPLICATION_ROOT/src/main/java/com/example/authentication/</screen>
<simpara>Where <literal>APPLICATION_ROOT</literal> is the root directory of your Maven project.</simpara>
</listitem>
<listitem>
<simpara>Create a Java file <literal>TestServlet.java</literal> with the following content and save the file in the <literal>APPLICATION_ROOT/src/main/java/com/example/authentication/</literal> directory.</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.authentication;

import javax.servlet.annotation.HttpMethodConstraint;
import javax.servlet.annotation.ServletSecurity;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.io.PrintWriter;

@WebServlet(urlPatterns = "/hello")
@ServletSecurity(httpMethodConstraints = { @HttpMethodConstraint(value = "GET", rolesAllowed = { "Users" }) })
public class TestServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        PrintWriter writer = resp.getWriter();
        writer.println("Hello " + req.getUserPrincipal().getName());
        writer.close();
    }

}</programlisting>
</listitem>
<listitem>
<simpara>Create a CLI script, such as <literal>authentication.cli</literal>, and save it in an accessible directory in the bootable JAR, such as the <literal><emphasis>APPLICATION_ROOT</emphasis>/scripts</literal> directory. The script must contain the following commands:</simpara>
<screen>/subsystem=elytron/properties-realm=bootable-realm:add(users-properties={relative-to=jboss.server.config.dir, path=bootable-users.properties, plain-text=true}, groups-properties={relative-to=jboss.server.config.dir, path=bootable-groups.properties})
/subsystem=elytron/security-domain=BootableDomain:add(default-realm=bootable-realm, permission-mapper=default-permission-mapper, realms=[{realm=bootable-realm, role-decoder=groups-to-roles}])

/subsystem=undertow/application-security-domain=other:write-attribute(name=security-domain, value=BootableDomain)</screen>
</listitem>
<listitem>
<simpara>Add the following configuration extract to the plug-in <literal>&lt;configuration&gt;</literal> element:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;cli-sessions&gt;
    &lt;cli-session&gt;
        &lt;script-files&gt;
            &lt;script&gt;scripts/authentication.cli&lt;/script&gt;
        &lt;/script-files&gt;
    &lt;/cli-session&gt;
&lt;/cli-sessions&gt;</programlisting>
<simpara>This example shows the <literal>authentication.cli</literal> CLI script, which configures the default <literal>undertow</literal> security domain to the security domain defined for your server.</simpara>
</listitem>
<listitem>
<simpara>In the root directory of your Maven project create a directory to store the properties files that the JBoss EAP JAR Maven plug-in adds to the bootable JAR:</simpara>
<programlisting language="xml" linenumbering="unnumbered">$ mkdir -p APPLICATION_ROOT/extra-content/standalone/configuration/</programlisting>
<simpara>Where <literal>APPLICATION_ROOT</literal> is the directory containing the <literal>pom.xml</literal> configuration file for the application.</simpara>
<simpara>This directory stores files such as <literal>bootable-users.properties</literal> and <literal>bootable-groups.properties</literal> files.</simpara>
<simpara>The <literal>bootable-users.properties</literal> file contains the following content:</simpara>
<screen>testuser=bootable_password</screen>
<simpara>The <literal>bootable-groups.properties</literal> file contains the following content:</simpara>
<screen>testuser=Users</screen>
</listitem>
<listitem>
<simpara>Add the following <literal>extra-content-content-dirs</literal> element to the existing <literal>&lt;configuration&gt;</literal> element:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;extra-server-content-dirs&gt;
            &lt;extra-content&gt;extra-content&lt;/extra-content&gt;
&lt;/extra-server-content-dirs&gt;</programlisting>
<simpara>The <literal>extra-content</literal> directory contains the properties files.</simpara>
</listitem>
<listitem>
<simpara>Package the application as a bootable JAR.</simpara>
<screen>$ mvn package</screen>
</listitem>
<listitem>
<simpara>Start the application:</simpara>
<screen>mvn wildfly-jar:run</screen>
</listitem>
<listitem>
<simpara>Call the servlet, but do not specify credentials:</simpara>
<screen>curl -v http://localhost:8080/hello</screen>
<simpara>Expected output:</simpara>
<screen>HTTP/1.1 401 Unauthorized
...
WWW-Authenticate: Basic realm="Example Realm"</screen>
</listitem>
<listitem>
<simpara>Call the server and specify your credentials. For example:</simpara>
<screen>$ curl -v -u testuser:bootable_password http://localhost:8080/hello</screen>
<simpara>A HTTP 200 status is returned that indicates HTTP authentication is enabled for your bootable JAR. For example:</simpara>
<screen>HTTP/1.1 200 OK
....
Hello testuser</screen>
</listitem>
</orderedlist>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For information about enabling HTTP authentication for the <literal>undertow</literal> security domain, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/how_to_configure_server_security/#elytron_http_auth_http">Enable HTTP Authentication for Applications Using the CLI Security Command</link> in the <emphasis>How to Configure Server Security</emphasis>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="securing-web-application-rh-sso_default">
<title>Securing your JBoss EAP bootable JAR application with Red Hat Single Sign-On</title>
<simpara role="_abstract">You can use the Galleon <literal>keycloak-client-oidc</literal> layer to install a version of a server that is provisioned with Red Hat Single Sign-On 7.4 OpenID Connect client adapters.</simpara>
<simpara>The <literal>keycloak-client-oidc</literal> layer provides Red Hat Single Sign-On OpenID Connect client adapters to your Maven project. This layer is included with the <literal>keycloak-adapter-galleon-pack</literal> Red Hat Single Sign-On feature pack.</simpara>
<simpara>You can add the <literal>keycloak-adapter-galleon-pack</literal> feature pack to your JBoss EAP Maven plug-in configuration and then add the <literal>keycloak-client-oidc</literal>. You can view Red Hat Single Sign-On client adapters that are compatible with JBoss EAP by visiting the <link xlink:href="https://access.redhat.com/articles/2342861#Comp_7_4">Supported Configurations: Red Hat Single Sign-On 7.4</link> web page.</simpara>
<simpara>The example in this procedure shows you how to secure a JBoss EAP bootable JAR by using  JBoss EAP features provided by the <literal>keycloak-client-oidc</literal> layer.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have checked the latest Maven plug-in version, such as <literal><emphasis>MAVEN_PLUGIN_VERSION</emphasis>.X.GA.Final-redhat-00001</literal>, where <emphasis>MAVEN_PLUGIN_VERSION</emphasis> is the major version and  <emphasis>X</emphasis> is the microversion. See <link xlink:href="https://maven.repository.redhat.com/ga/org/wildfly/plugins/wildfly-jar-maven-plugin/">Index of /ga/org/wildfly/plugins/wildfly-jar-maven-plugin</link>.</simpara>
</listitem>
<listitem>
<simpara>You have checked the latest Galleon feature pack version, such as <literal>3.0.X.GA-redhat-<emphasis>BUILD_NUMBER</emphasis></literal>, where  <emphasis>X</emphasis> is the microversion of JBoss EAP XP 2 and <emphasis>BUILD_NUMBER</emphasis> is the build number of the Galleon feature pack. Both <emphasis>X</emphasis> and <emphasis>BUILD_NUMBER</emphasis> can evolve during the JBoss EAP XP 3.0.0 product life cycle. See <link xlink:href="https://maven.repository.redhat.com/ga/org/jboss/eap/wildfly-galleon-pack/">Index of /ga/org/jboss/eap/wildfly-galleon-pack</link>.</simpara>
</listitem>
<listitem>
<simpara>You have checked the latest Red Hat Single Sign-On Galleon feature pack version, such as <literal>org.jboss.sso:keycloak-adapter-galleon-pack:9.0.X:redhat-BUILD_NUMBER</literal>, where <literal>X</literal> is the microversion of Red Hat Single Sign-On that depends on the Red Hat Single Sign-On server release used to secure the application, and <literal>BUILD_NUMBER</literal> is the build number of the Red Hat Single Sign-On Galleon feature pack. Both <emphasis>X</emphasis> and <emphasis>BUILD_NUMBER</emphasis> can evolve during the JBoss EAP XP 3.0.0 product life cycle. See <link xlink:href="https://maven.repository.redhat.com/ga/org/jboss/sso/keycloak-adapter-galleon-pack/">Index of /ga/org/jboss/sso/keycloak-adapter-galleon-pack</link>.</simpara>
</listitem>
<listitem>
<simpara>You have created a Maven project, set up a parent dependency, and added dependencies for creating an application that you want secured with Red Hat Single Sign-On. See <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#creating-bootable-jar-maven-project_default">Creating a bootable JAR Maven project</link>.</simpara>
</listitem>
<listitem>
<simpara>You have a Red Hat Single Sign-On server that is running on port 8090. See <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html/getting_started_guide/installing-standalone_#starting-server_">Starting the Red Hat Single Sign-On server.</link></simpara>
</listitem>
<listitem>
<simpara>You have logged in to the Red Hat Single Sign-On Admin Console and created the following metadata:</simpara>
<itemizedlist>
<listitem>
<simpara>A realm named <literal>demo</literal>.</simpara>
</listitem>
<listitem>
<simpara>A role named <literal>Users</literal>.</simpara>
</listitem>
<listitem>
<simpara>A user and password. You must assign a <literal>Users</literal> role to the user.</simpara>
</listitem>
<listitem>
<simpara>A <literal>public-client</literal> web application with a Root URL. The example in the procedure, defines <literal>simple-webapp</literal> as the web application and <literal><link xlink:href="http://localhost:8080/simple-webapp/secured">http://localhost:8080/simple-webapp/secured</link></literal> as the Root URL.</simpara>
<important>
<simpara>When setting up the Maven project, you must specify values for the application that you want to secure with Red Hat Single Sign-On in the Maven archetype. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">$ mvn archetype:generate \
-DgroupId=com.example.keycloak \
-DartifactId=simple-webapp \
-DarchetypeGroupId=org.apache.maven.archetypes \
-DarchetypeArtifactId=maven-archetype-webapp \
-DinteractiveMode=false
cd simple-webapp</programlisting>
</important>
<note>
<simpara>The examples shown in the procedure specify the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>${bootable.jar.maven.plugin.version}</literal> for the Maven plug-in version.</simpara>
</listitem>
<listitem>
<simpara><literal>${jboss.xp.galleon.feature.pack.version}</literal> for the Galleon feature pack version.</simpara>
</listitem>
<listitem>
<simpara><literal>${keycloak.feature.pack.version}</literal> for the Red Hat Single Sign-On feature pack version.</simpara>
</listitem>
</itemizedlist>
<simpara>You must set these properties in your project. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;properties&gt;
    &lt;bootable.jar.maven.plugin.version&gt;4.0.3.Final-redhat-00001&lt;/bootable.jar.maven.plugin.version&gt;
    &lt;jboss.xp.galleon.feature.pack.version&gt;3.0.0.GA-redhat-00001&lt;/jboss.xp.galleon.feature.pack.version&gt;
    &lt;keycloak.feature.pack.version&gt;9.0.10.redhat-00001&lt;/keycloak.feature.pack.version&gt;
&lt;/properties&gt;</programlisting>
</note>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Add the following content to the <literal>&lt;build&gt;</literal> element of the <literal>pom.xml</literal> file.  You must specify the latest version of any Maven plug-in and the latest version of the <literal>org.jboss.eap:wildfly-galleon-pack</literal> Galleon feature pack. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugins&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;org.wildfly.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;wildfly-jar-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${bootable.jar.maven.plugin.version}&lt;/version&gt;
        &lt;configuration&gt;
            &lt;feature-packs&gt;
                &lt;feature-pack&gt;
                    &lt;location&gt;org.jboss.eap:wildfly-galleon-pack:${jboss.xp.galleon.feature.pack.version}&lt;/location&gt;
                &lt;/feature-pack&gt;
                &lt;feature-pack&gt;
                    &lt;location&gt;org.jboss.sso:keycloak-adapter-galleon-pack:${keycloak.feature.pack.version}&lt;/location&gt;
                &lt;/feature-pack&gt;
            &lt;/feature-packs&gt;
            &lt;layers&gt;
                &lt;layer&gt;datasources-web-server&lt;/layer&gt;
                &lt;layer&gt;keycloak-client-oidc&lt;/layer&gt;
            &lt;/layers&gt;
        &lt;/configuration&gt;
        &lt;executions&gt;
            &lt;execution&gt;
                &lt;goals&gt;
                    &lt;goal&gt;package&lt;/goal&gt;
                &lt;/goals&gt;
            &lt;/execution&gt;
        &lt;/executions&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;</programlisting>
<simpara>The Maven plug-in provisions subsystems and modules that are required for deploying the web application.</simpara>
<simpara>The <literal>keycloak-client-oidc</literal> layer provides Red Hat Single Sign-On OpenID Connect client adapters to your project by using the <literal>keycloak</literal> subsystem and its dependencies to activate support for Red Hat Single Sign-On authentication. Red Hat Single Sign-On client adapters are libraries that secure applications and services with Red Hat Single Sign-On.</simpara>
</listitem>
<listitem>
<simpara>In the project <literal>pom.xml</literal> file, set the <literal>&lt;context-root&gt;</literal> to <literal>false</literal> in your plug-in configuration. This registers the application in the <literal>simple-webapp</literal> resource path. By default, the WAR file is registered under the root-context path.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;configuration&gt;
    ...
     &lt;context-root&gt;false&lt;/context-root&gt;
     ...
&lt;/configuration&gt;</programlisting>
</listitem>
<listitem>
<simpara>Create a CLI script, such as <literal>configure-oidc.cli</literal> and save it in an accessible directory in the bootable JAR, such as the <literal><emphasis>APPLICATION_ROOT</emphasis>/scripts</literal> directory, where <emphasis>APPLICATION_ROOT</emphasis> is the root directory of your Maven project. The script must contain commands similar to the following example:</simpara>
<screen>/subsystem=keycloak/secure-deployment=simple-webapp.war:add( \
    realm=demo, \
    resource=simple-webapp, \
    public-client=true, \
    auth-server-url=http://localhost:8090/auth/, \
    ssl-required=EXTERNAL)</screen>
<simpara>This script example defines the <literal>secure-deployment=simple-webapp.war</literal> resource in the <literal>keycloak</literal> subsystem. The <literal>simple-webapp.war</literal> resource is the name of the WAR file that is deployed in the bootable JAR.</simpara>
</listitem>
<listitem>
<simpara>In the project <literal>pom.xml</literal> file, add the following configuration extract to the existing plug-in <literal>&lt;configuration&gt;</literal> element:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;cli-sessions&gt;
    &lt;cli-session&gt;
        &lt;script-files&gt;
            &lt;script&gt;scripts/configure-oidc.cli&lt;/script&gt;
        &lt;/script-files&gt;
    &lt;/cli-session&gt;
&lt;/cli-sessions&gt;</programlisting>
</listitem>
<listitem>
<simpara>Update the <literal>web.xml</literal> file in the <literal>src/main/webapp/WEB-INF</literal> directory. For example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
   metadata-complete="false"&gt;

    &lt;login-config&gt;
        &lt;auth-method&gt;BASIC&lt;/auth-method&gt;
        &lt;realm-name&gt;Simple Realm&lt;/realm-name&gt;
    &lt;/login-config&gt;

&lt;/web-app&gt;</programlisting>
</listitem>
<listitem>
<simpara><emphasis>Optional:</emphasis> Alternatively to steps 7 through 9, you can embed the server configuration in the web application by adding the <literal>keycloak.json</literal> descriptor to the <literal>WEB-INF</literal> directory of the web application. For example:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "realm" : "demo",
    "resource" : "simple-webapp",
    "public-client" : "true",
    "auth-server-url" : "http://localhost:8090/auth/",
    "ssl-required" : "EXTERNAL"
}</programlisting>
<simpara>You must then set the <literal>&lt;auth-method&gt;</literal> of the web application to <literal>KEYCLOAK</literal>. The following example code illustrates how to set the <literal>&lt;auth-method&gt;</literal>:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;login-config&gt;
        &lt;auth-method&gt;KEYCLOAK&lt;/auth-method&gt;
        &lt;realm-name&gt;Simple Realm&lt;/realm-name&gt;
    &lt;/login-config&gt;</programlisting>
</listitem>
<listitem>
<simpara>Create a Java file named <literal>SecuredServlet.java</literal> with the following content and save the file in the <literal><emphasis>APPLICATION_ROOT</emphasis>/src/main/java/com/example/securedservlet/</literal> directory.</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.securedservlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.security.Principal;

import javax.servlet.ServletException;
import javax.servlet.annotation.HttpMethodConstraint;
import javax.servlet.annotation.ServletSecurity;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/secured")
@ServletSecurity(httpMethodConstraints = { @HttpMethodConstraint(value = "GET",
    rolesAllowed = { "Users" }) })
public class SecuredServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        try (PrintWriter writer = resp.getWriter()) {
            writer.println("&lt;html&gt;");
            writer.println("&lt;head&gt;&lt;title&gt;Secured Servlet&lt;/title&gt;&lt;/head&gt;");
            writer.println("&lt;body&gt;");
            writer.println("&lt;h1&gt;Secured Servlet&lt;/h1&gt;");
            writer.println("&lt;p&gt;");
            writer.print(" Current Principal '");
            Principal user = req.getUserPrincipal();
            writer.print(user != null ? user.getName() : "NO AUTHENTICATED USER");
            writer.print("'");
            writer.println("    &lt;/p&gt;");
            writer.println("  &lt;/body&gt;");
            writer.println("&lt;/html&gt;");
        }
    }
}</programlisting>
</listitem>
<listitem>
<simpara>Package the application as a bootable JAR.</simpara>
<screen>$ mvn package</screen>
</listitem>
<listitem>
<simpara>Start the application. The following example starts the <literal>simple-webapp</literal> web application from its specified bootable JAR path:</simpara>
<screen>$ java -jar target/simple-webapp-bootable.jar</screen>
</listitem>
<listitem>
<simpara>Specify the following URL in your web browser to access the webpage secured with Red Hat Single Sign-On. The following example shows the URL for the secured <literal>simple-webapp</literal> web application:</simpara>
<screen>http://localhost:8080/simple-webapp/secured</screen>
</listitem>
<listitem>
<simpara>Log in as a user from your Red Hat Single Sign-On realm.</simpara>
</listitem>
<listitem>
<simpara><emphasis>Verification:</emphasis> Check that the webpage displays the following output:</simpara>
<screen>Current Principal '&lt;principal id&gt;'</screen>
</listitem>
</orderedlist>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For information about configuring the Red Hat Single Sign-On adapter subsystem, see <link xlink:href="https://access.redhat.com/documentation/en-us/red-hat-single-sign-on/7.4/html/securing_applications_and_services_guide/openid_connect_3#jboss_adapter">JBoss EAP Adapter</link> in the <emphasis>Securing Applications and Services Guide</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>For information about specifying the JBoss EAP JAR Maven for your project, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#specifying-galleon-layers-bootable-jar-server_default">Specifying Galleon layers for your bootable JAR server</link>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="packaging-bootable-jar-dev-mode_default">
<title>Packaging a bootable JAR in <literal>dev</literal> mode</title>
<simpara role="_abstract">The JBoss EAP JAR Maven plug-in <literal>dev goal</literal> provides <literal>dev</literal> mode, Development Mode, which you can use to enhance your application development process.</simpara>
<simpara>In <literal>dev</literal> mode, you do not need to rebuild the bootable JAR after you make changes to your application.</simpara>
<simpara>The workflow in this procedure demonstrates using <literal>dev</literal> mode to configure a bootable JAR.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Maven is installed.</simpara>
</listitem>
<listitem>
<simpara>You have created a Maven project, set up a parent dependency, and added dependencies for creating an MicroProfile application. See <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#eclipse_microprofile_config_development">MicroProfile Config development</link>.</simpara>
</listitem>
<listitem>
<simpara>You have specified the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#using-bootable-jar-jboss-eap-bare-metal-platform_default">JBoss EAP JAR Maven plug-in</link> in your Maven project <literal>pom.xml</literal> file.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Build and start the bootable JAR in Development Mode:</simpara>
<screen>$ mvn wildfly-jar:dev</screen>
<simpara>In <literal>dev</literal> mode, the server deployment scanner is configured to monitor the <literal>target/deployments</literal> directory.</simpara>
</listitem>
<listitem>
<simpara>Prompt the JBoss EAP Maven Plug-in to build and copy your application to the <literal>target/deployments</literal> directory with the following command:</simpara>
<screen>$ mvn package -Ddev</screen>
<simpara>The server packaged inside the bootable JAR deploys the application stored in the <literal>target/deployments</literal> directory.</simpara>
</listitem>
<listitem>
<simpara>Modify the code in your application code.</simpara>
</listitem>
<listitem>
<simpara>Use the <literal>mvn package -Ddev</literal> to prompt the JBoss EAP Maven Plug-in to re-build your application and re-deploy it.</simpara>
</listitem>
<listitem>
<simpara>Stop the server. For example:</simpara>
<screen>$ mvn wildfly-jar:shutdown</screen>
</listitem>
<listitem>
<simpara>After you complete your application changes, package your application as a bootable JAR:</simpara>
<screen>$ mvn package</screen>
</listitem>
</orderedlist>
</section>
<section xml:id="applying-jboss-eap-patch-bootable-jar_default">
<title>Applying the JBoss EAP patch to your bootable JAR</title>
<simpara role="_abstract">On a JBoss EAP bare-metal platform, you can install the patch to your bootable JAR by using a CLI script.</simpara>
<simpara>The CLI script issues the <literal>patch apply</literal> command to  apply the patch during the bootable JAR build.</simpara>
<important>
<simpara>After you apply a patch to your bootable JAR, you cannot roll back from the applied patch. You must rebuild a bootable JAR without the patch.</simpara>
</important>
<simpara>Additionally, you can apply a legacy patch to your bootable JAR with the JBoss EAP JAR Maven plug-in. This plug-in provides a <literal>&lt;legacy-patch-cli-script&gt;</literal> configuration option to reference the CLI script that is used to patch the server.</simpara>
<note>
<simpara>The prefix <literal>legacy-*</literal> in <literal>&lt;legacy-patch-cli-script&gt;</literal> is related to applying archive patches to a bootable JAR. This method is similar to applying patches to regular JBoss EAP distributions.</simpara>
</note>
<simpara>You can use the <literal>legacy-patch-cleanup</literal> option in the JBoss EAP JAR Maven plug-in configuration to reduce the memory footprint of the bootable JAR by removing unused patch content. The option removes unused module dependencies. This option is set as <literal>false</literal> by default in the patch configuration file.</simpara>
<simpara>The <literal>legacy-patch-cleanup</literal> option removes the following patch content:</simpara>
<itemizedlist>
<listitem>
<simpara>The <literal>&lt;JBOSS_HOME&gt;/.installation/patches</literal> directory.</simpara>
</listitem>
<listitem>
<simpara>Original locations of patch modules in the base layer.</simpara>
</listitem>
<listitem>
<simpara>Unused modules that were added by the patch and are not referenced in the that existing module graph or patched modules graph.</simpara>
</listitem>
<listitem>
<simpara>Overlays directories that are not listed in the <literal>.overlays</literal> file.</simpara>
</listitem>
</itemizedlist>
<important>
<simpara>The <literal>legacy-patch-clean-up</literal> option variable is provided as a Technology Preview. Technology Preview features are not supported with Red Hat production service level agreements (SLAs), might not be functionally complete, and Red Hat does not recommend to use them for production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.</simpara>
</important>
<note>
<simpara>The information outlined in this procedure also pertains to the hollow bootable JAR.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have set up an account on the <link xlink:href="https://access.redhat.com/">Red Hat Customer Portal</link>.</simpara>
</listitem>
<listitem>
<simpara>You have downloaded the following files from the <emphasis role="strong">Product Downloads</emphasis> page:</simpara>
<itemizedlist>
<listitem>
<simpara>The JBoss EAP JBoss EAP 7.4.4 GA patch</simpara>
</listitem>
<listitem>
<simpara>The JBoss EAP XP 3.0.0 patch</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a CLI script that defines the legacy patches you want to apply to your bootable JAR. The script must contain one or more patch apply commands. The <literal>--override-all</literal> command is required when patching a server that was trimmed with Galleon layers, for example:</simpara>
<screen>patch apply patch-oneoff1.zip --override-all

patch apply patch-oneoff2.zip --override-all

patch info --json-output</screen>
</listitem>
<listitem>
<simpara>Reference your CLI script in the <literal>&lt;legacy-patch-cli-script&gt;</literal> element of your <literal>pom.xml</literal> file.</simpara>
</listitem>
<listitem>
<simpara>Rebuild the bootable JAR.</simpara>
</listitem>
</orderedlist>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara>For information about downloading the JBoss EAP Eclipse MicroProfile Maven repository, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#downloading-the-jboss-eap-maven-repository-patch-as-archive_default">Downloading the JBoss EAP Eclipse MicroProfile Maven repository patch as an archive file</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about creating CLI scripts, see <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.3/html-single/using_eclipse_microprofile_with_jboss_eap_xp_2.0.0/#cli-scripts_default">CLI Scripts</link>.</simpara>
</listitem>
<listitem>
<simpara>For information about Technology Preview features, see <link xlink:href="https://access.redhat.com/support/offerings/techpreview">Technology Preview Features Support Scope</link> on the <emphasis>Red Hat Customer Portal</emphasis>.</simpara>
</listitem>
</itemizedlist>
</section>
</chapter>
<chapter xml:id="reference" remap="_reference">
<title>Reference</title>
<section xml:id="microprofile_config_reference" remap="_microprofile_config_reference">
<title>MicroProfile Config reference</title>
<section xml:id="microprofile-default-config-attributes_default">
<title>Default MicroProfile Config attributes</title>
<simpara>The MicroProfile Config specification defines three <literal>ConfigSources</literal> by default.</simpara>
<simpara><literal>ConfigSources</literal> are sorted according to their ordinal number. If a configuration must be overwritten for a later deployment, the lower ordinal <literal>ConfigSource</literal> is overwritten before a higher ordinal <literal>ConfigSource</literal>.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Default MicroProfile Config attributes</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="75*"/>
<colspec colname="col_2" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top"><literal>ConfigSource</literal></entry>
<entry align="left" valign="top">Ordinal</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>System properties</simpara></entry>
<entry align="left" valign="top"><simpara><literal>400</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Environment variables</simpara></entry>
<entry align="left" valign="top"><simpara><literal>300</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Property files <literal>META-INF/microprofile-config.properties</literal> found on the classpath</simpara></entry>
<entry align="left" valign="top"><simpara><literal>100</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="microprofile-config-smallrye-configsources_default">
<title>MicroProfile Config SmallRye ConfigSources</title>
<simpara>The <literal>microprofile-config-smallrye</literal> project defines more <literal>ConfigSources</literal> you can use in addition to the default MicroProfile Config <literal>ConfigSources</literal>.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Additional MicroProfile Config attributes</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="67*"/>
<colspec colname="col_2" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top"><literal>ConfigSource</literal></entry>
<entry align="left" valign="top">Ordinal</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>config-source</literal> in the Subsystem</simpara></entry>
<entry align="left" valign="top"><simpara><literal>100</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ConfigSource</literal> from the Directory</simpara></entry>
<entry align="left" valign="top"><simpara><literal>100</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ConfigSource</literal> from Class</simpara></entry>
<entry align="left" valign="top"><simpara><literal>100</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>An explicit ordinal is not specified for these <literal>ConfigSources</literal>. They inherit the default ordinal value found in the MicroProfile Config specification.</simpara>
</section>
</section>
<section xml:id="microprofile_fault_tolerance_reference" remap="_microprofile_fault_tolerance_reference">
<title>MicroProfile Fault Tolerance reference</title>
<section xml:id="eclipse-microprofile-fault-tolerance-configuration-properties_default">
<title>MicroProfile Fault Tolerance configuration properties</title>
<simpara>SmallRye Fault Tolerance specification defines the following properties in addition to the properties defined in the MicroProfile Fault Tolerance specification.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>MicroProfile Fault Tolerance configuration properties</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="29*"/>
<colspec colname="col_2" colwidth="14*"/>
<colspec colname="col_3" colwidth="57*"/>
<thead>
<row>
<entry align="left" valign="top">Property</entry>
<entry align="left" valign="top">Default value</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>io.smallrye.faulttolerance.globalThreadPoolSize</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>100</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Number of threads used by the fault tolerance mechanisms. This does not include bulkhead thread pools.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>io.smallrye.faulttolerance.timeoutExecutorThreads</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>5</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Size of the thread pool used for scheduling timeouts.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="microprofile_jwt_reference" remap="_microprofile_jwt_reference">
<title>MicroProfile JWT reference</title>
<section xml:id="microprofile-config-jwt-standard-properties_default">
<title>MicroProfile Config JWT standard properties</title>
<simpara>The <literal>microprofile-jwt-smallrye</literal> subsystem supports the following MicroProfile Config standard properties.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>MicroProfile Config JWT standard properties</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="13*"/>
<colspec colname="col_3" colwidth="63*"/>
<thead>
<row>
<entry align="left" valign="top">Property</entry>
<entry align="left" valign="top">Default</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>mp.jwt.verify.publickey</simpara></entry>
<entry align="left" valign="top"><simpara>NONE</simpara></entry>
<entry align="left" valign="top"><simpara>String representation of the public key encoded using one of the supported formats.  Do not set if you have set  <literal>mp.jwt.verify.publickey.location</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>mp.jwt.verify.publickey.location</simpara></entry>
<entry align="left" valign="top"><simpara>NONE</simpara></entry>
<entry align="left" valign="top"><simpara>The location of the public key, may be a relative path or URL. Do not be set if you have set <literal>mp.jwt.verify.publickey</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>mp.jwt.verify.issuer</simpara></entry>
<entry align="left" valign="top"><simpara>NONE</simpara></entry>
<entry align="left" valign="top"><simpara>The expected value of any <literal>iss</literal> claim of any JWT token being validated.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Example <literal>microprofile-config.properties</literal> configuration:</simpara>
<screen>mp.jwt.verify.publickey.location=META-INF/public.pem
mp.jwt.verify.issuer=jwt-issuer</screen>
</section>
</section>
<section xml:id="microprofile_openapi_reference" remap="_microprofile_openapi_reference">
<title>MicroProfile OpenAPI reference</title>
<section xml:id="microprofile-open-api-configuration-properties_default">
<title>MicroProfile OpenAPI configuration properties</title>
<simpara>In addition to the standard MicroProfile OpenAPI configuration properties, JBoss EAP supports the following additional MicroProfile OpenAPI properties. These properties can be applied in both the global and the application scope.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>MicroProfile OpenAPI properties in JBoss EAP</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33*"/>
<colspec colname="col_2" colwidth="33*"/>
<colspec colname="col_3" colwidth="33*"/>
<thead>
<row>
<entry align="left" valign="top">Property</entry>
<entry align="left" valign="top">Default value</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>mp.openapi.extensions.enabled</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Enables or disables registration of an OpenAPI endpoint.</simpara><simpara>When set to <literal>false</literal>, disables generation of OpenAPI documentation. You can set the value  globally using the config subsystem, or for each application in a configuration file such as <literal>/META-INF/microprofile-config.properties</literal>.</simpara><simpara>You can parameterize this property to selectively enable or disable <literal>microprofile-openapi-smallrye</literal> in different environments, such as production or development.</simpara><simpara>You can use this property to control which application associated with a given virtual host should generate a MicroProfile OpenAPI model.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>mp.openapi.extensions.path</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>/openapi</literal></simpara></entry>
<entry align="left" valign="top"><simpara>You can use this property for generating OpenAPI documentation for multiple applications associated with a virtual host.</simpara><simpara>Set a distinct <literal>mp.openapi.extensions.path</literal> on each application associated with the same virtual host.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>mp.openapi.extensions.servers.relative</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether auto-generated server records are absolute or relative to the location of the OpenAPI endpoint.</simpara><simpara>Server records are necessary to ensure, in the presence of a non-root context path, that consumers of an OpenAPI document can construct valid URLs to REST services relative to the host of the OpenAPI endpoint.</simpara><simpara>The value <literal>true</literal> indicates that the server records are relative to the location of the OpenAPI endpoint. The generated record contains the context path of the deployment.</simpara><simpara>When set to <literal>false</literal>, JBoss EAP XP generates server records including all the protocols, hosts, and ports at which the deployment is accessible.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
</section>
</chapter>
</book>